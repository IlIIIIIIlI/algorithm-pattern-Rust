{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["0","100","1、","200","240","2、","300","3、","4","algorithm","bat、tmd","binzi56","c(c++","chienmi","csharp(c#","dart(dart实现),在线文档","dashidhi","easyui","esdeath","gitbook","gitbook：算法模板","github","go","golang(golang实现)","googl","hard","introduct","java(java","javascript(js+ts实现)","leetcod","leetcode，中间大概花了一个半月(6","ligecarrym","longpi1","lvseouren","notes(java","offer","offer。","offer（最后去了宇宙系）。","offer，你值得拥有","pattern","pull","python(python","record(c++","repo","requests，在下面添加自己的项目仓库，完成自己的算法模板打卡呀~","star","studi","swift(swift","tpxxn","wardseptemb","✅","⭐️","⭐️~","【","】https://github.com/greyireland/algorithm","一个半月","为什么这么要这么刷，因为","二分搜索","二叉搜索树","二叉树","二进制","从","入门篇","分享一些计算机的经典书籍，大部分对面试应该都有帮助，强烈推荐","刷完这些练习题，基本对数据结构和算法有自己的认识体会，基本大部分面试题都能写得出来，国内的","刷题时间可以合理分配，如果打算准备面试了，建议前面两部分","剑指","动态规划","半个月刷完，边刷可以边投简历进行面试，遇到不会的不用着急，往模板上套就对了，如果面试管给你提示，那就好好做，不要错过这大好机会~","卡片","可能效果会更好~","周)左右时间刷完","周）时间刷完，最后剑指","回到最开始的问题，面试到底要刷多少题，其实这个取决于你想进什么样公司，你定的目标如果是国内一线大厂，个人感觉大概","回溯法","在线文档","基础算法篇","完成","完成打卡","完成计划之后，可以提交","实现)","实现),","实现),在线文档","希望刷完之后，你也能自己总结一套属于自己的刷题模板，有所收获，有所成长~","应该都不是问题","开始刷","开始刷题时，确实是无从下手，因为从序号开始刷，刷到几道题就遇到","心得体会","我看过的","持续更新中，觉得还可以的话点个","按此","排序算法","探索基础卡片，最后快要面试时刷题一遍剑指","推荐的刷题路径","搜索最好的刷题方式，发现按题型刷题会舒服很多，基本一个类型的题目，一天能做很多，慢慢刷题也不再枯燥，做起来也很有意思，最后也收到不错的","收藏呀","数据结构篇","文章大部分是对题目的思路介绍，和一些问题的解析，有了思路还是需要自己手动写写的，所以每篇文章最后都有对应的练习题","是大部分公司的出题源头，刷完面试中基本会遇到现题或者变形题，基本刷完这三部分，大部分国内公司的面试题应该就没什么问题了~","更新计划","月份找工作开始，从","本书","栈和队列","核心内容","此项目是自己找工作时，从","注意点：如果为了找工作刷题，遇到","滑动窗口思想","用户","的心得记录，通过各种刷题文章、专栏、视频等总结了一套自己的刷题模板。","的目的，给你指定了一个刷题的顺序，以及刷题的模板，有了方向和技巧后，就去动手吧~","的题型，会卡住很久，后面去评论区看别人怎么刷题，也去","的题如果有思路就做，没思路先跳过，先把基础打好，再来刷","目录刷一遍，如果中间有题目卡住了先跳过，然后刷题一遍","算法快速入门","算法思维","算法模板","算法模板顾名思义就是刷题的套路模板，掌握了刷题模板之后，刷题也变得好玩起来了~","算法模板，最科学的刷题方式，最快速的刷题路径，一个月从入门到","练习题","至","语言入门","这个模板主要是介绍了一些通用的刷题模板，以及一些常见问题，如到底要刷多少题，按什么顺序来刷题，如何提高刷题效率等。","递归思维","里面的题目是按类型归类，都是一些常见的高频题，很有代表性，大部分都是可以用模板加一点变形做出来，刷完后对大部分题目有基本的认识。然后刷一遍探索卡片，巩固一下一些基础知识点，总结这些知识点。最后剑指","链表","面试资源","项目地址","题。","题基本就满足大部分面试需要了。第二个问题是按什么顺序刷及如何提高效率，这个也是本","🌝","🐮","🐰","🐶","🐶~","🔥","🦁","（6"],"introduction/golang.html":["\"1\"","'0')","'1'","//","0","1","111","1]","a:=make([]int,0)","a:=make([]int,n)","a=a[:len(a)","a=append(a,x)","a[n]=x","b)","b:=byte(num+'0')","byte转数字","copi","copy(a[i:],a[i+1:])","delete(m,\"hello\")","dequeue出队","enqueue入队","fmt.printf(\"%d%s%c\\n\",","go","int)bool{return","int32","int排序","k,v:=rang","kv","leetcod","len(queue)==0","len(stack)==0","m:=make(map[string]int)","m[\"hello\"]=1","make创建长度，则通过索引赋值","make长度为0，则通过append()赋值","map","math","math.maxint32","m{","num,","num,_:=strconv.atoi()","num:=int(s[0]","ok","pop弹出","println(k,v)","push压入","queue:=make([]int,0)","queue=append(queue,10)","queue=queue[1:]","s=\"12345\"","s=s[0:len(s)]，取下限不取上限，数学表示为：[)","s[0]","s[i]","slice、map、funct","sort","sort.ints([]int{})","sort.slice(s,func(i,j","sort.strings([]string{})","stack:=make([]int,0)","stack=append(stack,10)","stack=stack[:len(stack)","str,","str:=strconv.itoa()","str:=string(s[0])","v:=queue[0]","v:=stack[len(stack)","val","}","两个值","中，全局变量不要当做返回值，否则刷题检查器会报错","值由","值都有默认值，可以直接操作默认值，如：m[age]++","切片","创建","创建栈","创建队列","删除a[i]，可以用","删除k","刷题注意点","参数传递，只能修改，不能新增或者删除原始数据","变为","和","基本用法","基本语法","字典","字符串排序","字符串转数字","实际值：1","将i+1到末尾的值覆盖到i,然后末尾","常用库","常用技巧","快速入门","是否相同，因为有默认值关系，所以需要检查","最大最小值","标准库","栈","检查栈空","比较两个","注意点","类型是byte","类型转换","自定义排序","设置kv","语言入门","语言圣经","通过切片模拟栈和队列","遍历","键需要可比较，不能为","长度0为空","队列","需要遍历，其中的","默认"],"introduction/quickstart.html":["&[i32],","&mut","&needle)","&str)","&str,","&str，代码高效处理字符串数据，无需不必要的克隆或所有权转移。。","(&str)","(&str)，这对于只读操作如字符串搜索来说更为高效。","(从","+","//","0","0,","0;","0，表示在","1","1,","1。","1：strstr","2：subset","=",">","[","[]","]","`backtrack`","`nums`","`nums`、一个起始索引","`nums`，","`result`","`result`。","`route`","`route`，","`start`","`start`、一个当前路径的可变引用","`subsets`，该方法接收一个","backtrack(&nums,","backtrack(nums,","backtrack(nums:","backtrack(选择列表,路径)","backtrack(选择列表,路径):","error","find","fn","func","haystack","haystack.find(needle).map_or(","i32","i32)","i32，按照问题的规范。","impl","index","map_or","match","mut","needl","needle.is_empty()","needle:","needle。","needle），则返回","needle，其中","nil","none","none（没有找到","nums，返回该数组所有可能的子集（幂集）。","option","pub","python","result","result);","result.add(路径)","result.push(route.clone());","result:","return","rout","route,","route.pop();","route.push(nums[i]);","route:","run","rust","solut","solution::str_str_impl(&haystack,","some(index)","some(index)，则转换为","start..nums.len()","start:","str_str(haystack:","str_str_impl","str_str_impl(haystack:","string","string)","string,","string。","strstr","subset","subsets(nums:","time","usize,","v","vec","vec)","vec,","vec::new();","vec>","vec>)","{","|v|","}","一个私有辅助函数，执行实际的计算。","上的","不可变性：","中","中的变量默认是不可变的。如果你需要修改变量的值，需要在声明时使用","中）","为空，","从","代码的风格要统一，熟悉各类语言的代码规范。","以及一个最终结果的可变引用","使用","保证下一次调用时，搜索的范围向前推进了一步。","做选择","允许我们使用引用来操作。","先介绍两个算法题，试试感觉~","先去朝一个解决问题的方向！先抛出可行解，而不是最优解！先解决，再优化！","关键字。","函数应返回","函数开始搜索，从索引","函数，i","参数转换为字符串切片","后面会分专题讲解各种数据结构、基本的算法模板、和一些高级算法模板，每一个专题都有一些经典练习题，完成所有练习的题后，你对数据结构和算法会有新的收获和体会。","命名尽量简洁明了，尽量不用数字命名如：i1、node1、a1、b2","和","和空路径开始。","回溯：将路径中最后一个数字移除，探索不包含当前数字的其他路径。","在公共方法内部，将拥有所有权的","如果找到了","如果是","如果没有找到","字符串中找出","字符串出现的第一个位置","字符串和一个","字符串，在","它接受","它接受一个整数数组的切片","定义一个公共的静态方法","定义一个内部的递归函数","定义一个动态数组","将当前数字添加到路径中。","将当前路径的一个克隆添加到结果集中。","常见错误总结","开始)。如果不存在，则返回","快速定位到题目的知识点，找到知识点的通用模板，可能需要根据题目特殊情况做特殊处理。","快速开始","思路：核心点遍历给定字符串字符，判断以当前字符开头字符串是否等于目标字符串","思路：这是一个典型的应用回溯法的题目，简单来说就是穷尽所有可能性，算法模板如下","我们大多数时候，刷算法题可能都是为了准备面试，所以面试的时候需要注意一些点","或","撤销选择","数据结构与算法","数据结构是一种数据的表现形式，如链表、二叉树、栈、队列等都是内存中一段数据表现的形式。","数组。","方法搜索","方法来处理这两种情况：","方法返回一个","是否为空字符串。","是基于字符串切片操作的，而不是拥有所有权的","是起始位置。","枚举强制进行错误处理，这与","根据问题定义，如果","检查","满足结束条件:","然后使用","用于回溯搜索子集。","用于存储最终的所有子集结果。","用于记录当前搜索的路径。","的","的公共方法，符合问题预期的接口。","的开始位置就匹配到了。","的异常处理机制不同。","的第一次出现。","示例","空值","算法快速入门","算法是一种通用的解决问题的模板或者思路，大部分数据结构都有一套通用的算法模板，所以掌握这些通用的算法模板即可解决各种算法问题。","类型。","类型的参数","类型的拥有所有权的","类型，表示所有可能的子集合。","类型：","索引开始遍历","练习","给定一个","给定一组不含重复元素的整数数组","表示一组整数，返回一个","表达式来处理这些枚举的值。","访问下标时，不能访问越界","说明：后面会深入讲解几个典型的回溯算法问题，如果当前不太了解可以暂时先跳过","调用","转换为","返回最终收集到的所有子集结果。","返回类型为","这一步确保了在每次递归调用中，当前探索的路径都会被记录下来。","这个函数被设计为使用字符串切片","这种方法避免了获取函数参数的所有权，","选择","选择列表:","递归调用","通过","通过不停的选择，撤销选择，来穷尽所有可能性，最后将满足条件的结果返回。答案代码：","通过借用进行转换。这个转换是必要的，因为内部逻辑（在","通过在接口边界将","错误处理：","问题","需要习惯使用","需要注意点","面试注意点"],"data_structure/binary_tree.html":["!=","&&","'treenode')","'treenode',","'treenode':","+","+=","0","0)","0,","0:","1","1,","1:","1]","1])","1].append(node.val)","1][0]","1][1]","1][2]","1]]","1：中序遍历后检查输出是否有序，缺点是如果不平衡无法提前返回结果，","1：分治法","1：分治法，左边平衡","2：使用后序遍历实现分治法的迭代版本","2：分治法，一个二叉树为合法的二叉搜索树当且仅当左右子树为合法二叉搜索树且根结点值大于右子树最小值小于左子树最大值。缺点是若不用迭代形式实现则无法提前返回，而迭代实现右比较复杂。","2：层序遍历","3：利用二叉搜索树的性质，根结点为左子树的右边界，右子树的左边界，使用先序遍历自顶向下更新左右子树的边界并检查是否合法，迭代版本实现简单且可以提前返回结果。","=","==",">","[","[(root,","[[treenode(),","[]","[],","[root.val]","[root]","]","_","abs(dl","ancestor","balanc","bf","bfs.append(node.left)","bfs.append(node.right)","bfs.popleft()","binari","bl","bool:","br","class","collections.deque([root])","common","d","def","depth","depth(root):","depth(root.left)","depth(root.right)","df","dl,","dr","dr)","dr,","e_l","e_l)","e_l,","e_r","e_r)","e_r),","e_r,","elif","else:","fals","float('","float('inf'))]","ii","inf')","inf'),","inord","inorder.append(node.val)","inorder_rec(root):","inorder_rec(root.left)","inorder_rec(root.right)","inordertraversal(self,","insert","insertintobst(self,","int)","int:","isbalanced(self,","isvalid","isvalidbst(self,","l_isvalid,","l_max","l_min","l_min,","largest_path_ends_at(node):","largest_path_ends_at(node.left)","largest_path_ends_at(node.right)","largest_path_ends_at(root)","last","last,","last_visit","left","left_result","len(bfs)","len(s)","level","level_s","levelorder(self,","levels.append([])","levels[","list[int]:","list[list[int]]:","low,","lowest","lowestcommonancestor(self,","max(0,","max(dl,","max(e_l,","max(self.maxdepth(root.left),","max(self.maxpath,","maxdepth(self,","maximum","maxpathsum(self,","node","node,","node.left","node.left.v","node.right","node.right.v","node.v","node.val))","node.val,","node.val:","none","none:","order","p","p,","p:","path","peek","peek.right","peek.right:","postord","postorder.append(last_visit.val)","postorder_rec(root):","postorder_rec(root.left)","postorder_rec(root.right)","postordertraversal(self,","preorder","preorder.append(node.val)","preorder_rec(root):","preorder_rec(root.left)","preorder_rec(root.right)","preordertraversal(self,","q)","q:","r_isvalid,","r_max","r_min,","range(level_size):","return","right","right_result","root","root,","root:","s","s,","s.append((node.left,","s.append((node.right,","s.append([node,","s.append(node)","s.append(node.left)","s.append(node.right)","s.appendleft(node.left)","s.appendleft(node.right)","s.pop()","s.popleft()","s[","search","self.lowestcommonancestor(root.left,","self.lowestcommonancestor(root.right,","self.maxdepth(root.right))","self.maxpath","self.preordertraversal(root.left)","self.preordertraversal(root.right)","solution:","start_from_left","start_from_left:","sum","travers","tree","treenode(val)","treenode)","treenode,","treenode:","true","true,","true:","up","up))","up:","val","val:","valid","valid_min_max(node):","valid_min_max(node.left)","valid_min_max(node.right)","visit(root)","zigzag","zigzaglevelorder(self,","中序遍历：先中序遍历左子树，再访问根节点，再中序遍历右子树","中序非递归","二叉搜索树应用","二叉树","二叉树相关问题","二叉树遍历","从下向上（分治法）","代码略","以根访问顺序决定是什么遍历","先分别处理局部，再合并结果","分段处理","分治法应用","分治法模板","前序遍历与分治法","前序遍历：先访问根节点，再前序遍历左子树，再前序遍历右子树","前序非递归","右边平衡","合并结果","后序遍历：先后序遍历左子树，再后序遍历右子树，再访问根节点","后序非递归","和分治法区别：前者一般将最终结果通过指针参数传入，后者一般递归返回结果最后合并","字形遍历","层次应用","层次遍历","左右两边高度","左子树都是优先右子树","常见题目示例","归并排序","快速排序","思路","思路：分治法。最大路径的可能情况：左子树的最大路径，右子树的最大路径，或通过根结点的最大路径。其中通过根结点的最大路径值等于以左子树根结点为端点的最大路径值加以右子树根结点为端点的最大路径值再加上根结点值，这里还要考虑有负值的情况即负值路径需要丢弃不取。","思路：分治法，有左子树的公共祖先或者有右子树的公共祖先，就返回子树的祖先，否则返回根节点","思路：在bfs迭代模板上改用双端队列控制输出顺序","思路：如果只是为了完成任务则找到最后一个叶子节点满足插入条件即可。但此题深挖可以涉及到如何插入并维持平衡二叉搜索树的问题，并不适合初学者。","总结","找到该树中两个指定节点的最近公共祖先。","掌握二叉树递归与非递归遍历","本质上是图的dfs的一个特例，因此可以用栈来实现","核心就是：根节点必须在右节点弹出之后，再弹出","注意点","注意点：","深度搜索","深度搜索（从上到下）","理解","知识点","练习","给定一个二叉树,","给定一个二叉树，判断其是否是一个有效的二叉搜索树。","给定一个二叉树，判断它是否是高度平衡的二叉树。","给定一个二叉树，找出其最大深度。","给定一个二叉树，返回其节点值的锯齿形层次遍历。z","给定一个非空二叉树，返回其最大路径和。","给定二叉搜索树（bst）的根节点和要插入树中的值，将值插入二叉搜索树。","返回插入后二叉搜索树的根节点。","适用场景","递归实现二叉树遍历非常简单，不同顺序区别仅在于访问父结点顺序","递归模板","递归返回条件"],"data_structure/linked_list.html":["!=","\"\"\"","#","'node')","'node':","0:","1","1:","1，空间复杂度","=","==",">",">b",">c","[","[]","]","_findmid(self,","_merge(self,","anything,","bool:","break","b，a.next","c","class","collections.defaultdict(list)","copi","copyrandomlist(self,","curr","curr,","curr.next","curr.next,","current","current,","current.next","current.next.next","current.next.v","current.val:","cycl","def","deleteduplicates(self,","detectcycle(self,","dummi","dummy,","dummy.next","duplic","else:","fals","fast","fast.next","fast.next.next","fast:","fast=head.next","fast找中点","find","find_dup","find_dup:","h","h,","h.next","h.next.next","hascycle(self,","head","head):","head,","head,则中点在","head.next","head.next.next","head:","ii","instead.","int)","int,","ispalindrome(self,","l","l1","l1,","l1.next","l1.val","l1:","l2","l2):","l2.next","l2.val:","l2:","l_merg","l_merge.next","len(s)","link","list","listnode()","listnode(next=head)","listnode)","listnode,","listnode:","log","l→l__n→l→l__n→l→l__n→…","l：l→l→…→l__n→l","m","m.next","m:","merg","mergesort","mergetwolists(self,","method","mid","mid.next","middl","modifi","n","n)","n.next","n.next.next","n:","new","nil","node","node(0)","node(o.val)","node(p.val,","none","none,","none:","null/nil","null。","number","o","o(1)","o(n","o(n)","o,","o.next","o.random","out","out.next","p","p.next","p.next)","p.next.next","p.next.random","p.random","p.random.next","palindrom","parent","parent:","parent[o.random].append(n)","parent[o]:","partit","partition(self,","peek","peek.next","peek.next.next","peek.next.v","peek.val:","place","pointer","prev","prev,","put","q","q.next","q.next.val","random","recurs","remov","reorder","reorderlist(self,","return","rev_next","revers","reversebetween(self,","reverselist(self,","s","s.append(slow.val)","s.pop():","self._findmid(head)","self._merge(self.sortlist(head),","self.reverselist(head.next)","self.reverselist(m)","self.sortlist(tail))","slow","slow,","slow.next","slow.val","slow:","solution:","sort","sortlist(self,","start","start.next","tabl","tail","tail.next","tail.next.next","time","tmp","tmp.next","tricki","true","two","x","x.next","x:","x，对链表进行分隔，使得所有小于","•","、x.valu","一定要保证","为","从一个链表中移除一个节点","但循环次数小于等于","但必然需要","值","再反转","则中点在","初始化为","删除","删除用一个","判断","判断回文），在实际应用中往往还需要复原（后半个list再反转一次后拼接），操作比较复杂，这里给出更工程化的做法","到","及","反转一个单链表。","反转从位置","反转后半个list","合并两个链表","哑巴节点","哑巴节点使用场景","在","坑点","基本技能","处,","如果初始化为","如果链表无环，则返回","存储","将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。","将其重新排列后变为：","常见题型","异常处理","当头节点不确定的时候，使用哑巴节点","快慢指针","思路1：hash","思路2：复制结点跟在原结点后面，间接维护连接关系，优化空间复杂度，建立好新","思路2：快慢指针，快慢指针相同则有环，证明：如果有环每走一步快慢指针距离会减","思路：o(1)","思路：先找到","思路：将大于","思路：将当前结点放置到头结点","思路：归并排序，slow","思路：快慢指针，快慢相遇之后，慢指针回到头，快慢指针步调一致一起移动，相遇点即为入环点。","思路：找到中点断开，翻转后面部分，然后合并前后两个链表","思路：通过","思路：链表头结点可能被删除，所以用","总结","或者","找到链表的中间节点","指针比较时直接比较对象，不要用值比较，链表中有可能存在重复值情况","指针的连接关系","插入一个节点到排序链表","时间复杂度和常数级空间复杂度下，对链表进行排序。","是为了保证最后找环起始点时移动步数相同，但是作为找中点使用时一般用","是否为","最优，时间复杂度","次即可","次循环","没有重复出现的数字。","注意点","注意，此题中使用","深拷贝。","的","的节点之前。","的节点都在大于或等于","的节点，放到另外一个链表，最后连接这两个链表","的链表。请使用一趟扫描完成反转。","空间复杂度的解法需要破坏原链表（找中点","第一次相交后，快指针需要从下一个节点开始和头指针一起匀速移动","练习","给定一个单链表","给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中","给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。","给定一个链表和一个特定值","给定一个链表，判断链表中是否有环。","给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。","给定一个链表，返回链表开始入环的第一个节点。","翻转链表","节点辅助（允许头节点可变）","要求返回这个链表的","记录所有结点判断重复，空间复杂度","访问","请判断一个链表是否为回文链表。","较多，因为这样可以知道中点的上一个节点，可以用来删除等操作。","辅助删除","递归","递归返回条件为","链接后分离","链表","链表必须要掌握的一些点，通过下面练习题，基本大部分的链表类的题目都是手到擒来~","链表相关的核心点","链表，连接各个元素","需要断开中间节点","非最优，时间复杂度"],"data_structure/stack_queue.html":["\"\"\"","\"\"]","\"+\",","\"1\",","\"2[abc]3[cd]ef\",","\"3\",","\"3[a2[c]]\",","\"3[a]2[bc]\",","\"aaabcbc\".","\"abcabccdcdcdef\".","\"accaccacc\".","#","'","'*',","'*':","'+':","',","'/':","'/']:","'0'","'0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。","'1':","'1'（陆地）和","':","'node')","'node':","((2","(0,","(1,","(heights[i],","(i","(j","(min(height[stack[","(n","(最坏情况退化到","*","+","+=","//","0","0),","0,","01","0:","1","1)","1))","1),","1):","1)]","1)}","1,","1:","1]","1],","1].append(node.val)","1][0]","1][1]","1][1])))","1][j]","1]]","1]],","1]]:","1：蛮力法，比较每个以","2","2:","3)","3：包含当前","9","=","==",">",">=","[","[\"2\",","['']","['+',","[(","[0]","[[float('inf')]","[]","[])","[])}","[],","[i,","[none]","[start]","\\","]","_","__init__(self):","_min(i,","a(i,","a(k+1,","a:","abs(or1)","abs(or2)","abs_result","ac","ac。","back","bar","bar。","bf","bfs,","bfs.append((i,","bfs.append((n_i,","bfs.append(n)","bfs.append(node.left)","bfs.append(node.right)","bfs.popleft()","binari","bool:","break","c","cdf","cdf.append(cdf[","class","clone","clonegraph(self,","collections.deque()","collections.deque([])","collections.deque([root])","collections.deque([start])","comp(or1,","compon","connect","csum","cur","curr","curr.neighbors:","curr_copi","curr_copy.neighbors.append(visited[n])","decod","decodestring(self,","def","defin","df","dfs.append((i","dfs.append((i,","dfs.append(n)","dfs.pop()","dfs[","dfs_iter(i,","dist","dist(i","dist(i,","dist[i][j]","dist[i][j])","dist[n_i][n_j]","dn_i,","dn_j","dp，dist(i,","element","element.","else:","empty(self)","empty.","enumerate(cdf):","evalrpn(self,","evalu","front","getmin(self)","graph","grid","grid:","grid[0]:","grid[i][j]","h","height:","height[cur])","height[i]","height[i])","height[stack[","heights)","heights.append(0)","heights:","heights[h]","heights[i]","heights[i]:","heights[j])","heights[k],","heights[stack[","high","histogram","i)","i,","i],","implement","inord","inorder.append(node.val)","inordertraversal(self,","int)","int:","island","iter","j","j)","j))","j)),","j),","j):","j)，时间复杂度","k","k),","k:","key=lambda","largest","largestrectanglearea(self,","len(a)","len(bfs)","len(dfs)","len(grid),","len(grid[0])","len(heights)","len(matrix)","len(matrix),","len(matrix[0])","len(nums)","len(peek_copy.neighbors)","len(self.cache)","len(self.out)","len(self.stack)","len(stack)","level","level_s","levelorder(self,","levels.append([])","levels[","list[int])","list[int],","list[int]:","list[list[int]])","list[list[int]]:","list[list[str]])","list[str])","m","m,","matrix","matrix:","matrix[i][j]","max","max((j","max(max_area,","max_area","maximum","maxq","maxq.popleft()","maxq[0]","maxslidingwindow(self,","max{dist(i","min","min(dist[i","min(dist[i][j","min(min_height,","min(result,","min(seg_tree[2","min(x,","min_","min_height","min_height(i,","minq","minq.append(i)","minq.popleft())","minstack:","myqueue:","n","n):","n_i","n_i,","n_j","n_j))","neighbor","neighbors:","node","node(n.val,","node(start.val)","node(start.val,","node.left","node.right","none","none:","notat","num","num)","number","numislands(self,","nums:","nums[:]","nums[maxq[","o(n^2)","o(n^2))，使用线段树优化后勉强","o(nlogn)，其中使用简单遍历求最小值无法","op","op,","or1","or2","or2))","or2):","order","pass","peek","peek(self)","peek.neighbors:","peek_copi","peek_copy.neighbors.append(visited[n])","polish","pop","pop(self)","problem:","push","push(self,","push，pop，top","queue","queue.","rain","range(","range(i,","range(len(height)):","range(len(heights)):","range(level_size):","range(m):","range(m)]","range(n","range(n))))","range(n):","rectangl","refer","remov","result","result.append(nums[maxq[0]])","return","revers","root","root:","s","s:","seg_tre","seg_tree.extend(list(zip(heights,","seg_tree[2","seg_tree[i]","self.cach","self.cache.append(x)","self.cache[0]","self.out","self.out.append(self.cache.pop())","self.out.pop()","self.out[","self.stack","self.stack.append((x,","self.stack.pop()[0]","self.stack[","shortest","shortestsubarray(self,","slide","solution:","stack","stack,","stack.append(comp(or1,","stack.append(i)","stack.append(int(token))","stack.append(node)","stack.pop()","stack:","stack[","stack[0]","stack_num","stack_str","start","start.neighbors:","start:","str)","str:","string","subarray","sum","token","token,","tokens:","top(self)","trap","trap(self,","travers","tree","treenode)","updatematrix(self,","us","visit","visited:","visited[curr]","visited[n]","visited[peek]","visited[start]","water","whether","window","x","x))","x:","x[0])","{start:","。","两个相邻元素间的距离为","个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为","为","为区间","二叉树的层序遍历","从","使用分治法进行求解。时间复杂度","使用栈实现队列","内最大矩形的面积，k","内最矮","出旧元素，典型应用是以线性时间获得区间最大/最小值。","利用栈","利用队列","单调栈的拓展，可以从数组头","后入先出，保存临时值","和","和右边第一个高度小于当前高度的","宽度优先搜索","常用于","广度搜索","广度搜索，类似一层一层的搜索","开始","思路","思路：用两个栈实现或插入元组实现，保证当前最小值在栈顶即可","思路：通过两个栈进行操作，一个用于存数，另一个用来存字符串","思路：通过栈保存原来的元素，遇到表达式弹出运算，再推入结果，重复这个过程","思路：通过深度搜索遍历可能性（注意标记已访问元素）","总结","操作，并能在常数时间内检索到最小元素的栈。","无法","最大矩形的边界为左边第一个高度小于当前高度的","栈","栈和队列","栈的特点是后入先出","根据这个特点可以临时保存一些数据，之后用到依次再弹出来，常用于","求在该柱状图中，能够勾勒出来的矩形的最大面积。","求滑动窗口中的最大元素","波兰表达式计算","深度搜索","熟悉栈的使用场景","熟悉队列的使用场景","的坐标，则","的距离。","简介","练习","组成的矩阵，找出每个元素到最近的","结束的最大矩形，a(i,","给你无向连通图中一个节点的引用，请你返回该图的深拷贝（克隆）。","给定","给定一个二叉树，返回它的中序遍历。","给定一个由","给定一个经过编码的字符串，返回它解码后的字符串。","补充：单调栈","补充：单调队列","解释:","设","设计一个支持","输入:","输出:","返回","遇到距离最小值需要更新的则更新后重新入队更新后续结点","队列","队列一般常用于","顾名思义，单调栈即是栈中元素有单调性的栈，典型应用为用线性的时间复杂度找左右两侧第一个大于/小于当前元素的位置。"],"data_structure/binary_op.html":["#","%","&","&=","(","(byte","(i","(num","(seen_onc","(seen_twic","(x","*","+","+=","0","0,","0:","0=a^a","0x010884422010)","0x0202020202","0xff)","1","1)","1))^n","1):","1)]","1023","1]","1。下面给出三种","24","32","8","=",">",">=",">>",">>=","@functools.lru_cache(maxsize=256)","[","[0]","[m,","[x,","]","^","^=","a=0^a=a^0","a=a^b","a=n&(n","b=a^b","between","bit","bitmask","bitmask)","bitmask^x]","bitwis","break","byte):","cach","class","contain","count","decor","def","diff","diff:","diff=(n&(n","differ","dp","functool","hammingweight(self,","ii","iii","import","int)","int,","int:","leetcod","left_most","left_most]","list[int])","list[int]:","m","m:","memoiz","n","n):","n:","n]，其中","num","num)","num:","num_on","num_ones[i","num_ones[i]","number","nums:","nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。","num。对于","n，则结果第一位一定是","o(n)，想法其实也很简单，即当前数的","o(nk)","onc","out","pattern","power","rang","range(1,","rangebitwiseand(self,","ret","ret,","return","revers","reversebits(self,","reversebyte(self,","rightmost","seen","seen_onc","seen_twic","self.reversebyte(n","shift","singl","singlenumber(self,","solution:","two","x","y","y)","~seen_onc","~seen_twic","‘1’","≤","不等于","个数等于比它少一个","为位数。但是实际上可以利用动态规划将复杂度降到","二进制","交换两个数","位无符号整数的二进制位。","到","右移后我们也可以判断第三位、第四位等等，免去了遍历的时间复杂度。","和","基本操作","常见二进制操作","常见题目","并在重复出现时直接调用结果可以节约时间复杂度，具体可以参考","思路：利用上一题的解法容易想到","思路：直接从","思路：简单想法依次颠倒即可。更高级的想法是考虑到处理超长比特串时可能出现重复的pattern，此时如果使用","找出只出现一次的那两个元素。","注意位运算的优先级","由上面两个推导出：a=a^b^b","的个数（也被称为汉明重量）。","的数的结果加","的数目并将它们作为数组返回。","的解法，k","移除最后一个","练习","给出的解法。","给定一个整数数组","给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。","给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。","给定一个非负整数","给定范围","编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为","范围中的每个数字","获取最后一个","解法","记录出现过的","遍历一遍显然不是最优。一个性质，如果","颠倒给定的","（中间必定包含一个偶数）。利用这个性质，类似的将","，计算其二进制数中的"],"basic_algorithm/binary_search.html":["#","+",",","0","0,","0:","1","1,","1]","1、初始化：start=0、end=len","1。","1。假设数组中不存在重复的元素。","1，代码更简洁。同时，如果搜索失败，left","1，若不存在，左边界为第一个大于目标值的索引（插入位置），右边界为最后一个小于目标值的索引","2","2,","2]。搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回","2]。编写一个函数来判断给定的目标值是否存在于数组中，若存在返回","2]。请找出其中最小的元素。假设数组中无重复元素。","2]。请找出其中最小的元素。数组中可能包含重复元素。","2d","2、循环退出条件：start","3","3、比较中点和目标值：a[mid]","4,","4、判断最后两个元素是否符合：a[start]、a[end]","5,","6,","6]","7,","7]","=","==","==、",">","?","[","[0,","[2,","[4,","]","array","bad","banana","binari","bool:","class","def","eat","element","elif","else:","fals","false。数组中可能包含重复元素。","find","findmin(self,","first","h:","ii","insert","int)","int:","koko","l","l,","last","leetcod","len(matrix)","len(matrix[0])","len(nums)","list[int])","list[int],","list[list[int]],","m","matrix","matrix:","max(piles)","mid","mineatingspeed(self,","minimum","n","num","nums,","nums:","nums[l]","nums[mid]","nums[r]","nums[r]:","nums[r]，无法判断移动方向","o(logn)。","piles:","posit","r","rang","range[1]","return","rotat","search","search(self,","searchinsert(self,","searchmatrix(self,","searchrange(self,","solution:","sort","target","target):","target:","target，如果目标值存在返回下标，否则返回","true，否则返回","version","x","上的文章：二分搜索模板。","两次二分，首先定位行数，接着定位列数","个元素有序的（升序）整型数组","个整数的排序数组，找出给定目标值","中的","二分搜索","二分搜索核心四点要素（必背&理解）","使用二分搜索，当中间元素大于右侧元素时意味着拐点即最小元素在右侧，否则在左侧","使用模板","假设按照升序排序的数组在预先未知的某个点上进行了旋转，例如，数组","其中，模板","可能变为","和","和一个目标值","如果是最简单的二分搜索，不需要找第一个、最后一个位置，或者是没有重复元素，可以使用模板","常用的二分搜索模板有如下三种形式：","常见题目","思路：核心点就是找第一个","总结","数组有重复时，若","是最后一个小于","是最常用的，几乎所有二分查找问题都可以用其中之一轻松实现。模板","是第一个大于","更高级一些，用于解决某些类型的问题。详细的对比可以参考","有时用到二分搜索的题目并不会直接给你一个有序数组，它隐含在题目中，需要你去发现或者构造。一类常见的隐含的二分搜索的问题是求某个有界数据的最值，以最小值为例，当数据比最小值大时都符合条件，比最小值小时都不符合条件，那么符合/不符合条件就构成了一种有序关系，再加上数据有界，我们就可以使用二分搜索来找数据的最小值。注意，数据的界一般也不会在题目中明确提示你，需要你自己去发现。","模板","每行中的整数从左到右按升序排列。","每行的第一个整数大于前一行的最后一个整数。","的实现","的索引。","的索引，right","的索引，和最后一个","的索引，所以用两次二分搜索分别找第一次和最后一次的位置，下面是使用模板","的解法","的起始和结束位置。如果目标值不在数组中，则返回[","矩阵中，是否存在一个目标值。该矩阵具有如下特性：","练习题","给一个有序数组和目标值，找第一次/最后一次/任何一次出现的索引，时间复杂度","给定一个","给定一个包含","给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。","编写一个高效的算法来判断","隐含的二分搜索","，写一个函数搜索"],"basic_algorithm/sort.html":["#","'__main__':","(swap","+=","//","0","0,","1","1):","1,","10]","1:","2","2,","2:","3,","3:","4,","5,","6,","8,","9,","=","==",">",">=","[","[7,","[]","]","__name__","a[0]","a[0],","a[i]","a[i],","a[l]):","a[r]","a[start]","a[start],","a[start]:","a[swap]","a[swap],","array","b):","base","binari","build","c","class","complet","construct","def","effici","element","elif","end","end=i)","end=none):","findkthlargest(self,","function","heap","heap_adjust(a,","heapq.heappushpop(min_heap,","heapq.nlargest(k,","heapsort(a):","i)","i,","import","index","int)","int:","j","k","k)","k:","kth","l","largest","left","left,","len(a)","len(min_heap)","len(nums)","list[int],","log","max","merge(a,","min_heap","min_heap[0]","min_heap[0]:","more","n","n)","none","none:","note","num","num)","nums)","nums:","nums[i]","nums[i],","nums[k]","nums[partition_idx]","nums[partition_idx],","nums[pivot_idx]","nums[pivot_idx],","nums[right]","nums[right],","o(n","o(n)。","partit","partition(left,","partition(nums,","partition_idx","pivot","pivot:","pivot_idx","practic","print(a)","print(heapsort(a))","python","quick","r","random","random.randint(left,","range(left,","range(n","return","right","right)","right):","right:","select","select，方式类似于快排，每次","solution:","sort","start","start=0,","swap","test","tree","true:","vs","一侧，因此平均复杂度为","个元素，如果是则直接返回，如果比","个，最简单直接，复杂度","二叉堆","代码略","使用最小堆，复杂度","其他二叉树","动画展示","十大经典排序","参考","后取第","后检查","堆排序","大于","大，则继续","完美二叉树","小于","小则继续","常考排序","归并排序","快速排序","思路","手写快排、归并、堆排序","排序","排序算法","是否为第","核心代码","每次只需","用数组表示的完美二叉树","的元素。相较于快排，quick","的元素，如果比","练习","题目"],"basic_algorithm/dp.html":["!=","\"abcde\"","\"aec\"","#","&","''","'':","'.join(route))","(10%)","(40%)","(amount","(len(s)","(m","(n","(s[i]","(x,","*","+","+=","...","/","0","0)","0)、f(i,","0,","0,i)","0:","1","1)","1):","1);","1)]","1,","11（即，2","11）。","1]","1])","1],","1].copy()","1][n]","1d","1、矩阵类型（10%）","1。","2):","2,","26","2d","2、序列类型（40%）","3","5","9","=","==",">",">=","[","[0]","[1]","[2],","[3,4],","[4,1,8,3]","[6,5,7],","[[0]","[]","[false]","[nums[0]]","[row[0]","[true]","]","_","a(0,","a(x,","a):","a,","a[i]","amount:","amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回","answer","answer:","backpack","backpack(self,","backpackii(self,","backtrack","backtrack()","backtrack(first=0,","backtrack(next_first)","backtrack(next_first,","balloon","best","binari","bisect.bisect_left(seq,","bool:","break","burst","buy","buy,","buy_then_nothing)","buy_then_nothing),","buy_then_nothing,","canjump(self,","case即可","chang","class","climb","climbstairs(self,","coin","coin]","coinchange(self,","coins:","collections.defaultdict(list)","common","consecut","cooldown","cur_max","decod","def","df","dfs（遍历","dfs，就可以解决","dfs，缓存已经被计算的值（称为：记忆化搜索","dist","distanc","dp","dp(i)","dp.append(new)","dp[","dp[0]","dp[0]]","dp[i","dp[i+1]))","dp[i]","dp[j","dp[j]","dp[j])","dp[j][right])","dp[left][j]","dp[left][right]","dp[len(s)","dp_max","dp_max[i]","dp_max[j]","dp_min","dp_min[","dp_min[i","dp_min[j","dp_min[j]","dp_neg","dp_neg)","dp_new","dp_new.append(row[","dp_new.append(row[i+1]","dp_pal","dp_pal[i+1])","dp_pal[i]","dp_po","dp_pos)","dp_pos),","dp_pos,","dp（40%）","edit","elif","else:","f(0,","f(n","f(x,","f[m][n]","f[n]","fals","first","float('","float('inf')","funciton(x","function","function(x)","function:","furthest","g:","g[0][0]","g[0][i]","g[i][0]","g[i][j]","game","greedi","grid:","grid[0][0]","grid[0][i]","grid[i][0]","grid[i][j]","hard","head","i)","i,0)、","ii","in","increas","index","index=i","inf')","inf'),","int)","int,","int:","intial","intialize:","ispal(0,","ispal(i,","j","j)","j):","jump","jump(self,","last","lcs(a,b)","left","left_right","len(a)","len(dp)):","len(g),","len(g[0])","len(grid),","len(grid[0])","len(mem[first])","len(nums)","len(nums)):","len(s)","len(s)):","len(seq)","len(seq):","len(t1)","len(triangle)","len(w1)","len(w1),","len(w2)","length+1","length+1，返回结果","lengthoflis(self,","list[int])","list[int],","list[list[int]])","list[str])","list[str]:","longest","longestcommonsubsequence(self,","m","m):","m,","m:","matrix","max(buy,","max(dp_max)","max(dp_max[j],","max(max_coin,","max(max_product,","max(num,","max(sell,","max_coin","max_po","max_product","maxcoins(self,","maximum","maxproduct(self,","maxprofit(self,","mem","mem:","mem[first].append(next_first)","mem[first]:","memoization。","min(dp)","min(dp[i],","min(dp[j","min(dp[j],","min(f(x","min(min_cut,","min(num,","min_cut","mincut(self,","mindistance(self,","minimum","minimumtotal(self,","minpathsum(self,","m，每个物品的大小为","n","n):","n:","new","next_first","num","num)","num,","numdecodings(self,","nums.append(1)","nums.pop()","nums:","nums[0]","nums[i]","nums[i])","nums[i]:","nums[j]","nums[left]","nums[right]","p","p,","palindrom","partit","path","prices:","product","range(","range(1,","range(2,","range(first","range(j):","range(j+1):","range(left","range(len(dp)","range(len(nums)","range(len(nums)):","range(len(s)):","range(len(triangle[i])):","range(n","range(n):","reach","result","result.append('","return","right","right):","route):","route.append(s[first:next_first])","route.pop()","route=[]):","row","s","s:","s[first:next_first]","s[i:j+1]","s[j]","search)","search，比较tricki","sell","sell,","sell_then_noth","sell_then_nothing)","seq","seq.append(nums[i])","seq[ins]","sequenc","set(worddict)","solution:","sort","stair","state","state:","step","step_max","stock","str)","str,","subarray","subsequ","sum","sum(0,0","swap","s，将","t1","t1:","t2","t2:","tail","text1","text2，返回这两个字符串的最长公共子序列。","time","triangl","triangle:","triangle[","triangle[0]","triangle[1:]:","triangle[i][j]","true","two","uniqu","uniquepaths(self,","uniquepathswithobstacles(self,","use_ai","v","v):","valid_2(i):","w1","w1:","w2","w2:","way","word","word1","word2","word2，请你计算出将","wordbreak(self,","worddict","worddict:","worddict，判定","x","y","y)","y),","z，给定输入数字串，问总共有多少种译码方法","{","}","一个字符串的","一个机器人位于一个","一点trick,","不同，此题需要返回所有可行分割而不是找到一组就可以。这里使用","不太一样，i","不是","个","个人推荐","个气球排成一行，每个气球上有一个分数，每次戳爆一个气球得分为该气球分数和相邻两气球分数的乘积，求最大得分","个物品中挑选若干物品装入背包，最多能装多满？假设背包的大小为","个物品和一个大小为","个物品，装入","为前","二叉树","二维dp若只与当前行和上一行有关，可将空间复杂度降到线性","仅目标dp,","从起点走到","优化","位置占位，这样处理问题时一视同仁，初始化则在原来基础上","位置可以交换，所以不用动态规划","你的目标是使用最少的跳跃次数到达数组的最后一个位置。","使用","使用场景","例如，\"ace\"","例如，给定三角形：","假设你正在爬楼梯。需要","像","先从一道题目开始~","分别对应","分割成一些子串，使每个子串都是回文串。","分治法","分治法）","初始化","删除一个字符","判断你是否能够到达最后一个位置。","判断回文时间复杂度高","到","动态规划","动态规划和","动态规划就是把大问题变成小问题，并解决了小问题重复计算的方法称为动态规划","动态规划，自底向上","动态规划，自顶向下","动态规划：是一种解决问题的思想，大规模问题的结果，是由小规模问题的结果运算得来的。动态规划可用递归来实现(memor","区别","取值","另外一种做法：maxlen(a,b)","和","和一个包含非空单词列表的字典","和一个总金额","四点要素","回文dp空间复杂度降为线性","回文dp空间复杂度高","回文二维dp,","在","处理负数情况稍微有点复杂，注意需要同时","如题","如题：longest","子序列","子问题是没有交集，所以大部分二叉树都用递归或者分治法，即","小结","常见四种类型","常见处理方式是给","常规","思路：dp(i,","思路：动态规划","思路：和上题很类似，相等则不需要操作，否则取删除、插入、替换最小操作次数的值+1","思路：和其他","思路：此题","或者","所使用的最少操作数你可以对一个单词进行如下三种操作：","插入一个字符","数组中的每个元素代表你在该位置可以跳跃的最大长度。","方程","是","是否可以被空格拆分为一个或多个在字典中出现的单词。","是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。","替换一个字符","最优算法使用","最大乘积子串","最大的那个状态是什么，终点","最极限的小状态是什么,","有","本质上：动态规划）","机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“finish”）。","正数乘积和负数乘积","此题主要难点是构造","求可行个数（count(*)","求是否可行（yes/no","求最大/最小值（maximum/minimum","注意点","满足不能排序或者交换（can","满足两个条件","满足以下条件之一","灵感，创造力，存储小规模问题的结果","状态","状态之间的联系，怎么通过小的状态，来算大的状态","状态可以为前","现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？","的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。","的子序列，但","的最短路径","的状态，过程为逆着气球戳爆的顺序","的背包.","目标dp","等于以第i个数结尾的最长上升子序列的长度，容易想但不是最优","答案","练习","经典的维特比译码类问题，找到状态空间和状态转移关系即可","给你两个单词","给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。","给定一个包含非负整数的","给定一个字符串","给定一个无序的整数数组，找到其中最长上升子序列的长度。","给定一个非空字符串","给定一个非负整数数组，你最初位于数组的第一个位置。","给定不同面额的硬币","给定两个字符串","给定字符串和可选的单词列表，求字符串所有的分割方式","给定数组","给定股票每天的价格，每天可以买入卖出，买入后必须卖出才可以进行下一次购买，卖出后一天不可以购买，问可以获得的最大利润","网格的左上角","网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。","背包的最大价值","背景","自顶向下的最小路径和为","补充","表示每个物品的价值.","表示每个物品的大小和数组","表示钱或者容量","解法容易想但并不是好做法，因为和","解法：直接dp无法得到o(n)的解，考虑间接dp","说明","贪心算法大多题目靠背答案，所以如果能用动态规划就尽量用动规，不用贪心算法","起点","转换成","返回值：f[n]或者","返回符合要求的最少分割次数。","这种是有重复走的情况，子问题是有交集，所以可以用动态规划来解决","递归和动规关系","递归是一种程序的实现方式：函数的自我调用","遍历","问总共有多少条不同的路径？","问最多能装入背包的总价值是多大?","阶你才能到达楼顶。","零钱和背包（10%）","题，注意处理edg","（起始点在下图中标记为“start”","）","）。"],"advanced_algorithm/recursion.html":["\"\"\"","(n","(recurs","*","+","...","0","0,","1","1)","1):","1,","1.","1:","1]","2)","2),","=","==",">",">=","[","[]","[none]","]","anything,","binari","char[]","class","copy，多个树之间会共享子树。","deep","def","down","dp)","f(0)","f(1)","f(n","f(n)","f(n)。","fib(self,","fib_rec(n","fib_rec(n)","fib_rec(n):","fibonacci","generatetrees(self,","generatetrees_rec(1,","generatetrees_rec(i,","generatetrees_rec(m","head","head.next","head:","head_next_pair","i,","ii","instead.","int)","int:","j","j)","j):","j:","l","l,","left","left:","len(s)","list[str])","list[treenode]:","listnode)","listnode:","m","mem","mem[0],","mem[1]","mem[n]","memorization,","modifi","n","n)","n:","node","none","none:","number","n，生成所有由","n，计算","p","p.next","pair","place","r","r))","range(i,","result","result.append(treenode(m,","return","rev_rec(s,","revers","reversestring(self,","right","right:","s","s:","s[i]","s[i],","s[j]","s[j],","search","self.swappairs(head.next.next)","solution:","string","swap","swappairs(self,","top","tree","uniqu","为节点所组成的二叉搜索树。","介绍","你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。","其中","和","备忘录","将大问题转化为小问题，通过递归依次解决各个小问题","开始，后面的每一项数字都是前面两项数字的和。也就是：","斐波那契数，通常用","注意：此题用来训练递归思维有理论意义，但是实际上算法返回的树并不是","的形式给出。","示例","练习","给定","给定一个整数","给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。","编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组","表示，形成的序列称为斐波那契数列。该数列由","递归","递归思维"],"advanced_algorithm/slide_window.html":["\"abc\"，所以其长度为","\"abcabcbb\"","#","''","(char","(right","*/","+","+=","/*","0","0,","0;","1","1:","1:r]","1、右指针右移之后窗口数据更新","2、判断窗口是否要收缩","3","3、左指针右移之后窗口数据更新","3。","4、根据题意计算结果",":","=","==",">",">=","[","[]","]","anagram","bool:","c","charact","checkinclusion(self,","class","collections.defaultdict(int)","count","count,","def","else:","enumerate(s):","fals","find","findanagrams(self,","int","int:","judg","l","l)","l,","l:","last","last_idx","last_idx[c]","left","len(s)","len(target)","lengthoflongestsubstring(self,","list[int]:","longest","loop","max(max_length,","max_length","min_siz","min_str","minimum","minwindow(self,","need,","need[c]++;","note","num_char","p","p:","permut","p，找到","r","r,","repeat","result","return","right","s","s,","s1","s1:","s2","s2:","s2，写一个函数来判断","s:","s[l","slidingwindow(str","solution:","str)","str,","str:","string","substr","s、一个字符串","t","t)","t:","target","target[c]","target[c]:","target[s2[l]]","target[s[l]]","t，请在字符串","unordered_map","valid","void","window","window;","window[s2[l]]","window[s[l]]","without","{","{}","中所有是","右移","和","和一个非空字符串","和双指针题目类似，更像双指针的升级版，滑动窗口核心点是维护一个窗口集，根据窗口集来进行处理","因为无重复字符的最长子串是","总结","所有字母的最小子串","收缩","是否包含","最长子串","核心步骤","模板","求结果","滑动窗口","滑动窗口思想","滑动窗口算法框架","的字母异位词的子串，返回这些子串的起始索引。","的排列。","的长度。","示例","练习","给你一个字符串","给定一个字符串","给定一个字符串，请你找出其中不含有重复字符的","给定两个字符串","解释:","输入:","输出:","里面找出：包含","需要变化的地方"],"advanced_algorithm/binary_search_tree.html":["!=","#","(a[0],","+","0","0:","1","1,","1:","1])","1][0]","1][1]","1][2]","1]]","=","==",">","[","[(root,","[[treenode(),","]","a[0]),","abs(dl","balanc","bf","binari","bool:","bst","bst_bfs(a):","class","collect","collections.deque([(float('","d","def","delet","deletenode(self,","dl,","dr","dr)","dummi","dummy,","else:","fals","find","float('","float('inf'))]","float('inf'))])","import","inf'),","insert","insertintobst(self,","int)","interv","interval.popleft()","interval:","isbalanced(self,","isleft","isvalidbst(self,","iter","key","key:","key，删除二叉搜索树中的","last","last,","leetcod","len(a)","len(s)","low,","lower","lower,","max(dl,","n","n):","node","node,","node.left","node.left.v","node.right","node.right.v","node.v","node.val))","node.val,","node.val:","none","none:","order","parent","parent,","peek","peek.right","peek.right:","post","range(1,","return","root","root,","root.left","root.right","root.val:","root:","s","s.append((node.left,","s.append((node.right,","s.append([node,","s.pop()","s[","search","self.insertintobst(root.left,","self.insertintobst(root.right,","solution:","tree","treenode(left=root)","treenode(val)","treenode)","treenode,","treenode:","tri","true","up","up))","up:","upper","val","val)","val:","valid","上找到原题。由于做法比较有趣也很有","二叉搜索树","保证原始二叉搜索树中不存在新值。","和一个值","定义","对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。","应用","此题是面试真题，但是没有在","每个节点中的值必须大于（或等于）存储在其左侧子树中的任何值。","每个节点中的值必须小于（或等于）存储在其右子树中的任何值。","的","的特点，补充在这供参考。","练习","给定一个二叉搜索树的根节点","给定一个二叉树，判断它是否是高度平衡的二叉树。","给定一个整数数组，求问此数组是不是一个","给定二叉搜索树（bst）的根节点和要插入树中的值，将值插入二叉搜索树。","返回插入后二叉搜索树的根节点。","顺序。","验证二叉搜索树"],"advanced_algorithm/backtrack.html":["!=","'2':","'3':","'4':","'5':","'6':","'7':","'8':","'9':","'b',","'c'],","'e',","'f'],","'h',","'i'],","'k',","'l'],","'n',","'o'],","'q',","'r',","'s'],","'u',","'v'],","'x',","'y',","'z']","*","+","+=","0:","1)","1):","1,","12:","1：需要记录已经选择过的元素，满足条件的结果才进行返回，需要额外","2:","2，因为交换操作会打乱排序。","=","==",">","[","['a',","['d',","['g',","['j',","['m',","['p',","['t',","['w',","[]","[false]","]","address","backtrack()","backtrack(0,","backtrack(first=0,","backtrack(i","backtrack(i,","backtrack(idx","backtrack(idx=0):","backtrack(idx=0,","backtrack(route=[]):","backtrack(start,","backtrack(选择列表,路径)","backtrack(选择列表,路径):","c","candidates:","candidates[i]","class","collections.defaultdict(set)","combin","combinationsum(self,","def","df","digits:","fals","func","idx","ii","in_rout","in_route[i]","in_route[i]:","int)","ip","ispal(i,","j):","k","k)","k,","k:","last","last:","len(candidates)","len(digits)","len(nums)","len(route)","len(s)","letter","lettercombinations(self,","list[int])","list[int],","list[list[int]]:","list[list[str]]:","list[str]:","n","n):","n:","none","num","num2char","num2char[digits[idx]]:","number","nums:","nums[i]","nums[i],","nums[idx]","nums[idx],","nums，返回该数组所有可能的子集（幂集）。","nums，返回该数组所有可能的子集（幂集）。说明：解集不能包含重复的子集。","o(n!)，它不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，复杂度一般都很高。","o(n)","pal","palindrom","partit","partition(self,","permut","permute(self,","permuteunique(self,","phone","range(first,","range(idx,","range(n","range(n):","range(start,","restor","restoreipaddresses(self,","result","result.add(路径)","result.append(''.join(route))","result.append(nums.copy())","result.append(route.copy())","return","route)","route,","route.append(c)","route.append(candidates[i])","route.append(nums[i])","route.pop()","route=[]):","route=[],","route_sum","route_sum)","route_sum=0):","s:","solution:","sorted(nums)","str)","subset","subsets(self,","subsetswithdup(self,","sum","target:","true","valid_s(i,","{","}","做选择","回溯法","回溯法（backtrack）常用于遍历列表所有子集，是","思路","撤销选择","核心就是从选择列表里做一个选择，然后一直递归往下搜索答案，如果遇到路径不通，就返回来撤销这次选择。","模板","注意此题（貌似）无法使用上题的思路","深度搜索一种，一般用于全排列，穷尽所有可能，遍历的过程实际上是一个决策树的遍历过程。时间复杂度一般","满足结束条件:","的空间","示例","练习","给定一个可包含重复数字的序列，返回所有不重复的全排列。","给定一个可能包含重复元素的整数数组","给定一个没有重复数字的序列，返回其所有可能的全排列。","给定一组不含重复元素的整数数组","背景","选择","选择列表:","遍历过程","针对此题的更高级的回溯，利用原有的数组，每次回溯将新选择的元素与当前位置元素交换，回溯完成再换回来"]},"length":14},"tokenStore":{"root":{"0":{"1":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}},"docs":{"./":{"ref":"./","tf":0.011049723756906077},"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0069767441860465115},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.01619778346121057},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.023195876288659795},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.01627906976744186},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}},",":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.029876977152899824},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.013377926421404682},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.012448132780082987},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.022151898734177215}},"i":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},";":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}},"，":{"docs":{},"表":{"docs":{},"示":{"docs":{},"在":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}},"、":{"docs":{},"f":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.005813953488372093},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.015345268542199489},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.005272407732864675},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0069767441860465115},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}},"=":{"docs":{},"a":{"docs":{},"^":{"docs":{},"a":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"x":{"0":{"1":{"0":{"8":{"8":{"4":{"4":{"2":{"2":{"0":{"1":{"0":{"docs":{},")":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"2":{"0":{"2":{"0":{"2":{"0":{"2":{"0":{"2":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"f":{"docs":{},"f":{"docs":{},")":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}},"1":{"0":{"0":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"2":{"3":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}},"docs":{}},"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"1":{"1":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"docs":{},"（":{"docs":{},"即":{"docs":{},"，":{"2":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"docs":{}}}},"）":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"2":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}},"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.02040816326530612},"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.011082693947144074},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.03865979381443299},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0492091388400703},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.010033444816053512},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.005426356589147287},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.016597510373443983},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.05063291139240506},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}},"、":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"：":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"=":{"0":{"docs":{},"、":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"=":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}},"docs":{}}}}}}}}}}},"矩":{"docs":{},"阵":{"docs":{},"类":{"docs":{},"型":{"docs":{},"（":{"1":{"0":{"docs":{},"%":{"docs":{},"）":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{}},"docs":{}}}}}},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"右":{"docs":{},"移":{"docs":{},"之":{"docs":{},"后":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"数":{"docs":{},"据":{"docs":{},"更":{"docs":{},"新":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}},"]":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.02040816326530612},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0076726342710997444},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.005272407732864675},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.009302325581395349},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}},"1":{"docs":{},"]":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.010238907849829351}},")":{"docs":{},")":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}},"2":{"docs":{},"]":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}}},"docs":{},"j":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"n":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"]":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},",":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.00937766410912191},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0210896309314587},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.013377926421404682},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.005426356589147287},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.006329113924050633}}},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"下":{"docs":{},"面":{"docs":{},"给":{"docs":{},"出":{"docs":{},"三":{"docs":{},"种":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}},"假":{"docs":{},"设":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}},"：":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"后":{"docs":{},"检":{"docs":{},"查":{"docs":{},"输":{"docs":{},"出":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"序":{"docs":{},"，":{"docs":{},"缺":{"docs":{},"点":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"无":{"docs":{},"法":{"docs":{},"提":{"docs":{},"前":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}},"，":{"docs":{},"左":{"docs":{},"边":{"docs":{},"平":{"docs":{},"衡":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}},"蛮":{"docs":{},"力":{"docs":{},"法":{"docs":{},"，":{"docs":{},"比":{"docs":{},"较":{"docs":{},"每":{"docs":{},"个":{"docs":{},"以":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}},"需":{"docs":{},"要":{"docs":{},"记":{"docs":{},"录":{"docs":{},"已":{"docs":{},"经":{"docs":{},"选":{"docs":{},"择":{"docs":{},"过":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"满":{"docs":{},"足":{"docs":{},"条":{"docs":{},"件":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"才":{"docs":{},"进":{"docs":{},"行":{"docs":{},"返":{"docs":{},"回":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"额":{"docs":{},"外":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.005967604433077579},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}},"r":{"docs":{},"]":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}},"代":{"docs":{},"码":{"docs":{},"更":{"docs":{},"简":{"docs":{},"洁":{"docs":{},"。":{"docs":{},"同":{"docs":{},"时":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"失":{"docs":{},"败":{"docs":{},"，":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}},"若":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"，":{"docs":{},"左":{"docs":{},"边":{"docs":{},"界":{"docs":{},"为":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"大":{"docs":{},"于":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"的":{"docs":{},"索":{"docs":{},"引":{"docs":{},"（":{"docs":{},"插":{"docs":{},"入":{"docs":{},"位":{"docs":{},"置":{"docs":{},"）":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"界":{"docs":{},"为":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"的":{"docs":{},"索":{"docs":{},"引":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.01288659793814433},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.02074688796680498},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0034100596760443308}},"^":{"docs":{},"n":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.005426356589147287},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"}":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},";":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"d":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},".":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}},"2":{"0":{"0":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"docs":{}},"4":{"0":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}},"6":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.005272407732864675},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},"、":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}},"循":{"docs":{},"环":{"docs":{},"退":{"docs":{},"出":{"docs":{},"条":{"docs":{},"件":{"docs":{},"：":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}},"序":{"docs":{},"列":{"docs":{},"类":{"docs":{},"型":{"docs":{},"（":{"4":{"0":{"docs":{},"%":{"docs":{},"）":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{}},"docs":{}}}}}},"判":{"docs":{},"断":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"是":{"docs":{},"否":{"docs":{},"要":{"docs":{},"收":{"docs":{},"缩":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}},"：":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}},"使":{"docs":{},"用":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"实":{"docs":{},"现":{"docs":{},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{},"的":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"版":{"docs":{},"本":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"为":{"docs":{},"合":{"docs":{},"法":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"当":{"docs":{},"且":{"docs":{},"仅":{"docs":{},"当":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"为":{"docs":{},"合":{"docs":{},"法":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"且":{"docs":{},"根":{"docs":{},"结":{"docs":{},"点":{"docs":{},"值":{"docs":{},"大":{"docs":{},"于":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"小":{"docs":{},"于":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{},"缺":{"docs":{},"点":{"docs":{},"是":{"docs":{},"若":{"docs":{},"不":{"docs":{},"用":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"形":{"docs":{},"式":{"docs":{},"实":{"docs":{},"现":{"docs":{},"则":{"docs":{},"无":{"docs":{},"法":{"docs":{},"提":{"docs":{},"前":{"docs":{},"返":{"docs":{},"回":{"docs":{},"，":{"docs":{},"而":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"实":{"docs":{},"现":{"docs":{},"右":{"docs":{},"比":{"docs":{},"较":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"。":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"层":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.008787346221441126},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}},"]":{"docs":{},"。":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"一":{"docs":{},"个":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"存":{"docs":{},"在":{"docs":{},"这":{"docs":{},"个":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{},"它":{"docs":{},"的":{"docs":{},"索":{"docs":{},"引":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"编":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"来":{"docs":{},"判":{"docs":{},"断":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"，":{"docs":{},"若":{"docs":{},"存":{"docs":{},"在":{"docs":{},"返":{"docs":{},"回":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"请":{"docs":{},"找":{"docs":{},"出":{"docs":{},"其":{"docs":{},"中":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"假":{"docs":{},"设":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"无":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"可":{"docs":{},"能":{"docs":{},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},")":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"交":{"docs":{},"换":{"docs":{},"操":{"docs":{},"作":{"docs":{},"会":{"docs":{},"打":{"docs":{},"乱":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}},"3":{"0":{"0":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"docs":{}},"2":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}},"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.005272407732864675},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}},"、":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}},"比":{"docs":{},"较":{"docs":{},"中":{"docs":{},"点":{"docs":{},"和":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"：":{"docs":{},"a":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}},"左":{"docs":{},"指":{"docs":{},"针":{"docs":{},"右":{"docs":{},"移":{"docs":{},"之":{"docs":{},"后":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"数":{"docs":{},"据":{"docs":{},"更":{"docs":{},"新":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}},"：":{"docs":{},"利":{"docs":{},"用":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{},"，":{"docs":{},"根":{"docs":{},"结":{"docs":{},"点":{"docs":{},"为":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"右":{"docs":{},"边":{"docs":{},"界":{"docs":{},"，":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"左":{"docs":{},"边":{"docs":{},"界":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"先":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"自":{"docs":{},"顶":{"docs":{},"向":{"docs":{},"下":{"docs":{},"更":{"docs":{},"新":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"边":{"docs":{},"界":{"docs":{},"并":{"docs":{},"检":{"docs":{},"查":{"docs":{},"是":{"docs":{},"否":{"docs":{},"合":{"docs":{},"法":{"docs":{},"，":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"版":{"docs":{},"本":{"docs":{},"实":{"docs":{},"现":{"docs":{},"简":{"docs":{},"单":{"docs":{},"且":{"docs":{},"可":{"docs":{},"以":{"docs":{},"提":{"docs":{},"前":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"包":{"docs":{},"含":{"docs":{},"当":{"docs":{},"前":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},":":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},"。":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}},"4":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.005272407732864675},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},"、":{"docs":{},"判":{"docs":{},"断":{"docs":{},"最":{"docs":{},"后":{"docs":{},"两":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"是":{"docs":{},"否":{"docs":{},"符":{"docs":{},"合":{"docs":{},"：":{"docs":{},"a":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},"、":{"docs":{},"a":{"docs":{},"[":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"]":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"根":{"docs":{},"据":{"docs":{},"题":{"docs":{},"意":{"docs":{},"计":{"docs":{},"算":{"docs":{},"结":{"docs":{},"果":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}},"5":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.014059753954305799},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"6":{"docs":{},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.012302284710017574},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},"]":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}},"7":{"docs":{},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.005272407732864675}}},"]":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.005272407732864675}}}},"8":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"9":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"docs":{},"a":{"docs":{},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.055248618784530384}}}}}}}}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"0":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"docs":{},"n":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}},"=":{"0":{"docs":{},"^":{"docs":{},"a":{"docs":{},"=":{"docs":{},"a":{"docs":{},"^":{"0":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}},"docs":{}}}}}}},"docs":{},"a":{"docs":{},"[":{"docs":{},":":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{},"x":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}},"^":{"docs":{},"b":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732}}}}},"n":{"docs":{},"&":{"docs":{},"(":{"docs":{},"n":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},")":{"docs":{},",":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}},"docs":{},"n":{"docs":{},"]":{"docs":{},"=":{"docs":{},"x":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}},"i":{"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"l":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}},"r":{"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},":":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"d":{"docs":{},"l":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}},"o":{"docs":{},"r":{"1":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"2":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"docs":{}}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}}}}}}}}},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{},"i":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}},"k":{"docs":{},"+":{"1":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"docs":{}}},"x":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"c":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.015817223198594025},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"。":{"docs":{},"编":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"来":{"docs":{},"计":{"docs":{},"算":{"docs":{},"可":{"docs":{},"以":{"docs":{},"凑":{"docs":{},"成":{"docs":{},"总":{"docs":{},"金":{"docs":{},"额":{"docs":{},"所":{"docs":{},"需":{"docs":{},"的":{"docs":{},"最":{"docs":{},"少":{"docs":{},"的":{"docs":{},"硬":{"docs":{},"币":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"没":{"docs":{},"有":{"docs":{},"任":{"docs":{},"何":{"docs":{},"一":{"docs":{},"种":{"docs":{},"硬":{"docs":{},"币":{"docs":{},"组":{"docs":{},"合":{"docs":{},"能":{"docs":{},"组":{"docs":{},"成":{"docs":{},"总":{"docs":{},"金":{"docs":{},"额":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"t":{"docs":{},"、":{"docs":{},"t":{"docs":{},"m":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}},"c":{"docs":{},"k":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"(":{"0":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}},"docs":{},"&":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},":":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}},"选":{"docs":{},"择":{"docs":{},"列":{"docs":{},"表":{"docs":{},",":{"docs":{},"路":{"docs":{},"径":{"docs":{},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},":":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.014767932489451477}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}},"docs":{}}}}}}},"i":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}},"d":{"docs":{},"x":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},"=":{"0":{"docs":{},")":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}},"docs":{}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"=":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.004651162790697674}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"r":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"d":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}},"s":{"docs":{},"e":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"i":{"docs":{},"n":{"docs":{},"z":{"docs":{},"i":{"5":{"6":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"docs":{}},"docs":{}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.018604651162790697},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.020477815699658702}}}}}},"t":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.01804123711340206}},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.010309278350515464}},")":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}},"^":{"docs":{},"x":{"docs":{},"]":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"b":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}},":":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},":":{"docs":{},"=":{"docs":{},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"+":{"docs":{},"'":{"0":{"docs":{},"'":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}},"docs":{}}}}}}}}}}}}},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"转":{"docs":{},"数":{"docs":{},"字":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}},")":{"docs":{},":":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}},"f":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.005813953488372093},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.005967604433077579},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"n":{"docs":{},"_":{"docs":{},"i":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}}}}}}}}}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"l":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}}}}},"r":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.003875968992248062}}}}}},"，":{"docs":{},"a":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}},"=":{"docs":{},"a":{"docs":{},"^":{"docs":{},"b":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732}}}}}}},"s":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"y":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}},"_":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.017064846416382253}},"_":{"docs":{},"b":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{},":":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}},"c":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0189873417721519},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},"(":{"docs":{},"c":{"docs":{},"+":{"docs":{},"+":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"m":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}}},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}}}}}},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"p":{"docs":{},"(":{"docs":{},"c":{"docs":{},"#":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}},"u":{"docs":{},"m":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}},"o":{"docs":{},"p":{"docs":{},"i":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.013605442176870748},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}},"y":{"docs":{},"(":{"docs":{},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},":":{"docs":{},"]":{"docs":{},",":{"docs":{},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}},"docs":{}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}}}}}}}}}}}}},"，":{"docs":{},"多":{"docs":{},"个":{"docs":{},"树":{"docs":{},"之":{"docs":{},"间":{"docs":{},"会":{"docs":{},"共":{"docs":{},"享":{"docs":{},"子":{"docs":{},"树":{"docs":{},"。":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"(":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}},"p":{"docs":{},"(":{"docs":{},"o":{"docs":{},"r":{"1":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"docs":{}}}},"o":{"docs":{},"n":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}},",":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}},"i":{"docs":{},"n":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.004651162790697674}},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}},"s":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.01744186046511628},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.014042126379137413},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.015345268542199489},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.015463917525773196},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0210896309314587},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.017829457364341085},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.016597510373443983},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.013651877133105802},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.0189873417721519}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"r":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0050150451354062184},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0050150451354062184}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.006018054162487462}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}}}}}},"v":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"i":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"y":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.004012036108324975}}}}},"d":{"docs":{},"f":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"d":{"docs":{},"f":{"docs":{},"[":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}},"n":{"docs":{},"j":{"docs":{},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"即":{"docs":{},"可":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"d":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.010238907849829351}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"实":{"docs":{},"现":{"docs":{},")":{"docs":{},",":{"docs":{},"在":{"docs":{},"线":{"docs":{},"文":{"docs":{},"档":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"d":{"docs":{},"h":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}},"e":{"docs":{},"(":{"docs":{},"m":{"docs":{},",":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"\"":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"出":{"docs":{},"队":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}},"f":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.02441860465116279},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.017051153460381142},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0247229326513214},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.01804123711340206},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0210896309314587},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.023411371237458192},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.020155038759689922},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.029045643153526972},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.017064846416382253},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.0379746835443038}},"i":{"docs":{},"n":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0069767441860465115}},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}},"r":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}},"e":{"docs":{},"p":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}},"f":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.004262574595055414},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"i":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}},"n":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}},"[":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"_":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}},"（":{"docs":{},"遍":{"docs":{},"历":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"解":{"docs":{},"决":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"缓":{"docs":{},"存":{"docs":{},"已":{"docs":{},"经":{"docs":{},"被":{"docs":{},"计":{"docs":{},"算":{"docs":{},"的":{"docs":{},"值":{"docs":{},"（":{"docs":{},"称":{"docs":{},"为":{"docs":{},"：":{"docs":{},"记":{"docs":{},"忆":{"docs":{},"化":{"docs":{},"搜":{"docs":{},"索":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}},"r":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},"u":{"docs":{},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.00802407221664995},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}},"y":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.004012036108324975}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}},"(":{"docs":{},"i":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.005115089514066497}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}},"n":{"docs":{},"_":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"_":{"docs":{},"j":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}},"f":{"docs":{},"f":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732}},":":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}},"=":{"docs":{},"(":{"docs":{},"n":{"docs":{},"&":{"docs":{},"(":{"docs":{},"n":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}},"e":{"docs":{},"r":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}},"n":{"docs":{},"_":{"docs":{},"i":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}},"j":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}},"p":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.017054263565891473}},"，":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.003875968992248062}},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.003875968992248062}},"i":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}},"+":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"docs":{}},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}},"j":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.003875968992248062}},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"[":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"j":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"i":{"docs":{},"n":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"[":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"i":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"j":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"n":{"docs":{},"e":{"docs":{},"g":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.004651162790697674}},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"w":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"[":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"[":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{}},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}},"o":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}},"s":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}}}}}},"（":{"4":{"0":{"docs":{},"%":{"docs":{},"）":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{}},"docs":{}},")":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"y":{"docs":{},"u":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}},"t":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}},"s":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}},"n":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"入":{"docs":{},"队":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"d":{"docs":{},"f":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}},"s":{"docs":{},")":{"docs":{},":":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}},"d":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}},"=":{"docs":{},"i":{"docs":{},")":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"_":{"docs":{},"l":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},"r":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}},"s":{"docs":{},"e":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.013953488372093023},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.007021063189568706},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.005115089514066497},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.014059753954305799},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.013651877133105802}}}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},".":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},".":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}},"u":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.016574585635359115}},"：":{"docs":{},"算":{"docs":{},"法":{"docs":{},"模":{"docs":{},"板":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}},"o":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"introduction/golang.html":{"ref":"introduction/golang.html","tf":5.020408163265306}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"g":{"docs":{},"o":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"实":{"docs":{},"现":{"docs":{},")":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}},"o":{"docs":{},"g":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}},"e":{"docs":{},"t":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}},"docs":{},"i":{"docs":{},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}}}},"m":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}}},"i":{"docs":{},"d":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"[":{"0":{"docs":{},"]":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"[":{"0":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{},"j":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"[":{"0":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{},"i":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{},"j":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}}}}}},"h":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.016574585635359115},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.01567398119122257}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"_":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}}}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.034102306920762285},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.016597510373443983}},")":{"docs":{},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.006018054162487462}},"则":{"docs":{},"中":{"docs":{},"点":{"docs":{},"在":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.009027081243731194},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.012448132780082987}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}}}}}}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.014042126379137413},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}},"_":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}}}}}}}}}}}}},"p":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},"_":{"docs":{},"a":{"docs":{},"d":{"docs":{},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.010033444816053512}}}}}}}}}}}},"q":{"docs":{},".":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{},":":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"[":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}},"i":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"s":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"docs":{}}}}}}}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}},"[":{"docs":{},"h":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}},"i":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"j":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"k":{"docs":{},"]":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}}}}}}}},":":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}},"i":{"3":{"2":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.009404388714733543}},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"，":{"docs":{},"按":{"docs":{},"照":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"规":{"docs":{},"范":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}},"docs":{}},"docs":{},"n":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}},"t":{"3":{"2":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"docs":{}},"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10}}}}}}}},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0034100596760443308},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.007731958762886598},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.014059753954305799},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"{":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}},"排":{"docs":{},"序":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.011082693947144074},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.010309278350515464},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.015817223198594025},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.01317829457364341},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}},":":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}},"=":{"docs":{},"i":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0034100596760443308}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}},"_":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},"e":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.010548523206751054}},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}},"i":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.006018054162487462},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.007029876977152899},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0069767441860465115},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}},"i":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732}}}},"s":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.005813953488372093}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{},"i":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}}}}}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},",":{"0":{"docs":{},")":{"docs":{},"、":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}},"]":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}},"d":{"docs":{},"x":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}},"p":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}},"j":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.011935208866155157},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.009302325581395349},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"(":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},"s":{"docs":{},"+":{"docs":{},"t":{"docs":{},"s":{"docs":{},"实":{"docs":{},"现":{"docs":{},")":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.005115089514066497},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}},"d":{"docs":{},"g":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}},":":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}}}},"l":{"1":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.010030090270812437}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"2":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.00802407221664995}},")":{"docs":{},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.043936731107205626},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.015822784810126583}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.016574585635359115},"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},"e":{"docs":{},"，":{"docs":{},"中":{"docs":{},"间":{"docs":{},"大":{"docs":{},"概":{"docs":{},"花":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"半":{"docs":{},"月":{"docs":{},"(":{"6":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"docs":{}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"(":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},"=":{"docs":{},"=":{"0":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"docs":{}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}},"=":{"docs":{},"=":{"0":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"docs":{}}}}}}}},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.00813953488372093},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}},"q":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"b":{"docs":{},"f":{"docs":{},"s":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0034100596760443308}}}}}},"a":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}},"p":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{}}}}},")":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0034100596760443308},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}},"docs":{}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},")":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"[":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0210896309314587},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.003875968992248062},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.010548523206751054}},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}},"t":{"1":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},")":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.00949367088607595}}}}}}}}},"w":{"1":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"2":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}},"docs":{}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}}}}}}}}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"+":{"1":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"docs":{}},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.010033444816053512},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.006201550387596899},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.007731958762886598}},"]":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}}},":":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.011627906976744186},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.004262574595055414}},"_":{"docs":{},"s":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}},"[":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"e":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"y":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.025075225677031094}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.010309278350515464},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0034100596760443308},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.006201550387596899},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.010548523206751054}}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.012302284710017574},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.012658227848101266}}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}}},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"]":{"docs":{},":":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}}}}}}}}}}}}},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.011033099297893681},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.010030090270812437},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}},"n":{"docs":{},"k":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.010030090270812437}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"p":{"docs":{},"i":{"1":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"docs":{}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},",":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}},"g":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}}},"o":{"docs":{},"p":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}},"v":{"docs":{},"s":{"docs":{},"e":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}},"_":{"docs":{},"i":{"docs":{},"s":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}},"i":{"docs":{},"n":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"_":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"_":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0034100596760443308}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}},"_":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558}}}}}}},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.00949367088607595}}}}}}}}},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}},"→":{"docs":{},"l":{"docs":{},"_":{"docs":{},"_":{"docs":{},"n":{"docs":{},"→":{"docs":{},"l":{"docs":{},"→":{"docs":{},"l":{"docs":{},"_":{"docs":{},"_":{"docs":{},"n":{"docs":{},"→":{"docs":{},"l":{"docs":{},"→":{"docs":{},"l":{"docs":{},"_":{"docs":{},"_":{"docs":{},"n":{"docs":{},"→":{"docs":{},"…":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}},"：":{"docs":{},"l":{"docs":{},"→":{"docs":{},"l":{"docs":{},"→":{"docs":{},"…":{"docs":{},"→":{"docs":{},"l":{"docs":{},"_":{"docs":{},"_":{"docs":{},"n":{"docs":{},"→":{"docs":{},"l":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.014059753954305799},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}},"c":{"docs":{},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},")":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}},":":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}},"n":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.015045135406218655},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.017902813299232736},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.015463917525773196},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.005272407732864675},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.014728682170542635},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.012448132780082987},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.027426160337552744}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}},"s":{"docs":{},"(":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}},"a":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}},"n":{"docs":{},"e":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.00813953488372093},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.01905717151454363},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.010238907849829351},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},"（":{"docs":{},"没":{"docs":{},"有":{"docs":{},"找":{"docs":{},"到":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.04883720930232558},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.033099297893681046},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0076726342710997444},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.027303754266211604}}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"d":{"docs":{},"e":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.027906976744186046},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.006018054162487462},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.005967604433077579},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.03754266211604096}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.015116279069767442},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}},".":{"docs":{},"v":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.012790697674418604},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},".":{"docs":{},"v":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}},"v":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.005813953488372093},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}},"(":{"0":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"docs":{},"o":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}},"p":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}},"n":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}}}}}}}}}},"u":{"docs":{},"m":{"2":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},"[":{"docs":{},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{},"]":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}},"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.028350515463917526},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.003875968992248062},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},",":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"_":{"docs":{},":":{"docs":{},"=":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"v":{"docs":{},".":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"(":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}},":":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}},"=":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"docs":{}}}}}}}}},"s":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"该":{"docs":{},"数":{"docs":{},"组":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"子":{"docs":{},"集":{"docs":{},"（":{"docs":{},"幂":{"docs":{},"集":{"docs":{},"）":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},"说":{"docs":{},"明":{"docs":{},"：":{"docs":{},"解":{"docs":{},"集":{"docs":{},"不":{"docs":{},"能":{"docs":{},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"子":{"docs":{},"集":{"docs":{},"。":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"其":{"docs":{},"中":{"docs":{},"恰":{"docs":{},"好":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"，":{"docs":{},"其":{"docs":{},"余":{"docs":{},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"均":{"docs":{},"出":{"docs":{},"现":{"docs":{},"两":{"docs":{},"次":{"docs":{},"。":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.01804123711340206},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.014059753954305799},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.010033444816053512},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.006201550387596899},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.010548523206751054}}},"[":{"0":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{},":":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"q":{"docs":{},"[":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.007029876977152899}}}}}},"l":{"docs":{},"]":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.007029876977152899}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"r":{"docs":{},"]":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497}},":":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.007029876977152899}}},"，":{"docs":{},"无":{"docs":{},"法":{"docs":{},"判":{"docs":{},"断":{"docs":{},"移":{"docs":{},"动":{"docs":{},"方":{"docs":{},"向":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.010033444816053512},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.010033444816053512}}}}}}}}},"i":{"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.010033444816053512},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}}},"k":{"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}}}}}}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.013377926421404682}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}}}}}}}}}}}}},"j":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497}}},")":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.02577319587628866},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}},"_":{"docs":{},"o":{"docs":{},"n":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.020618556701030927}},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.007731958762886598}},"]":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.007731958762886598}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.00949367088607595}}}}}}},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"/":{"docs":{},"n":{"docs":{},"i":{"docs":{},"l":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.01567398119122257}},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"_":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}},":":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028}}},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028}}},"）":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}},",":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}},"w":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"s":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}},"x":{"docs":{},"t":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}},"i":{"docs":{},"l":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.004012036108324975}}}},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.007021063189568706}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.007731958762886598},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}}},"_":{"docs":{},"i":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"j":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},")":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}},"]":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"，":{"docs":{},"则":{"docs":{},"结":{"docs":{},"果":{"docs":{},"第":{"docs":{},"一":{"docs":{},"位":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}},"生":{"docs":{},"成":{"docs":{},"所":{"docs":{},"有":{"docs":{},"由":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}},"计":{"docs":{},"算":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}},"o":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.006018054162487462}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.016574585635359115}},"。":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"（":{"docs":{},"最":{"docs":{},"后":{"docs":{},"去":{"docs":{},"了":{"docs":{},"宇":{"docs":{},"宙":{"docs":{},"系":{"docs":{},"）":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}},"，":{"docs":{},"你":{"docs":{},"值":{"docs":{},"得":{"docs":{},"拥":{"docs":{},"有":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}},"k":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"p":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0034100596760443308}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.009404388714733543}}}}}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"r":{"1":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.004262574595055414}}},"2":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.004262574595055414}},")":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}},"(":{"1":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"docs":{},"n":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},"，":{"docs":{},"想":{"docs":{},"法":{"docs":{},"其":{"docs":{},"实":{"docs":{},"也":{"docs":{},"很":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"即":{"docs":{},"当":{"docs":{},"前":{"docs":{},"数":{"docs":{},"的":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}},"。":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"^":{"2":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},")":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"线":{"docs":{},"段":{"docs":{},"树":{"docs":{},"优":{"docs":{},"化":{"docs":{},"后":{"docs":{},"勉":{"docs":{},"强":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}},"docs":{}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{},"使":{"docs":{},"用":{"docs":{},"简":{"docs":{},"单":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"求":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"无":{"docs":{},"法":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},")":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}},"!":{"docs":{},")":{"docs":{},"，":{"docs":{},"它":{"docs":{},"不":{"docs":{},"像":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"存":{"docs":{},"在":{"docs":{},"重":{"docs":{},"叠":{"docs":{},"子":{"docs":{},"问":{"docs":{},"题":{"docs":{},"可":{"docs":{},"以":{"docs":{},"优":{"docs":{},"化":{"docs":{},"，":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"算":{"docs":{},"法":{"docs":{},"就":{"docs":{},"是":{"docs":{},"纯":{"docs":{},"暴":{"docs":{},"力":{"docs":{},"穷":{"docs":{},"举":{"docs":{},"，":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"一":{"docs":{},"般":{"docs":{},"都":{"docs":{},"很":{"docs":{},"高":{"docs":{},"。":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"。":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0050150451354062184}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}},"u":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.007731958762886598}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}}}},"n":{"docs":{},"c":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}},"p":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.010030090270812437},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.055248618784530384},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"h":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.004651162790697674}}}},"l":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}},"[":{"docs":{},"o":{"docs":{},".":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}},"]":{"docs":{},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},",":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.013377926421404682},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.023411371237458192}}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"i":{"docs":{},"r":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"s":{"docs":{},"h":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"压":{"docs":{},"入":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}},"，":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"，":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"b":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028}}},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},"(":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"弹":{"docs":{},"出":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}}},"s":{"docs":{},"t":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"_":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.005272407732864675}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732}}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"n":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{},"v":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}},"(":{"docs":{},"a":{"docs":{},")":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},")":{"docs":{},")":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}}}}},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.005813953488372093},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.010238907849829351}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},"v":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"i":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"y":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.016722408026755852}},":":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"x":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}}}}}}}}}},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}}},"r":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.03163444639718805},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.03481012658227848}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"+":{"docs":{},"+":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}}}}}},"p":{"docs":{},"o":{"docs":{"./":{"ref":"./","tf":0.016574585635359115}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"，":{"docs":{},"在":{"docs":{},"下":{"docs":{},"面":{"docs":{},"添":{"docs":{},"加":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"项":{"docs":{},"目":{"docs":{},"仓":{"docs":{},"库":{"docs":{},"，":{"docs":{},"完":{"docs":{},"成":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"模":{"docs":{},"板":{"docs":{},"打":{"docs":{},"卡":{"docs":{},"呀":{"docs":{},"~":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.012539184952978056},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.008525149190110827},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.0379746835443038}},")":{"docs":{},";":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"路":{"docs":{},"径":{"docs":{},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"q":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}},"docs":{}}}}}}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}},"'":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"'":{"docs":{},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"m":{"docs":{},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.010548523206751054}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},"e":{"docs":{},"i":{"docs":{},"p":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.047674418604651166},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.029087261785356068},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.028132992327365727},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.023195876288659795},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.012302284710017574},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.020066889632107024},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.01937984496124031},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.04149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.027303754266211604},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.052742616033755275}}}}},",":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.004012036108324975},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}},"v":{"docs":{},"_":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"(":{"docs":{},"s":{"docs":{},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.012448132780082987}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.006018054162487462},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}},"e":{"docs":{},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"e":{"docs":{},",":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.012658227848101266}},";":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"[":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},":":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}}}}}}}}}}}}}}}}}},":":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"=":{"docs":{},"[":{"docs":{},"]":{"docs":{},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.006329113924050633}}}},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"_":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}},"=":{"0":{"docs":{},")":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"docs":{}}}}}}}}},"o":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.02558139534883721},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.017064846416382253}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.01744186046511628},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.013651877133105802}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.014059753954305799}}}}},"w":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"u":{"docs":{},"n":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"s":{"docs":{},"t":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028}}}}},"_":{"docs":{},"i":{"docs":{},"s":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.01054481546572935}},"e":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.010852713178294573},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}},"2":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"_":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"n":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"s":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}},"f":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}}}}}}},"i":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}},"d":{"docs":{},"x":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"m":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}},"n":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},")":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.004262574595055414},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}},"j":{"docs":{},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"+":{"1":{"docs":{},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}},"[":{"1":{"docs":{},"]":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}},"docs":{}}}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.004012036108324975},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},".":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},")":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.010033444816053512}},":":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.013377926421404682},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},":":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}},")":{"docs":{},")":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}},",":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266}}}},"s":{"1":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}},":":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}}},"2":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}},":":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}},"，":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"来":{"docs":{},"判":{"docs":{},"断":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}},"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.00949367088607595},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.010033444816053512}},".":{"docs":{},".":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}},":":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}},"_":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}},"=":{"0":{"docs":{},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"docs":{}}}},"c":{"docs":{},"k":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.00937766410912191}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"0":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"docs":{}}}}}}}}}}}}}},"=":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},",":{"1":{"0":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{},":":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"(":{"docs":{},"o":{"docs":{},"r":{"1":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"docs":{}}}}}}}},"i":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.005115089514066497}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}},"_":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"i":{"docs":{},"r":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}},"t":{"docs":{},"e":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"u":{"docs":{},"d":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}},"r":{"docs":{},",":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.00949367088607595}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}},"=":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"v":{"docs":{},".":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"a":{"docs":{},"(":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}},"docs":{}}}}}}}}}}}},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"docs":{},"h":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},":":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}},"_":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"(":{"docs":{},"h":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},":":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.009404388714733543},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.015822784810126583}},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},",":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.006329113924050633}}}},"e":{"docs":{},"p":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"w":{"docs":{},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}},"a":{"docs":{},"p":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.013377926421404682},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}},"=":{"docs":{},"\"":{"1":{"2":{"3":{"4":{"5":{"docs":{},"\"":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"s":{"docs":{},"[":{"0":{"docs":{},":":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{},"]":{"docs":{},"，":{"docs":{},"取":{"docs":{},"下":{"docs":{},"限":{"docs":{},"不":{"docs":{},"取":{"docs":{},"上":{"docs":{},"限":{"docs":{},"，":{"docs":{},"数":{"docs":{},"学":{"docs":{},"表":{"docs":{},"示":{"docs":{},"为":{"docs":{},"：":{"docs":{},"[":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"[":{"0":{"docs":{},"]":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.00813953488372093},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.020477815699658702}},"i":{"docs":{},"]":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}},":":{"docs":{},"j":{"docs":{},"+":{"1":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},":":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}},"l":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"、":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"、":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.017051153460381142}},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.011033099297893681}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.00802407221664995},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.015817223198594025},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"{":{"docs":{},"}":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},",":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"{":{"docs":{},"}":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}}}}}}}},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.009404388714733543}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.01744186046511628},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.014042126379137413},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.013640238704177323},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.015463917525773196},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0210896309314587},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.017829457364341085},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.016597510373443983},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.013651877133105802},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.0189873417721519}},":":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"_":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"(":{"docs":{},"&":{"docs":{},"h":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},",":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"，":{"docs":{},"则":{"docs":{},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},":":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}}}}},"t":{"docs":{},"r":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.015822784810126583}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"m":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},"(":{"0":{"docs":{},",":{"0":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}},"docs":{}}},"docs":{}}}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}},"[":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}}}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0069767441860465115},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.01757469244288225},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.013651877133105802}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.008787346221441126}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497}}}}}}}}}}}}},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"，":{"docs":{},"比":{"docs":{},"较":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}},"m":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"docs":{}}}}}}}},"[":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"e":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"docs":{}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"[":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},"，":{"docs":{},"方":{"docs":{},"式":{"docs":{},"类":{"docs":{},"似":{"docs":{},"于":{"docs":{},"快":{"docs":{},"排":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}}}}}},"l":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}},"_":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}}}}}}}}},"g":{"docs":{},"_":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"e":{"docs":{},".":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"z":{"docs":{},"i":{"docs":{},"p":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"2":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"docs":{},"i":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}},"_":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.007731958762886598}}}}},"t":{"docs":{},"w":{"docs":{},"i":{"docs":{},"c":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732}}}}}}}}},"q":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.004651162790697674}}}}}}},"t":{"docs":{},"(":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.00949367088607595},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.015463917525773196}},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.007731958762886598}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"将":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"、":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}},"t":{"1":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"2":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}},"p":{"docs":{},"x":{"docs":{},"x":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}}}},"p":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}},"e":{"docs":{},"e":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.018604651162790697},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.020477815699658702}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"=":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.015116279069767442},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}}}}}}}},"u":{"docs":{},"e":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.00813953488372093},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.003875968992248062},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.013651877133105802},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}},"i":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}},"e":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}},"[":{"0":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"1":{"docs":{},":":{"docs":{},"]":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}},"i":{"docs":{},"l":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.006018054162487462},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.014042126379137413}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.01757469244288225},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.00949367088607595}},")":{"docs":{},":":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497}}}},":":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0210896309314587},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.006329113924050633}}},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"存":{"docs":{},"在":{"docs":{},"返":{"docs":{},"回":{"docs":{},"下":{"docs":{},"标":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.00949367088607595}},":":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}}}},"s":{"2":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},"]":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}},"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},"]":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.004012036108324975}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}}}}}}}}},"w":{"docs":{},"o":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}}},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"s":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}},"p":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"x":{"docs":{},"t":{"1":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"2":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"公":{"docs":{},"共":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},")":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}},":":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}},"，":{"docs":{},"请":{"docs":{},"在":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}},"w":{"1":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"2":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"y":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"h":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.00949367088607595}},";":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}},"[":{"docs":{},"s":{"2":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},"]":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}}}}}},"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},"]":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"1":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}},"2":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"，":{"docs":{},"请":{"docs":{},"你":{"docs":{},"计":{"docs":{},"算":{"docs":{},"出":{"docs":{},"将":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}},"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}}},"，":{"docs":{},"判":{"docs":{},"定":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}},"✅":{"docs":{"./":{"ref":"./","tf":0.055248618784530384}}},"⭐":{"docs":{},"️":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}},"~":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}},"【":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"】":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"y":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"/":{"docs":{},"a":{"docs":{},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"半":{"docs":{},"月":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"私":{"docs":{},"有":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"执":{"docs":{},"行":{"docs":{},"实":{"docs":{},"际":{"docs":{},"的":{"docs":{},"计":{"docs":{},"算":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"位":{"docs":{},"于":{"docs":{},"一":{"docs":{},"个":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}},"定":{"docs":{},"要":{"docs":{},"保":{"docs":{},"证":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},"侧":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"平":{"docs":{},"均":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}},"点":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}},"为":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"什":{"docs":{},"么":{"docs":{},"这":{"docs":{},"么":{"docs":{},"要":{"docs":{},"这":{"docs":{},"么":{"docs":{},"刷":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}},"空":{"docs":{},"，":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}},"区":{"docs":{},"间":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"位":{"docs":{},"数":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"实":{"docs":{},"际":{"docs":{},"上":{"docs":{},"可":{"docs":{},"以":{"docs":{},"利":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"将":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"降":{"docs":{},"到":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"节":{"docs":{},"点":{"docs":{},"所":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"。":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":10.001757469244287}},"核":{"docs":{},"心":{"docs":{},"四":{"docs":{},"点":{"docs":{},"要":{"docs":{},"素":{"docs":{},"（":{"docs":{},"必":{"docs":{},"背":{"docs":{},"&":{"docs":{},"理":{"docs":{},"解":{"docs":{},"）":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":10.003412969283277}},"应":{"docs":{},"用":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"树":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":10.001162790697675},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"相":{"docs":{},"关":{"docs":{},"问":{"docs":{},"题":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}},"遍":{"docs":{},"历":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},"的":{"docs":{},"层":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"堆":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"进":{"docs":{},"制":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":10.00257731958763}}}},"维":{"docs":{},"d":{"docs":{},"p":{"docs":{},"若":{"docs":{},"只":{"docs":{},"与":{"docs":{},"当":{"docs":{},"前":{"docs":{},"行":{"docs":{},"和":{"docs":{},"上":{"docs":{},"一":{"docs":{},"行":{"docs":{},"有":{"docs":{},"关":{"docs":{},"，":{"docs":{},"可":{"docs":{},"将":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"降":{"docs":{},"到":{"docs":{},"线":{"docs":{},"性":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"从":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"下":{"docs":{},"向":{"docs":{},"上":{"docs":{},"（":{"docs":{},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{},"）":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"移":{"docs":{},"除":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}}}}}}}},"起":{"docs":{},"点":{"docs":{},"走":{"docs":{},"到":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"入":{"docs":{},"门":{"docs":{},"篇":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}},"分":{"docs":{},"享":{"docs":{},"一":{"docs":{},"些":{"docs":{},"计":{"docs":{},"算":{"docs":{},"机":{"docs":{},"的":{"docs":{},"经":{"docs":{},"典":{"docs":{},"书":{"docs":{},"籍":{"docs":{},"，":{"docs":{},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"对":{"docs":{},"面":{"docs":{},"试":{"docs":{},"应":{"docs":{},"该":{"docs":{},"都":{"docs":{},"有":{"docs":{},"帮":{"docs":{},"助":{"docs":{},"，":{"docs":{},"强":{"docs":{},"烈":{"docs":{},"推":{"docs":{},"荐":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"段":{"docs":{},"处":{"docs":{},"理":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}},"治":{"docs":{},"法":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"应":{"docs":{},"用":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},"模":{"docs":{},"板":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},"）":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"别":{"docs":{},"对":{"docs":{},"应":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"割":{"docs":{},"成":{"docs":{},"一":{"docs":{},"些":{"docs":{},"子":{"docs":{},"串":{"docs":{},"，":{"docs":{},"使":{"docs":{},"每":{"docs":{},"个":{"docs":{},"子":{"docs":{},"串":{"docs":{},"都":{"docs":{},"是":{"docs":{},"回":{"docs":{},"文":{"docs":{},"串":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}},"刷":{"docs":{},"完":{"docs":{},"这":{"docs":{},"些":{"docs":{},"练":{"docs":{},"习":{"docs":{},"题":{"docs":{},"，":{"docs":{},"基":{"docs":{},"本":{"docs":{},"对":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"和":{"docs":{},"算":{"docs":{},"法":{"docs":{},"有":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"认":{"docs":{},"识":{"docs":{},"体":{"docs":{},"会":{"docs":{},"，":{"docs":{},"基":{"docs":{},"本":{"docs":{},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"面":{"docs":{},"试":{"docs":{},"题":{"docs":{},"都":{"docs":{},"能":{"docs":{},"写":{"docs":{},"得":{"docs":{},"出":{"docs":{},"来":{"docs":{},"，":{"docs":{},"国":{"docs":{},"内":{"docs":{},"的":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"时":{"docs":{},"间":{"docs":{},"可":{"docs":{},"以":{"docs":{},"合":{"docs":{},"理":{"docs":{},"分":{"docs":{},"配":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"打":{"docs":{},"算":{"docs":{},"准":{"docs":{},"备":{"docs":{},"面":{"docs":{},"试":{"docs":{},"了":{"docs":{},"，":{"docs":{},"建":{"docs":{},"议":{"docs":{},"前":{"docs":{},"面":{"docs":{},"两":{"docs":{},"部":{"docs":{},"分":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}},"注":{"docs":{},"意":{"docs":{},"点":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}},"剑":{"docs":{},"指":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":10.00077519379845}},"和":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"就":{"docs":{},"是":{"docs":{},"把":{"docs":{},"大":{"docs":{},"问":{"docs":{},"题":{"docs":{},"变":{"docs":{},"成":{"docs":{},"小":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"并":{"docs":{},"解":{"docs":{},"决":{"docs":{},"了":{"docs":{},"小":{"docs":{},"问":{"docs":{},"题":{"docs":{},"重":{"docs":{},"复":{"docs":{},"计":{"docs":{},"算":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"称":{"docs":{},"为":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"自":{"docs":{},"底":{"docs":{},"向":{"docs":{},"上":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"顶":{"docs":{},"向":{"docs":{},"下":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"：":{"docs":{},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"思":{"docs":{},"想":{"docs":{},"，":{"docs":{},"大":{"docs":{},"规":{"docs":{},"模":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"是":{"docs":{},"由":{"docs":{},"小":{"docs":{},"规":{"docs":{},"模":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"运":{"docs":{},"算":{"docs":{},"得":{"docs":{},"来":{"docs":{},"的":{"docs":{},"。":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"可":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"来":{"docs":{},"实":{"docs":{},"现":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"画":{"docs":{},"展":{"docs":{},"示":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}},"半":{"docs":{},"个":{"docs":{},"月":{"docs":{},"刷":{"docs":{},"完":{"docs":{},"，":{"docs":{},"边":{"docs":{},"刷":{"docs":{},"可":{"docs":{},"以":{"docs":{},"边":{"docs":{},"投":{"docs":{},"简":{"docs":{},"历":{"docs":{},"进":{"docs":{},"行":{"docs":{},"面":{"docs":{},"试":{"docs":{},"，":{"docs":{},"遇":{"docs":{},"到":{"docs":{},"不":{"docs":{},"会":{"docs":{},"的":{"docs":{},"不":{"docs":{},"用":{"docs":{},"着":{"docs":{},"急":{"docs":{},"，":{"docs":{},"往":{"docs":{},"模":{"docs":{},"板":{"docs":{},"上":{"docs":{},"套":{"docs":{},"就":{"docs":{},"对":{"docs":{},"了":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"面":{"docs":{},"试":{"docs":{},"管":{"docs":{},"给":{"docs":{},"你":{"docs":{},"提":{"docs":{},"示":{"docs":{},"，":{"docs":{},"那":{"docs":{},"就":{"docs":{},"好":{"docs":{},"好":{"docs":{},"做":{"docs":{},"，":{"docs":{},"不":{"docs":{},"要":{"docs":{},"错":{"docs":{},"过":{"docs":{},"这":{"docs":{},"大":{"docs":{},"好":{"docs":{},"机":{"docs":{},"会":{"docs":{},"~":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"卡":{"docs":{},"片":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"可":{"docs":{},"能":{"docs":{},"效":{"docs":{},"果":{"docs":{},"会":{"docs":{},"更":{"docs":{},"好":{"docs":{},"~":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}},"变":{"docs":{},"为":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.007029876977152899}}}}}},"周":{"docs":{},")":{"docs":{},"左":{"docs":{},"右":{"docs":{},"时":{"docs":{},"间":{"docs":{},"刷":{"docs":{},"完":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}},"）":{"docs":{},"时":{"docs":{},"间":{"docs":{},"刷":{"docs":{},"完":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"剑":{"docs":{},"指":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}},"回":{"docs":{},"到":{"docs":{},"最":{"docs":{},"开":{"docs":{},"始":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"面":{"docs":{},"试":{"docs":{},"到":{"docs":{},"底":{"docs":{},"要":{"docs":{},"刷":{"docs":{},"多":{"docs":{},"少":{"docs":{},"题":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"这":{"docs":{},"个":{"docs":{},"取":{"docs":{},"决":{"docs":{},"于":{"docs":{},"你":{"docs":{},"想":{"docs":{},"进":{"docs":{},"什":{"docs":{},"么":{"docs":{},"样":{"docs":{},"公":{"docs":{},"司":{"docs":{},"，":{"docs":{},"你":{"docs":{},"定":{"docs":{},"的":{"docs":{},"目":{"docs":{},"标":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"国":{"docs":{},"内":{"docs":{},"一":{"docs":{},"线":{"docs":{},"大":{"docs":{},"厂":{"docs":{},"，":{"docs":{},"个":{"docs":{},"人":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"大":{"docs":{},"概":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"溯":{"docs":{},"法":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":10.00210970464135}},"（":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"）":{"docs":{},"常":{"docs":{},"用":{"docs":{},"于":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"列":{"docs":{},"表":{"docs":{},"所":{"docs":{},"有":{"docs":{},"子":{"docs":{},"集":{"docs":{},"，":{"docs":{},"是":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}}}}},"：":{"docs":{},"将":{"docs":{},"路":{"docs":{},"径":{"docs":{},"中":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"移":{"docs":{},"除":{"docs":{},"，":{"docs":{},"探":{"docs":{},"索":{"docs":{},"不":{"docs":{},"包":{"docs":{},"含":{"docs":{},"当":{"docs":{},"前":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"其":{"docs":{},"他":{"docs":{},"路":{"docs":{},"径":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"文":{"docs":{},"d":{"docs":{},"p":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"降":{"docs":{},"为":{"docs":{},"线":{"docs":{},"性":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"高":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}},"二":{"docs":{},"维":{"docs":{},"d":{"docs":{},"p":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"在":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"线":{"docs":{},"文":{"docs":{},"档":{"docs":{"./":{"ref":"./","tf":0.016574585635359115}}}}},"公":{"docs":{},"共":{"docs":{},"方":{"docs":{},"法":{"docs":{},"内":{"docs":{},"部":{"docs":{},"，":{"docs":{},"将":{"docs":{},"拥":{"docs":{},"有":{"docs":{},"所":{"docs":{},"有":{"docs":{},"权":{"docs":{},"的":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}},"基":{"docs":{},"础":{"docs":{},"算":{"docs":{},"法":{"docs":{},"篇":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}},"本":{"docs":{},"用":{"docs":{},"法":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"语":{"docs":{},"法":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"技":{"docs":{},"能":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"操":{"docs":{},"作":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"完":{"docs":{},"成":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}},"打":{"docs":{},"卡":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"计":{"docs":{},"划":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"提":{"docs":{},"交":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}},"美":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}},"实":{"docs":{},"现":{"docs":{},")":{"docs":{"./":{"ref":"./","tf":0.027624309392265192}},",":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}},"在":{"docs":{},"线":{"docs":{},"文":{"docs":{},"档":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}},"际":{"docs":{},"值":{"docs":{},"：":{"1":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"docs":{}}}}},"希":{"docs":{},"望":{"docs":{},"刷":{"docs":{},"完":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"你":{"docs":{},"也":{"docs":{},"能":{"docs":{},"自":{"docs":{},"己":{"docs":{},"总":{"docs":{},"结":{"docs":{},"一":{"docs":{},"套":{"docs":{},"属":{"docs":{},"于":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"模":{"docs":{},"板":{"docs":{},"，":{"docs":{},"有":{"docs":{},"所":{"docs":{},"收":{"docs":{},"获":{"docs":{},"，":{"docs":{},"有":{"docs":{},"所":{"docs":{},"成":{"docs":{},"长":{"docs":{},"~":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"应":{"docs":{},"该":{"docs":{},"都":{"docs":{},"不":{"docs":{},"是":{"docs":{},"问":{"docs":{},"题":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}},"用":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}},"开":{"docs":{},"始":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},"刷":{"docs":{"./":{"ref":"./","tf":0.011049723756906077}},"题":{"docs":{},"时":{"docs":{},"，":{"docs":{},"确":{"docs":{},"实":{"docs":{},"是":{"docs":{},"无":{"docs":{},"从":{"docs":{},"下":{"docs":{},"手":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"从":{"docs":{},"序":{"docs":{},"号":{"docs":{},"开":{"docs":{},"始":{"docs":{},"刷":{"docs":{},"，":{"docs":{},"刷":{"docs":{},"到":{"docs":{},"几":{"docs":{},"道":{"docs":{},"题":{"docs":{},"就":{"docs":{},"遇":{"docs":{},"到":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}},"，":{"docs":{},"后":{"docs":{},"面":{"docs":{},"的":{"docs":{},"每":{"docs":{},"一":{"docs":{},"项":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"是":{"docs":{},"前":{"docs":{},"面":{"docs":{},"两":{"docs":{},"项":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"和":{"docs":{},"。":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"：":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}}},"心":{"docs":{},"得":{"docs":{},"体":{"docs":{},"会":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}},"我":{"docs":{},"看":{"docs":{},"过":{"docs":{},"的":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}},"们":{"docs":{},"大":{"docs":{},"多":{"docs":{},"数":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"刷":{"docs":{},"算":{"docs":{},"法":{"docs":{},"题":{"docs":{},"可":{"docs":{},"能":{"docs":{},"都":{"docs":{},"是":{"docs":{},"为":{"docs":{},"了":{"docs":{},"准":{"docs":{},"备":{"docs":{},"面":{"docs":{},"试":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"面":{"docs":{},"试":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"需":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"一":{"docs":{},"些":{"docs":{},"点":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"持":{"docs":{},"续":{"docs":{},"更":{"docs":{},"新":{"docs":{},"中":{"docs":{},"，":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"还":{"docs":{},"可":{"docs":{},"以":{"docs":{},"的":{"docs":{},"话":{"docs":{},"点":{"docs":{},"个":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}},"按":{"docs":{},"此":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"排":{"docs":{},"序":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},"算":{"docs":{},"法":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":10}}}}}},"探":{"docs":{},"索":{"docs":{},"基":{"docs":{},"础":{"docs":{},"卡":{"docs":{},"片":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"快":{"docs":{},"要":{"docs":{},"面":{"docs":{},"试":{"docs":{},"时":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"剑":{"docs":{},"指":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}},"推":{"docs":{},"荐":{"docs":{},"的":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"路":{"docs":{},"径":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}},"搜":{"docs":{},"索":{"docs":{},"最":{"docs":{},"好":{"docs":{},"的":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"方":{"docs":{},"式":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"按":{"docs":{},"题":{"docs":{},"型":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"会":{"docs":{},"舒":{"docs":{},"服":{"docs":{},"很":{"docs":{},"多":{"docs":{},"，":{"docs":{},"基":{"docs":{},"本":{"docs":{},"一":{"docs":{},"个":{"docs":{},"类":{"docs":{},"型":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"一":{"docs":{},"天":{"docs":{},"能":{"docs":{},"做":{"docs":{},"很":{"docs":{},"多":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"慢":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"也":{"docs":{},"不":{"docs":{},"再":{"docs":{},"枯":{"docs":{},"燥":{"docs":{},"，":{"docs":{},"做":{"docs":{},"起":{"docs":{},"来":{"docs":{},"也":{"docs":{},"很":{"docs":{},"有":{"docs":{},"意":{"docs":{},"思":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"也":{"docs":{},"收":{"docs":{},"到":{"docs":{},"不":{"docs":{},"错":{"docs":{},"的":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"收":{"docs":{},"藏":{"docs":{},"呀":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"缩":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"篇":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"与":{"docs":{},"算":{"docs":{},"法":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"表":{"docs":{},"现":{"docs":{},"形":{"docs":{},"式":{"docs":{},"，":{"docs":{},"如":{"docs":{},"链":{"docs":{},"表":{"docs":{},"、":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"、":{"docs":{},"栈":{"docs":{},"、":{"docs":{},"队":{"docs":{},"列":{"docs":{},"等":{"docs":{},"都":{"docs":{},"是":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{},"一":{"docs":{},"段":{"docs":{},"数":{"docs":{},"据":{"docs":{},"表":{"docs":{},"现":{"docs":{},"的":{"docs":{},"形":{"docs":{},"式":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"组":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"时":{"docs":{},"，":{"docs":{},"若":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}},"中":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"代":{"docs":{},"表":{"docs":{},"你":{"docs":{},"在":{"docs":{},"该":{"docs":{},"位":{"docs":{},"置":{"docs":{},"可":{"docs":{},"以":{"docs":{},"跳":{"docs":{},"跃":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}}}}}}}}}}}}}}}}}},"文":{"docs":{},"章":{"docs":{},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"是":{"docs":{},"对":{"docs":{},"题":{"docs":{},"目":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{},"介":{"docs":{},"绍":{"docs":{},"，":{"docs":{},"和":{"docs":{},"一":{"docs":{},"些":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"解":{"docs":{},"析":{"docs":{},"，":{"docs":{},"有":{"docs":{},"了":{"docs":{},"思":{"docs":{},"路":{"docs":{},"还":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"自":{"docs":{},"己":{"docs":{},"手":{"docs":{},"动":{"docs":{},"写":{"docs":{},"写":{"docs":{},"的":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"每":{"docs":{},"篇":{"docs":{},"文":{"docs":{},"章":{"docs":{},"最":{"docs":{},"后":{"docs":{},"都":{"docs":{},"有":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"练":{"docs":{},"习":{"docs":{},"题":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"公":{"docs":{},"司":{"docs":{},"的":{"docs":{},"出":{"docs":{},"题":{"docs":{},"源":{"docs":{},"头":{"docs":{},"，":{"docs":{},"刷":{"docs":{},"完":{"docs":{},"面":{"docs":{},"试":{"docs":{},"中":{"docs":{},"基":{"docs":{},"本":{"docs":{},"会":{"docs":{},"遇":{"docs":{},"到":{"docs":{},"现":{"docs":{},"题":{"docs":{},"或":{"docs":{},"者":{"docs":{},"变":{"docs":{},"形":{"docs":{},"题":{"docs":{},"，":{"docs":{},"基":{"docs":{},"本":{"docs":{},"刷":{"docs":{},"完":{"docs":{},"这":{"docs":{},"三":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"国":{"docs":{},"内":{"docs":{},"公":{"docs":{},"司":{"docs":{},"的":{"docs":{},"面":{"docs":{},"试":{"docs":{},"题":{"docs":{},"应":{"docs":{},"该":{"docs":{},"就":{"docs":{},"没":{"docs":{},"什":{"docs":{},"么":{"docs":{},"问":{"docs":{},"题":{"docs":{},"了":{"docs":{},"~":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"否":{"docs":{},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"有":{"docs":{},"默":{"docs":{},"认":{"docs":{},"值":{"docs":{},"关":{"docs":{},"系":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"需":{"docs":{},"要":{"docs":{},"检":{"docs":{},"查":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}},"为":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}},"第":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"可":{"docs":{},"以":{"docs":{},"被":{"docs":{},"空":{"docs":{},"格":{"docs":{},"拆":{"docs":{},"分":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"或":{"docs":{},"多":{"docs":{},"个":{"docs":{},"在":{"docs":{},"字":{"docs":{},"典":{"docs":{},"中":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"单":{"docs":{},"词":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}},"包":{"docs":{},"含":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}},"基":{"docs":{},"于":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"切":{"docs":{},"片":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"拥":{"docs":{},"有":{"docs":{},"所":{"docs":{},"有":{"docs":{},"权":{"docs":{},"的":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}},"起":{"docs":{},"始":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}},"为":{"docs":{},"了":{"docs":{},"保":{"docs":{},"证":{"docs":{},"最":{"docs":{},"后":{"docs":{},"找":{"docs":{},"环":{"docs":{},"起":{"docs":{},"始":{"docs":{},"点":{"docs":{},"时":{"docs":{},"移":{"docs":{},"动":{"docs":{},"步":{"docs":{},"数":{"docs":{},"相":{"docs":{},"同":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"作":{"docs":{},"为":{"docs":{},"找":{"docs":{},"中":{"docs":{},"点":{"docs":{},"使":{"docs":{},"用":{"docs":{},"时":{"docs":{},"一":{"docs":{},"般":{"docs":{},"用":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}},"常":{"docs":{},"用":{"docs":{},"的":{"docs":{},"，":{"docs":{},"几":{"docs":{},"乎":{"docs":{},"所":{"docs":{},"有":{"docs":{},"二":{"docs":{},"分":{"docs":{},"查":{"docs":{},"找":{"docs":{},"问":{"docs":{},"题":{"docs":{},"都":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"其":{"docs":{},"中":{"docs":{},"之":{"docs":{},"一":{"docs":{},"轻":{"docs":{},"松":{"docs":{},"实":{"docs":{},"现":{"docs":{},"。":{"docs":{},"模":{"docs":{},"板":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"大":{"docs":{},"于":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}},"指":{"docs":{},"这":{"docs":{},"样":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"：":{"docs":{},"它":{"docs":{},"是":{"docs":{},"由":{"docs":{},"原":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"在":{"docs":{},"不":{"docs":{},"改":{"docs":{},"变":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"相":{"docs":{},"对":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"删":{"docs":{},"除":{"docs":{},"某":{"docs":{},"些":{"docs":{},"字":{"docs":{},"符":{"docs":{},"（":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"删":{"docs":{},"除":{"docs":{},"任":{"docs":{},"何":{"docs":{},"字":{"docs":{},"符":{"docs":{},"）":{"docs":{},"后":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"新":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"更":{"docs":{},"新":{"docs":{},"计":{"docs":{},"划":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}},"高":{"docs":{},"级":{"docs":{},"一":{"docs":{},"些":{"docs":{},"，":{"docs":{},"用":{"docs":{},"于":{"docs":{},"解":{"docs":{},"决":{"docs":{},"某":{"docs":{},"些":{"docs":{},"类":{"docs":{},"型":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{},"详":{"docs":{},"细":{"docs":{},"的":{"docs":{},"对":{"docs":{},"比":{"docs":{},"可":{"docs":{},"以":{"docs":{},"参":{"docs":{},"考":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"月":{"docs":{},"份":{"docs":{},"找":{"docs":{},"工":{"docs":{},"作":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"从":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}},"本":{"docs":{},"书":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"质":{"docs":{},"上":{"docs":{},"是":{"docs":{},"图":{"docs":{},"的":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"特":{"docs":{},"例":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"来":{"docs":{},"实":{"docs":{},"现":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}},"：":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"）":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}},"栈":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"和":{"docs":{},"队":{"docs":{},"列":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":10.00085251491901}}}}},"的":{"docs":{},"特":{"docs":{},"点":{"docs":{},"是":{"docs":{},"后":{"docs":{},"入":{"docs":{},"先":{"docs":{},"出":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}},"核":{"docs":{},"心":{"docs":{},"内":{"docs":{},"容":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"就":{"docs":{},"是":{"docs":{},"：":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"必":{"docs":{},"须":{"docs":{},"在":{"docs":{},"右":{"docs":{},"节":{"docs":{},"点":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"再":{"docs":{},"弹":{"docs":{},"出":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}},"从":{"docs":{},"选":{"docs":{},"择":{"docs":{},"列":{"docs":{},"表":{"docs":{},"里":{"docs":{},"做":{"docs":{},"一":{"docs":{},"个":{"docs":{},"选":{"docs":{},"择":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"一":{"docs":{},"直":{"docs":{},"递":{"docs":{},"归":{"docs":{},"往":{"docs":{},"下":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"遇":{"docs":{},"到":{"docs":{},"路":{"docs":{},"径":{"docs":{},"不":{"docs":{},"通":{"docs":{},"，":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{},"来":{"docs":{},"撤":{"docs":{},"销":{"docs":{},"这":{"docs":{},"次":{"docs":{},"选":{"docs":{},"择":{"docs":{},"。":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"代":{"docs":{},"码":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"步":{"docs":{},"骤":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}},"此":{"docs":{},"项":{"docs":{},"目":{"docs":{},"是":{"docs":{},"自":{"docs":{},"己":{"docs":{},"找":{"docs":{},"工":{"docs":{},"作":{"docs":{},"时":{"docs":{},"，":{"docs":{},"从":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}},"题":{"docs":{},"主":{"docs":{},"要":{"docs":{},"难":{"docs":{},"点":{"docs":{},"是":{"docs":{},"构":{"docs":{},"造":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"是":{"docs":{},"面":{"docs":{},"试":{"docs":{},"真":{"docs":{},"题":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"没":{"docs":{},"有":{"docs":{},"在":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}},"注":{"docs":{},"意":{"docs":{},"点":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.013605442176870748},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"：":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}},"如":{"docs":{},"果":{"docs":{},"为":{"docs":{},"了":{"docs":{},"找":{"docs":{},"工":{"docs":{},"作":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"，":{"docs":{},"遇":{"docs":{},"到":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}},"，":{"docs":{},"此":{"docs":{},"题":{"docs":{},"中":{"docs":{},"使":{"docs":{},"用":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}},"位":{"docs":{},"运":{"docs":{},"算":{"docs":{},"的":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}},"：":{"docs":{},"此":{"docs":{},"题":{"docs":{},"用":{"docs":{},"来":{"docs":{},"训":{"docs":{},"练":{"docs":{},"递":{"docs":{},"归":{"docs":{},"思":{"docs":{},"维":{"docs":{},"有":{"docs":{},"理":{"docs":{},"论":{"docs":{},"意":{"docs":{},"义":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"实":{"docs":{},"际":{"docs":{},"上":{"docs":{},"算":{"docs":{},"法":{"docs":{},"返":{"docs":{},"回":{"docs":{},"的":{"docs":{},"树":{"docs":{},"并":{"docs":{},"不":{"docs":{},"是":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"此":{"docs":{},"题":{"docs":{},"（":{"docs":{},"貌":{"docs":{},"似":{"docs":{},"）":{"docs":{},"无":{"docs":{},"法":{"docs":{},"使":{"docs":{},"用":{"docs":{},"上":{"docs":{},"题":{"docs":{},"的":{"docs":{},"思":{"docs":{},"路":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}},"思":{"docs":{},"想":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":10}}}},"算":{"docs":{},"法":{"docs":{},"框":{"docs":{},"架":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}},"用":{"docs":{},"户":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"于":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"子":{"docs":{},"集":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}},"存":{"docs":{},"储":{"docs":{},"最":{"docs":{},"终":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"子":{"docs":{},"集":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}},"记":{"docs":{},"录":{"docs":{},"当":{"docs":{},"前":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"表":{"docs":{},"示":{"docs":{},"的":{"docs":{},"完":{"docs":{},"美":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}}},"的":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},"心":{"docs":{},"得":{"docs":{},"记":{"docs":{},"录":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"各":{"docs":{},"种":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"文":{"docs":{},"章":{"docs":{},"、":{"docs":{},"专":{"docs":{},"栏":{"docs":{},"、":{"docs":{},"视":{"docs":{},"频":{"docs":{},"等":{"docs":{},"总":{"docs":{},"结":{"docs":{},"了":{"docs":{},"一":{"docs":{},"套":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"模":{"docs":{},"板":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"目":{"docs":{},"的":{"docs":{},"，":{"docs":{},"给":{"docs":{},"你":{"docs":{},"指":{"docs":{},"定":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"，":{"docs":{},"以":{"docs":{},"及":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"的":{"docs":{},"模":{"docs":{},"板":{"docs":{},"，":{"docs":{},"有":{"docs":{},"了":{"docs":{},"方":{"docs":{},"向":{"docs":{},"和":{"docs":{},"技":{"docs":{},"巧":{"docs":{},"后":{"docs":{},"，":{"docs":{},"就":{"docs":{},"去":{"docs":{},"动":{"docs":{},"手":{"docs":{},"吧":{"docs":{},"~":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"题":{"docs":{},"型":{"docs":{},"，":{"docs":{},"会":{"docs":{},"卡":{"docs":{},"住":{"docs":{},"很":{"docs":{},"久":{"docs":{},"，":{"docs":{},"后":{"docs":{},"面":{"docs":{},"去":{"docs":{},"评":{"docs":{},"论":{"docs":{},"区":{"docs":{},"看":{"docs":{},"别":{"docs":{},"人":{"docs":{},"怎":{"docs":{},"么":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"，":{"docs":{},"也":{"docs":{},"去":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"思":{"docs":{},"路":{"docs":{},"就":{"docs":{},"做":{"docs":{},"，":{"docs":{},"没":{"docs":{},"思":{"docs":{},"路":{"docs":{},"先":{"docs":{},"跳":{"docs":{},"过":{"docs":{},"，":{"docs":{},"先":{"docs":{},"把":{"docs":{},"基":{"docs":{},"础":{"docs":{},"打":{"docs":{},"好":{"docs":{},"，":{"docs":{},"再":{"docs":{},"来":{"docs":{},"刷":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}},"公":{"docs":{},"共":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"符":{"docs":{},"合":{"docs":{},"问":{"docs":{},"题":{"docs":{},"预":{"docs":{},"期":{"docs":{},"的":{"docs":{},"接":{"docs":{},"口":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}},"开":{"docs":{},"始":{"docs":{},"位":{"docs":{},"置":{"docs":{},"就":{"docs":{},"匹":{"docs":{},"配":{"docs":{},"到":{"docs":{},"了":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}},"异":{"docs":{},"常":{"docs":{},"处":{"docs":{},"理":{"docs":{},"机":{"docs":{},"制":{"docs":{},"不":{"docs":{},"同":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"出":{"docs":{},"现":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}},"节":{"docs":{},"点":{"docs":{},"之":{"docs":{},"前":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"都":{"docs":{},"在":{"docs":{},"大":{"docs":{},"于":{"docs":{},"或":{"docs":{},"等":{"docs":{},"于":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}},"，":{"docs":{},"放":{"docs":{},"到":{"docs":{},"另":{"docs":{},"外":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"连":{"docs":{},"接":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{},"请":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"趟":{"docs":{},"扫":{"docs":{},"描":{"docs":{},"完":{"docs":{},"成":{"docs":{},"反":{"docs":{},"转":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}},"坐":{"docs":{},"标":{"docs":{},"，":{"docs":{},"则":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}},"距":{"docs":{},"离":{"docs":{},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"个":{"docs":{},"数":{"docs":{},"（":{"docs":{},"也":{"docs":{},"被":{"docs":{},"称":{"docs":{},"为":{"docs":{},"汉":{"docs":{},"明":{"docs":{},"重":{"docs":{},"量":{"docs":{},"）":{"docs":{},"。":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}},"数":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"加":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"目":{"docs":{},"并":{"docs":{},"将":{"docs":{},"它":{"docs":{},"们":{"docs":{},"作":{"docs":{},"为":{"docs":{},"数":{"docs":{},"组":{"docs":{},"返":{"docs":{},"回":{"docs":{},"。":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}},"解":{"docs":{},"法":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497}},"，":{"docs":{},"k":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"实":{"docs":{},"现":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497}}}},"索":{"docs":{},"引":{"docs":{},"。":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}},"，":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}},"和":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}},"所":{"docs":{},"以":{"docs":{},"用":{"docs":{},"两":{"docs":{},"次":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"分":{"docs":{},"别":{"docs":{},"找":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"和":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"下":{"docs":{},"面":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"模":{"docs":{},"板":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"起":{"docs":{},"始":{"docs":{},"和":{"docs":{},"结":{"docs":{},"束":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"不":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{},"[":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"相":{"docs":{},"较":{"docs":{},"于":{"docs":{},"快":{"docs":{},"排":{"docs":{},"，":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}}}},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"比":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"。":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"「":{"docs":{},"公":{"docs":{},"共":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"」":{"docs":{},"是":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"所":{"docs":{},"共":{"docs":{},"同":{"docs":{},"拥":{"docs":{},"有":{"docs":{},"的":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"但":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"最":{"docs":{},"短":{"docs":{},"路":{"docs":{},"径":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"过":{"docs":{},"程":{"docs":{},"为":{"docs":{},"逆":{"docs":{},"着":{"docs":{},"气":{"docs":{},"球":{"docs":{},"戳":{"docs":{},"爆":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}},"背":{"docs":{},"包":{"docs":{},".":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"形":{"docs":{},"式":{"docs":{},"给":{"docs":{},"出":{"docs":{},"。":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}},"字":{"docs":{},"母":{"docs":{},"异":{"docs":{},"位":{"docs":{},"词":{"docs":{},"的":{"docs":{},"子":{"docs":{},"串":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"这":{"docs":{},"些":{"docs":{},"子":{"docs":{},"串":{"docs":{},"的":{"docs":{},"起":{"docs":{},"始":{"docs":{},"索":{"docs":{},"引":{"docs":{},"。":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}}}},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}},"特":{"docs":{},"点":{"docs":{},"，":{"docs":{},"补":{"docs":{},"充":{"docs":{},"在":{"docs":{},"这":{"docs":{},"供":{"docs":{},"参":{"docs":{},"考":{"docs":{},"。":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}},"空":{"docs":{},"间":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"目":{"docs":{},"录":{"docs":{},"刷":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"中":{"docs":{},"间":{"docs":{},"有":{"docs":{},"题":{"docs":{},"目":{"docs":{},"卡":{"docs":{},"住":{"docs":{},"了":{"docs":{},"先":{"docs":{},"跳":{"docs":{},"过":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"一":{"docs":{},"遍":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}},"标":{"docs":{},"d":{"docs":{},"p":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"算":{"docs":{},"法":{"docs":{},"快":{"docs":{},"速":{"docs":{},"入":{"docs":{},"门":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":10}}}}}},"思":{"docs":{},"维":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"模":{"docs":{},"板":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}},"顾":{"docs":{},"名":{"docs":{},"思":{"docs":{},"义":{"docs":{},"就":{"docs":{},"是":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"的":{"docs":{},"套":{"docs":{},"路":{"docs":{},"模":{"docs":{},"板":{"docs":{},"，":{"docs":{},"掌":{"docs":{},"握":{"docs":{},"了":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"模":{"docs":{},"板":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"也":{"docs":{},"变":{"docs":{},"得":{"docs":{},"好":{"docs":{},"玩":{"docs":{},"起":{"docs":{},"来":{"docs":{},"了":{"docs":{},"~":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"最":{"docs":{},"科":{"docs":{},"学":{"docs":{},"的":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"方":{"docs":{},"式":{"docs":{},"，":{"docs":{},"最":{"docs":{},"快":{"docs":{},"速":{"docs":{},"的":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"路":{"docs":{},"径":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"月":{"docs":{},"从":{"docs":{},"入":{"docs":{},"门":{"docs":{},"到":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"通":{"docs":{},"用":{"docs":{},"的":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"模":{"docs":{},"板":{"docs":{},"或":{"docs":{},"者":{"docs":{},"思":{"docs":{},"路":{"docs":{},"，":{"docs":{},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"都":{"docs":{},"有":{"docs":{},"一":{"docs":{},"套":{"docs":{},"通":{"docs":{},"用":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"模":{"docs":{},"板":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"掌":{"docs":{},"握":{"docs":{},"这":{"docs":{},"些":{"docs":{},"通":{"docs":{},"用":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"模":{"docs":{},"板":{"docs":{},"即":{"docs":{},"可":{"docs":{},"解":{"docs":{},"决":{"docs":{},"各":{"docs":{},"种":{"docs":{},"算":{"docs":{},"法":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"练":{"docs":{},"习":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},"题":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}},"至":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"语":{"docs":{},"言":{"docs":{},"入":{"docs":{},"门":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"introduction/golang.html":{"ref":"introduction/golang.html","tf":5}}}},"圣":{"docs":{},"经":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}},"这":{"docs":{},"个":{"docs":{},"模":{"docs":{},"板":{"docs":{},"主":{"docs":{},"要":{"docs":{},"是":{"docs":{},"介":{"docs":{},"绍":{"docs":{},"了":{"docs":{},"一":{"docs":{},"些":{"docs":{},"通":{"docs":{},"用":{"docs":{},"的":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"模":{"docs":{},"板":{"docs":{},"，":{"docs":{},"以":{"docs":{},"及":{"docs":{},"一":{"docs":{},"些":{"docs":{},"常":{"docs":{},"见":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"如":{"docs":{},"到":{"docs":{},"底":{"docs":{},"要":{"docs":{},"刷":{"docs":{},"多":{"docs":{},"少":{"docs":{},"题":{"docs":{},"，":{"docs":{},"按":{"docs":{},"什":{"docs":{},"么":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"来":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"，":{"docs":{},"如":{"docs":{},"何":{"docs":{},"提":{"docs":{},"高":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"效":{"docs":{},"率":{"docs":{},"等":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"函":{"docs":{},"数":{"docs":{},"被":{"docs":{},"设":{"docs":{},"计":{"docs":{},"为":{"docs":{},"使":{"docs":{},"用":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"切":{"docs":{},"片":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}},"一":{"docs":{},"步":{"docs":{},"确":{"docs":{},"保":{"docs":{},"了":{"docs":{},"在":{"docs":{},"每":{"docs":{},"次":{"docs":{},"递":{"docs":{},"归":{"docs":{},"调":{"docs":{},"用":{"docs":{},"中":{"docs":{},"，":{"docs":{},"当":{"docs":{},"前":{"docs":{},"探":{"docs":{},"索":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"都":{"docs":{},"会":{"docs":{},"被":{"docs":{},"记":{"docs":{},"录":{"docs":{},"下":{"docs":{},"来":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"避":{"docs":{},"免":{"docs":{},"了":{"docs":{},"获":{"docs":{},"取":{"docs":{},"函":{"docs":{},"数":{"docs":{},"参":{"docs":{},"数":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"权":{"docs":{},"，":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}},"是":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"走":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"子":{"docs":{},"问":{"docs":{},"题":{"docs":{},"是":{"docs":{},"有":{"docs":{},"交":{"docs":{},"集":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"递":{"docs":{},"归":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}},"思":{"docs":{},"维":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":10}}}},"调":{"docs":{},"用":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}},"实":{"docs":{},"现":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"非":{"docs":{},"常":{"docs":{},"简":{"docs":{},"单":{"docs":{},"，":{"docs":{},"不":{"docs":{},"同":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"区":{"docs":{},"别":{"docs":{},"仅":{"docs":{},"在":{"docs":{},"于":{"docs":{},"访":{"docs":{},"问":{"docs":{},"父":{"docs":{},"结":{"docs":{},"点":{"docs":{},"顺":{"docs":{},"序":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"模":{"docs":{},"板":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},"返":{"docs":{},"回":{"docs":{},"条":{"docs":{},"件":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}},"为":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}},"和":{"docs":{},"动":{"docs":{},"规":{"docs":{},"关":{"docs":{},"系":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"程":{"docs":{},"序":{"docs":{},"的":{"docs":{},"实":{"docs":{},"现":{"docs":{},"方":{"docs":{},"式":{"docs":{},"：":{"docs":{},"函":{"docs":{},"数":{"docs":{},"的":{"docs":{},"自":{"docs":{},"我":{"docs":{},"调":{"docs":{},"用":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}},"里":{"docs":{},"面":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"是":{"docs":{},"按":{"docs":{},"类":{"docs":{},"型":{"docs":{},"归":{"docs":{},"类":{"docs":{},"，":{"docs":{},"都":{"docs":{},"是":{"docs":{},"一":{"docs":{},"些":{"docs":{},"常":{"docs":{},"见":{"docs":{},"的":{"docs":{},"高":{"docs":{},"频":{"docs":{},"题":{"docs":{},"，":{"docs":{},"很":{"docs":{},"有":{"docs":{},"代":{"docs":{},"表":{"docs":{},"性":{"docs":{},"，":{"docs":{},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"都":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"模":{"docs":{},"板":{"docs":{},"加":{"docs":{},"一":{"docs":{},"点":{"docs":{},"变":{"docs":{},"形":{"docs":{},"做":{"docs":{},"出":{"docs":{},"来":{"docs":{},"，":{"docs":{},"刷":{"docs":{},"完":{"docs":{},"后":{"docs":{},"对":{"docs":{},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"题":{"docs":{},"目":{"docs":{},"有":{"docs":{},"基":{"docs":{},"本":{"docs":{},"的":{"docs":{},"认":{"docs":{},"识":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"刷":{"docs":{},"一":{"docs":{},"遍":{"docs":{},"探":{"docs":{},"索":{"docs":{},"卡":{"docs":{},"片":{"docs":{},"，":{"docs":{},"巩":{"docs":{},"固":{"docs":{},"一":{"docs":{},"下":{"docs":{},"一":{"docs":{},"些":{"docs":{},"基":{"docs":{},"础":{"docs":{},"知":{"docs":{},"识":{"docs":{},"点":{"docs":{},"，":{"docs":{},"总":{"docs":{},"结":{"docs":{},"这":{"docs":{},"些":{"docs":{},"知":{"docs":{},"识":{"docs":{},"点":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"剑":{"docs":{},"指":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"找":{"docs":{},"出":{"docs":{},"：":{"docs":{},"包":{"docs":{},"含":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}},"链":{"docs":{},"表":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":10.001003009027082}},"必":{"docs":{},"须":{"docs":{},"要":{"docs":{},"掌":{"docs":{},"握":{"docs":{},"的":{"docs":{},"一":{"docs":{},"些":{"docs":{},"点":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"下":{"docs":{},"面":{"docs":{},"练":{"docs":{},"习":{"docs":{},"题":{"docs":{},"，":{"docs":{},"基":{"docs":{},"本":{"docs":{},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"类":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"都":{"docs":{},"是":{"docs":{},"手":{"docs":{},"到":{"docs":{},"擒":{"docs":{},"来":{"docs":{},"~":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"相":{"docs":{},"关":{"docs":{},"的":{"docs":{},"核":{"docs":{},"心":{"docs":{},"点":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}},"，":{"docs":{},"连":{"docs":{},"接":{"docs":{},"各":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}},"接":{"docs":{},"后":{"docs":{},"分":{"docs":{},"离":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}},"面":{"docs":{},"试":{"docs":{},"资":{"docs":{},"源":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"注":{"docs":{},"意":{"docs":{},"点":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}},"项":{"docs":{},"目":{"docs":{},"地":{"docs":{},"址":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}},"题":{"docs":{},"。":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"基":{"docs":{},"本":{"docs":{},"就":{"docs":{},"满":{"docs":{},"足":{"docs":{},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"面":{"docs":{},"试":{"docs":{},"需":{"docs":{},"要":{"docs":{},"了":{"docs":{},"。":{"docs":{},"第":{"docs":{},"二":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"是":{"docs":{},"按":{"docs":{},"什":{"docs":{},"么":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"刷":{"docs":{},"及":{"docs":{},"如":{"docs":{},"何":{"docs":{},"提":{"docs":{},"高":{"docs":{},"效":{"docs":{},"率":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"也":{"docs":{},"是":{"docs":{},"本":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"目":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"处":{"docs":{},"理":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}},"\ud83c":{"docs":{},"\udf1d":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"\ud83d":{"docs":{},"\udc2e":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"\udc30":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"\udc36":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}},"~":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"\udd25":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"\ud83e":{"docs":{},"\udd81":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}}},"（":{"6":{"docs":{"./":{"ref":"./","tf":0.0055248618784530384}}},"docs":{},"中":{"docs":{},"间":{"docs":{},"必":{"docs":{},"定":{"docs":{},"包":{"docs":{},"含":{"docs":{},"一":{"docs":{},"个":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"）":{"docs":{},"。":{"docs":{},"利":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{},"性":{"docs":{},"质":{"docs":{},"，":{"docs":{},"类":{"docs":{},"似":{"docs":{},"的":{"docs":{},"将":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}}}}}}}}},"起":{"docs":{},"始":{"docs":{},"点":{"docs":{},"在":{"docs":{},"下":{"docs":{},"图":{"docs":{},"中":{"docs":{},"标":{"docs":{},"记":{"docs":{},"为":{"docs":{},"“":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"”":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}}}}}}}}}}},"\"":{"1":{"docs":{},"\"":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"2":{"docs":{},"[":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"]":{"3":{"docs":{},"[":{"docs":{},"c":{"docs":{},"d":{"docs":{},"]":{"docs":{},"e":{"docs":{},"f":{"docs":{},"\"":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}},"docs":{}}}}}}},"3":{"docs":{},"\"":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"[":{"docs":{},"a":{"2":{"docs":{},"[":{"docs":{},"c":{"docs":{},"]":{"docs":{},"]":{"docs":{},"\"":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"docs":{},"]":{"2":{"docs":{},"[":{"docs":{},"b":{"docs":{},"c":{"docs":{},"]":{"docs":{},"\"":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"docs":{}}}}},"docs":{},"\"":{"docs":{},"\"":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0068201193520886615},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}}},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"+":{"docs":{},"\"":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"b":{"docs":{},"c":{"docs":{},"\"":{"docs":{},".":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}},"b":{"docs":{},"c":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{},"c":{"docs":{},"d":{"docs":{},"c":{"docs":{},"d":{"docs":{},"c":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"\"":{"docs":{},".":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"b":{"docs":{},"b":{"docs":{},"\"":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}},"d":{"docs":{},"e":{"docs":{},"\"":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}},"\"":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"其":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}},"c":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"\"":{"docs":{},".":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"\"":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"'":{"0":{"docs":{},"'":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"（":{"docs":{},"水":{"docs":{},"）":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"的":{"docs":{},"二":{"docs":{},"维":{"docs":{},"网":{"docs":{},"格":{"docs":{},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"岛":{"docs":{},"屿":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{},"。":{"docs":{},"一":{"docs":{},"个":{"docs":{},"岛":{"docs":{},"被":{"docs":{},"水":{"docs":{},"包":{"docs":{},"围":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"它":{"docs":{},"是":{"docs":{},"通":{"docs":{},"过":{"docs":{},"水":{"docs":{},"平":{"docs":{},"方":{"docs":{},"向":{"docs":{},"或":{"docs":{},"垂":{"docs":{},"直":{"docs":{},"方":{"docs":{},"向":{"docs":{},"上":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"陆":{"docs":{},"地":{"docs":{},"连":{"docs":{},"接":{"docs":{},"而":{"docs":{},"成":{"docs":{},"的":{"docs":{},"。":{"docs":{},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"假":{"docs":{},"设":{"docs":{},"网":{"docs":{},"格":{"docs":{},"的":{"docs":{},"四":{"docs":{},"个":{"docs":{},"边":{"docs":{},"均":{"docs":{},"被":{"docs":{},"水":{"docs":{},"包":{"docs":{},"围":{"docs":{},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"1":{"docs":{},"'":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"（":{"docs":{},"陆":{"docs":{},"地":{"docs":{},"）":{"docs":{},"和":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"2":{"docs":{},"'":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"3":{"docs":{},"'":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"4":{"docs":{},"'":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"5":{"docs":{},"'":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"6":{"docs":{},"'":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"7":{"docs":{},"'":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"8":{"docs":{},"'":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"9":{"docs":{},"'":{"docs":{},":":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"'":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"*":{"docs":{},"'":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"+":{"docs":{},"'":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"/":{"docs":{},"'":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"]":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"_":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"_":{"docs":{},"'":{"docs":{},":":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}},"'":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}}},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}},"b":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"c":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"e":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"f":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"h":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"i":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"k":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"l":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"o":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"q":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"r":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"s":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"u":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"v":{"docs":{},"'":{"docs":{},"]":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"x":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"y":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"z":{"docs":{},"'":{"docs":{},"]":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"/":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"/":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.1836734693877551},"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.109717868338558},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},"*":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}},"f":{"docs":{},"m":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"f":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"%":{"docs":{},"d":{"docs":{},"%":{"docs":{},"s":{"docs":{},"%":{"docs":{},"c":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.008787346221441126},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},"_":{"docs":{},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497}}}}}}}}}}},"k":{"docs":{},"t":{"docs":{},"h":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341}}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}},"b":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"(":{"docs":{},"n":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}},")":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},":":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"i":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}}}}}}}}}},"n":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.012539184952978056}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"(":{"docs":{},"x":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"x":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.004012036108324975},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.010238907849829351},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},"e":{"docs":{},"。":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"可":{"docs":{},"能":{"docs":{},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.023069207622868605}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.007021063189568706}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0050150451354062184}}}}}}}}}}}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}},"找":{"docs":{},"中":{"docs":{},"点":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.003875968992248062},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},")":{"docs":{},"]":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},")":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}},"(":{"0":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}},")":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}},"1":{"docs":{},")":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}},"docs":{},"n":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}},")":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}},"。":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}},"x":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}}}},"[":{"docs":{},"m":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"n":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"k":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0034100596760443308},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.016722408026755852},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},"v":{"docs":{},":":{"docs":{},"=":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}},"v":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},")":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.008438818565400843}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0034100596760443308},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.010033444816053512},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}},"e":{"docs":{},"y":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}},"=":{"docs":{},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},":":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}},"，":{"docs":{},"删":{"docs":{},"除":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"中":{"docs":{},"的":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}},"o":{"docs":{},"k":{"docs":{},"o":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}},"t":{"docs":{},"h":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"m":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.013039117352056168},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.01288659793814433},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0069767441860465115},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"]":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"\"":{"docs":{},"]":{"docs":{},"=":{"1":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"docs":{}}}}}}}}}}},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"创":{"docs":{},"建":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"则":{"docs":{},"通":{"docs":{},"过":{"docs":{},"索":{"docs":{},"引":{"docs":{},"赋":{"docs":{},"值":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"则":{"docs":{},"通":{"docs":{},"过":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},"赋":{"docs":{},"值":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}},"docs":{}}}}}},"p":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.02040816326530612}},"_":{"docs":{},"o":{"docs":{},"r":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"t":{"docs":{},"h":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"3":{"2":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"docs":{}},"docs":{}}}}}}}}},"c":{"docs":{},"h":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0034100596760443308},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}}}}}}}}}},"x":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},"(":{"0":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}},"docs":{},"d":{"docs":{},"l":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}},"p":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}},"e":{"docs":{},"_":{"docs":{},"l":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}},"l":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"(":{"docs":{},"j":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}}}}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}},"b":{"docs":{},"u":{"docs":{},"y":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.005967604433077579}}}}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}}}}}},"p":{"docs":{},"o":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.003875968992248062}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}}}}}}}},"q":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"docs":{}}},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}},"{":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}},"{":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"u":{"docs":{},"t":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.009404388714733543}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},"m":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},"o":{"docs":{},"i":{"docs":{},"z":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}},"1":{"docs":{},"]":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}},"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"]":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"_":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"n":{"docs":{},"]":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.012448132780082987}}}}}}},"i":{"docs":{},"d":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.022847100175746926}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}},"d":{"docs":{},"l":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"n":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}},"p":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"j":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"]":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"g":{"docs":{},"_":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"[":{"2":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"docs":{}}}}}}}}}},"x":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"f":{"docs":{},"(":{"docs":{},"x":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"_":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"a":{"docs":{},"p":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},"[":{"0":{"docs":{},"]":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}},":":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"docs":{}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}}}},"t":{"docs":{},"r":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.00949367088607595}}}}}},"q":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.007029876977152899},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}},"r":{"docs":{},"e":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.003875968992248062}}},"y":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"物":{"docs":{},"品":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"为":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}},"q":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.005115089514066497}},":":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"docs":{},"[":{"docs":{},"]":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"0":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"docs":{}}}}}}}}}}}}}},"=":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"1":{"0":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"[":{"1":{"docs":{},":":{"docs":{},"]":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}},"docs":{}}}}}}}},".":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}},"v":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},":":{"docs":{},"=":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"docs":{}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}},"i":{"docs":{},"d":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.010238907849829351}},"_":{"2":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}},")":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}}}},"e":{"docs":{},"c":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},",":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},":":{"docs":{},":":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028}}}}}}}}}},">":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028}},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558}}}}}}}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}},"[":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}},"n":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}}}}}}}}},"s":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},")":{"docs":{},":":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}},"}":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.025078369905956112},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}},"两":{"docs":{},"个":{"docs":{},"值":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"相":{"docs":{},"邻":{"docs":{},"元":{"docs":{},"素":{"docs":{},"间":{"docs":{},"的":{"docs":{},"距":{"docs":{},"离":{"docs":{},"为":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"次":{"docs":{},"二":{"docs":{},"分":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"定":{"docs":{},"位":{"docs":{},"行":{"docs":{},"数":{"docs":{},"，":{"docs":{},"接":{"docs":{},"着":{"docs":{},"定":{"docs":{},"位":{"docs":{},"列":{"docs":{},"数":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}},"中":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"，":{"docs":{},"全":{"docs":{},"局":{"docs":{},"变":{"docs":{},"量":{"docs":{},"不":{"docs":{},"要":{"docs":{},"当":{"docs":{},"做":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"刷":{"docs":{},"题":{"docs":{},"检":{"docs":{},"查":{"docs":{},"器":{"docs":{},"会":{"docs":{},"报":{"docs":{},"错":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}},"变":{"docs":{},"量":{"docs":{},"默":{"docs":{},"认":{"docs":{},"是":{"docs":{},"不":{"docs":{},"可":{"docs":{},"变":{"docs":{},"的":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"你":{"docs":{},"需":{"docs":{},"要":{"docs":{},"修":{"docs":{},"改":{"docs":{},"变":{"docs":{},"量":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"在":{"docs":{},"声":{"docs":{},"明":{"docs":{},"时":{"docs":{},"使":{"docs":{},"用":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"）":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"：":{"docs":{},"先":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"再":{"docs":{},"访":{"docs":{},"问":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"再":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"非":{"docs":{},"递":{"docs":{},"归":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}},"所":{"docs":{},"有":{"docs":{},"是":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}},"值":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}},"由":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"都":{"docs":{},"有":{"docs":{},"默":{"docs":{},"认":{"docs":{},"值":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"操":{"docs":{},"作":{"docs":{},"默":{"docs":{},"认":{"docs":{},"值":{"docs":{},"，":{"docs":{},"如":{"docs":{},"：":{"docs":{},"m":{"docs":{},"[":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"切":{"docs":{},"片":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"创":{"docs":{},"建":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}},"栈":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"队":{"docs":{},"列":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}},"删":{"docs":{},"除":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}},"a":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}},"k":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"参":{"docs":{},"数":{"docs":{},"传":{"docs":{},"递":{"docs":{},"，":{"docs":{},"只":{"docs":{},"能":{"docs":{},"修":{"docs":{},"改":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"新":{"docs":{},"增":{"docs":{},"或":{"docs":{},"者":{"docs":{},"删":{"docs":{},"除":{"docs":{},"原":{"docs":{},"始":{"docs":{},"数":{"docs":{},"据":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}}}}}}},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"切":{"docs":{},"片":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}},"考":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"变":{"docs":{},"为":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"和":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}},"空":{"docs":{},"路":{"docs":{},"径":{"docs":{},"开":{"docs":{},"始":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{},"区":{"docs":{},"别":{"docs":{},"：":{"docs":{},"前":{"docs":{},"者":{"docs":{},"一":{"docs":{},"般":{"docs":{},"将":{"docs":{},"最":{"docs":{},"终":{"docs":{},"结":{"docs":{},"果":{"docs":{},"通":{"docs":{},"过":{"docs":{},"指":{"docs":{},"针":{"docs":{},"参":{"docs":{},"数":{"docs":{},"传":{"docs":{},"入":{"docs":{},"，":{"docs":{},"后":{"docs":{},"者":{"docs":{},"一":{"docs":{},"般":{"docs":{},"递":{"docs":{},"归":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"最":{"docs":{},"后":{"docs":{},"合":{"docs":{},"并":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"右":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"高":{"docs":{},"度":{"docs":{},"小":{"docs":{},"于":{"docs":{},"当":{"docs":{},"前":{"docs":{},"高":{"docs":{},"度":{"docs":{},"的":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}},"包":{"docs":{},"含":{"docs":{},"非":{"docs":{},"空":{"docs":{},"单":{"docs":{},"词":{"docs":{},"列":{"docs":{},"表":{"docs":{},"的":{"docs":{},"字":{"docs":{},"典":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}},"总":{"docs":{},"金":{"docs":{},"额":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"非":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}},"值":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"题":{"docs":{},"目":{"docs":{},"类":{"docs":{},"似":{"docs":{},"，":{"docs":{},"更":{"docs":{},"像":{"docs":{},"双":{"docs":{},"指":{"docs":{},"针":{"docs":{},"的":{"docs":{},"升":{"docs":{},"级":{"docs":{},"版":{"docs":{},"，":{"docs":{},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"核":{"docs":{},"心":{"docs":{},"点":{"docs":{},"是":{"docs":{},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"集":{"docs":{},"，":{"docs":{},"根":{"docs":{},"据":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"集":{"docs":{},"来":{"docs":{},"进":{"docs":{},"行":{"docs":{},"处":{"docs":{},"理":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"典":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"符":{"docs":{},"串":{"docs":{},"排":{"docs":{},"序":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"转":{"docs":{},"数":{"docs":{},"字":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}},"中":{"docs":{},"找":{"docs":{},"出":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},"，":{"docs":{},"在":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"形":{"docs":{},"遍":{"docs":{},"历":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}},"将":{"docs":{},"i":{"docs":{},"+":{"1":{"docs":{},"到":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"值":{"docs":{},"覆":{"docs":{},"盖":{"docs":{},"到":{"docs":{},"i":{"docs":{},",":{"docs":{},"然":{"docs":{},"后":{"docs":{},"末":{"docs":{},"尾":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}}}}}}},"docs":{}}},"当":{"docs":{},"前":{"docs":{},"数":{"docs":{},"字":{"docs":{},"添":{"docs":{},"加":{"docs":{},"到":{"docs":{},"路":{"docs":{},"径":{"docs":{},"中":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}},"路":{"docs":{},"径":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"克":{"docs":{},"隆":{"docs":{},"添":{"docs":{},"加":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"集":{"docs":{},"中":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"升":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{},"合":{"docs":{},"并":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"升":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"。":{"docs":{},"新":{"docs":{},"链":{"docs":{},"表":{"docs":{},"是":{"docs":{},"通":{"docs":{},"过":{"docs":{},"拼":{"docs":{},"接":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"其":{"docs":{},"重":{"docs":{},"新":{"docs":{},"排":{"docs":{},"列":{"docs":{},"后":{"docs":{},"变":{"docs":{},"为":{"docs":{},"：":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}},"大":{"docs":{},"问":{"docs":{},"题":{"docs":{},"转":{"docs":{},"化":{"docs":{},"为":{"docs":{},"小":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"递":{"docs":{},"归":{"docs":{},"依":{"docs":{},"次":{"docs":{},"解":{"docs":{},"决":{"docs":{},"各":{"docs":{},"个":{"docs":{},"小":{"docs":{},"问":{"docs":{},"题":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}},"常":{"docs":{},"用":{"docs":{},"库":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}},"技":{"docs":{},"巧":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"于":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"的":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"模":{"docs":{},"板":{"docs":{},"有":{"docs":{},"如":{"docs":{},"下":{"docs":{},"三":{"docs":{},"种":{"docs":{},"形":{"docs":{},"式":{"docs":{},"：":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}},"见":{"docs":{},"错":{"docs":{},"误":{"docs":{},"总":{"docs":{},"结":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"题":{"docs":{},"目":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}},"示":{"docs":{},"例":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}},"型":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"操":{"docs":{},"作":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}},"四":{"docs":{},"种":{"docs":{},"类":{"docs":{},"型":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"处":{"docs":{},"理":{"docs":{},"方":{"docs":{},"式":{"docs":{},"是":{"docs":{},"给":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"考":{"docs":{},"排":{"docs":{},"序":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"规":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"快":{"docs":{},"速":{"docs":{},"入":{"docs":{},"门":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"定":{"docs":{},"位":{"docs":{},"到":{"docs":{},"题":{"docs":{},"目":{"docs":{},"的":{"docs":{},"知":{"docs":{},"识":{"docs":{},"点":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"知":{"docs":{},"识":{"docs":{},"点":{"docs":{},"的":{"docs":{},"通":{"docs":{},"用":{"docs":{},"模":{"docs":{},"板":{"docs":{},"，":{"docs":{},"可":{"docs":{},"能":{"docs":{},"需":{"docs":{},"要":{"docs":{},"根":{"docs":{},"据":{"docs":{},"题":{"docs":{},"目":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"情":{"docs":{},"况":{"docs":{},"做":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"处":{"docs":{},"理":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"开":{"docs":{},"始":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}},"排":{"docs":{},"序":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}}}}}},"最":{"docs":{},"大":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"边":{"docs":{},"界":{"docs":{},"为":{"docs":{},"左":{"docs":{},"边":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"高":{"docs":{},"度":{"docs":{},"小":{"docs":{},"于":{"docs":{},"当":{"docs":{},"前":{"docs":{},"高":{"docs":{},"度":{"docs":{},"的":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}},"乘":{"docs":{},"积":{"docs":{},"子":{"docs":{},"串":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"的":{"docs":{},"那":{"docs":{},"个":{"docs":{},"状":{"docs":{},"态":{"docs":{},"是":{"docs":{},"什":{"docs":{},"么":{"docs":{},"，":{"docs":{},"终":{"docs":{},"点":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}},"优":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}},"算":{"docs":{},"法":{"docs":{},"使":{"docs":{},"用":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"极":{"docs":{},"限":{"docs":{},"的":{"docs":{},"小":{"docs":{},"状":{"docs":{},"态":{"docs":{},"是":{"docs":{},"什":{"docs":{},"么":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}},"长":{"docs":{},"子":{"docs":{},"串":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}},"标":{"docs":{},"准":{"docs":{},"库":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}},"检":{"docs":{},"查":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"栈":{"docs":{},"空":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}},"比":{"docs":{},"较":{"docs":{},"两":{"docs":{},"个":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}},"类":{"docs":{},"型":{"docs":{},"是":{"docs":{},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}},"转":{"docs":{},"换":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"的":{"docs":{},"参":{"docs":{},"数":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}},"拥":{"docs":{},"有":{"docs":{},"所":{"docs":{},"有":{"docs":{},"权":{"docs":{},"的":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}},"，":{"docs":{},"表":{"docs":{},"示":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"子":{"docs":{},"集":{"docs":{},"合":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}},"：":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},"自":{"docs":{},"定":{"docs":{},"义":{"docs":{},"排":{"docs":{},"序":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}},"顶":{"docs":{},"向":{"docs":{},"下":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"路":{"docs":{},"径":{"docs":{},"和":{"docs":{},"为":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}},"设":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"置":{"docs":{},"k":{"docs":{},"v":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}},"计":{"docs":{},"一":{"docs":{},"个":{"docs":{},"支":{"docs":{},"持":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"通":{"docs":{},"过":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"切":{"docs":{},"片":{"docs":{},"模":{"docs":{},"拟":{"docs":{},"栈":{"docs":{},"和":{"docs":{},"队":{"docs":{},"列":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}},"不":{"docs":{},"停":{"docs":{},"的":{"docs":{},"选":{"docs":{},"择":{"docs":{},"，":{"docs":{},"撤":{"docs":{},"销":{"docs":{},"选":{"docs":{},"择":{"docs":{},"，":{"docs":{},"来":{"docs":{},"穷":{"docs":{},"尽":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"性":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"将":{"docs":{},"满":{"docs":{},"足":{"docs":{},"条":{"docs":{},"件":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"返":{"docs":{},"回":{"docs":{},"。":{"docs":{},"答":{"docs":{},"案":{"docs":{},"代":{"docs":{},"码":{"docs":{},"：":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"借":{"docs":{},"用":{"docs":{},"进":{"docs":{},"行":{"docs":{},"转":{"docs":{},"换":{"docs":{},"。":{"docs":{},"这":{"docs":{},"个":{"docs":{},"转":{"docs":{},"换":{"docs":{},"是":{"docs":{},"必":{"docs":{},"要":{"docs":{},"的":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"内":{"docs":{},"部":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"（":{"docs":{},"在":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}},"在":{"docs":{},"接":{"docs":{},"口":{"docs":{},"边":{"docs":{},"界":{"docs":{},"将":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}},"遍":{"docs":{},"历":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"一":{"docs":{},"遍":{"docs":{},"显":{"docs":{},"然":{"docs":{},"不":{"docs":{},"是":{"docs":{},"最":{"docs":{},"优":{"docs":{},"。":{"docs":{},"一":{"docs":{},"个":{"docs":{},"性":{"docs":{},"质":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}},"过":{"docs":{},"程":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"键":{"docs":{},"需":{"docs":{},"要":{"docs":{},"可":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"为":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}}}}}},"长":{"docs":{},"度":{"0":{"docs":{},"为":{"docs":{},"空":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}},"docs":{}}},"队":{"docs":{},"列":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"一":{"docs":{},"般":{"docs":{},"常":{"docs":{},"用":{"docs":{},"于":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"需":{"docs":{},"要":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{},"的":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}}}}}},"习":{"docs":{},"惯":{"docs":{},"使":{"docs":{},"用":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"注":{"docs":{},"意":{"docs":{},"点":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},"断":{"docs":{},"开":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}},"变":{"docs":{},"化":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}},"默":{"docs":{},"认":{"docs":{"introduction/golang.html":{"ref":"introduction/golang.html","tf":0.006802721088435374}}}},"&":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.020618556701030927},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"[":{"docs":{},"i":{"3":{"2":{"docs":{},"]":{"docs":{},",":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},"docs":{}},"docs":{}}},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.012539184952978056}}}}},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},",":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"，":{"docs":{},"代":{"docs":{},"码":{"docs":{},"高":{"docs":{},"效":{"docs":{},"处":{"docs":{},"理":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"无":{"docs":{},"需":{"docs":{},"不":{"docs":{},"必":{"docs":{},"要":{"docs":{},"的":{"docs":{},"克":{"docs":{},"隆":{"docs":{},"或":{"docs":{},"所":{"docs":{},"有":{"docs":{},"权":{"docs":{},"转":{"docs":{},"移":{"docs":{},"。":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"&":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}},"=":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}},"(":{"0":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}},"1":{"0":{"docs":{},"%":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}}}}},"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"4":{"0":{"docs":{},"%":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}}}}},"docs":{}},"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}},"&":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},")":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"，":{"docs":{},"这":{"docs":{},"对":{"docs":{},"于":{"docs":{},"只":{"docs":{},"读":{"docs":{},"操":{"docs":{},"作":{"docs":{},"如":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"来":{"docs":{},"说":{"docs":{},"更":{"docs":{},"为":{"docs":{},"高":{"docs":{},"效":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}},"从":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"(":{"2":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"docs":{}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}},"i":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732}}},"j":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}},"m":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"[":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}},"n":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},"u":{"docs":{},"m":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.007731958762886598}}}}},"最":{"docs":{},"坏":{"docs":{},"情":{"docs":{},"况":{"docs":{},"退":{"docs":{},"化":{"docs":{},"到":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}},"s":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}},"t":{"docs":{},"w":{"docs":{},"i":{"docs":{},"c":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"x":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},",":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}},"docs":{}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}},"+":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.009302325581395349},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.015345268542199489},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.023195876288659795},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.015817223198594025},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.02945736434108527},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.029045643153526972},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.012658227848101266}},"=":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.028481012658227847},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}},"=":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.009404388714733543},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0755813953488372},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.11735205616850551},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.07246376811594203},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.04896907216494845},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0492091388400703},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0802675585284281},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.05581395348837209},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.06224066390041494},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0759493670886076},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.08532423208191127},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.07383966244725738}},"=":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0034883720930232558},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.004012036108324975},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.01619778346121057},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.01054481546572935},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.012403100775193798},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.016877637130801686}},"、":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}},">":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.009404388714733543},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.030232558139534883},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.022066198595787363},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.03410059676044331},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.01804123711340206},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.02460456942003515},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.013377926421404682},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.023255813953488372},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.029045643153526972},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.027303754266211604},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.023206751054852322}},"b":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}},"c":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}},"=":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.005115089514066497},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}},">":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}},"=":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}},"[":{"0":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.007731958762886598},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.006201550387596899}}},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.007029876977152899}}}},"1":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}},"2":{"docs":{},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}},"]":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{}}},"4":{"docs":{},",":{"1":{"docs":{},",":{"8":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{}}},"docs":{}}},"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.005272407732864675}}}},"6":{"docs":{},",":{"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{}}},"docs":{}}},"7":{"docs":{},",":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.010465116279069767},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.012036108324974924},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.00937766410912191},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.015463917525773196},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.01757469244288225},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.012403100775193798},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.02074688796680498},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.013651877133105802},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.016877637130801686}},"]":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0069767441860465115},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.00937766410912191},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.006688963210702341},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.0189873417721519}},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},"}":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}},"(":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"'":{"docs":{},")":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"]":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}},"w":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"docs":{}}}}},"\"":{"2":{"docs":{},"\"":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"docs":{}},"'":{"docs":{},"'":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"+":{"docs":{},"'":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"a":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"d":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"g":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"j":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"m":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"p":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"t":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"w":{"docs":{},"'":{"docs":{},",":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"i":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"]":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"m":{"docs":{},",":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}},"x":{"docs":{},",":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},"]":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"]":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.010465116279069767},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.012036108324974924},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0076726342710997444},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.015463917525773196},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.014059753954305799},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.012403100775193798},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.016597510373443983},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.012658227848101266},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.013651877133105802},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.016877637130801686}}},"`":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"`":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.009404388714733543}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"`":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"、":{"docs":{},"一":{"docs":{},"个":{"docs":{},"起":{"docs":{},"始":{"docs":{},"索":{"docs":{},"引":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}},"，":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"`":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"`":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"，":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"`":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"、":{"docs":{},"一":{"docs":{},"个":{"docs":{},"当":{"docs":{},"前":{"docs":{},"路":{"docs":{},"径":{"docs":{},"的":{"docs":{},"可":{"docs":{},"变":{"docs":{},"引":{"docs":{},"用":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"`":{"docs":{},"，":{"docs":{},"该":{"docs":{},"方":{"docs":{},"法":{"docs":{},"接":{"docs":{},"收":{"docs":{},"一":{"docs":{},"个":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},",":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"e":{"docs":{},"_":{"docs":{},"a":{"docs":{},"i":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}},"p":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},")":{"docs":{},")":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}},":":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.008298755186721992}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}},"{":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.025078369905956112},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}},"}":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}},"|":{"docs":{},"v":{"docs":{},"|":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},"上":{"docs":{},"的":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"文":{"docs":{},"章":{"docs":{},"：":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"模":{"docs":{},"板":{"docs":{},"。":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}},"找":{"docs":{},"到":{"docs":{},"原":{"docs":{},"题":{"docs":{},"。":{"docs":{},"由":{"docs":{},"于":{"docs":{},"做":{"docs":{},"法":{"docs":{},"比":{"docs":{},"较":{"docs":{},"有":{"docs":{},"趣":{"docs":{},"也":{"docs":{},"很":{"docs":{},"有":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"可":{"docs":{},"变":{"docs":{},"性":{"docs":{},"：":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"等":{"docs":{},"于":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}},"同":{"docs":{},"，":{"docs":{},"此":{"docs":{},"题":{"docs":{},"需":{"docs":{},"要":{"docs":{},"返":{"docs":{},"回":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"行":{"docs":{},"分":{"docs":{},"割":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"找":{"docs":{},"到":{"docs":{},"一":{"docs":{},"组":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"使":{"docs":{},"用":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"太":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"i":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"是":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"代":{"docs":{},"码":{"docs":{},"的":{"docs":{},"风":{"docs":{},"格":{"docs":{},"要":{"docs":{},"统":{"docs":{},"一":{"docs":{},"，":{"docs":{},"熟":{"docs":{},"悉":{"docs":{},"各":{"docs":{},"类":{"docs":{},"语":{"docs":{},"言":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"规":{"docs":{},"范":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}},"略":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"以":{"docs":{},"及":{"docs":{},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"终":{"docs":{},"结":{"docs":{},"果":{"docs":{},"的":{"docs":{},"可":{"docs":{},"变":{"docs":{},"引":{"docs":{},"用":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}},"根":{"docs":{},"访":{"docs":{},"问":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"决":{"docs":{},"定":{"docs":{},"是":{"docs":{},"什":{"docs":{},"么":{"docs":{},"遍":{"docs":{},"历":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{},"进":{"docs":{},"行":{"docs":{},"求":{"docs":{},"解":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}},"栈":{"docs":{},"实":{"docs":{},"现":{"docs":{},"队":{"docs":{},"列":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"当":{"docs":{},"中":{"docs":{},"间":{"docs":{},"元":{"docs":{},"素":{"docs":{},"大":{"docs":{},"于":{"docs":{},"右":{"docs":{},"侧":{"docs":{},"元":{"docs":{},"素":{"docs":{},"时":{"docs":{},"意":{"docs":{},"味":{"docs":{},"着":{"docs":{},"拐":{"docs":{},"点":{"docs":{},"即":{"docs":{},"最":{"docs":{},"小":{"docs":{},"元":{"docs":{},"素":{"docs":{},"在":{"docs":{},"右":{"docs":{},"侧":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"在":{"docs":{},"左":{"docs":{},"侧":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"模":{"docs":{},"板":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0035149384885764497}}}},"最":{"docs":{},"小":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}},"场":{"docs":{},"景":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"保":{"docs":{},"证":{"docs":{},"下":{"docs":{},"一":{"docs":{},"次":{"docs":{},"调":{"docs":{},"用":{"docs":{},"时":{"docs":{},"，":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"的":{"docs":{},"范":{"docs":{},"围":{"docs":{},"向":{"docs":{},"前":{"docs":{},"推":{"docs":{},"进":{"docs":{},"了":{"docs":{},"一":{"docs":{},"步":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}},"原":{"docs":{},"始":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"中":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"新":{"docs":{},"值":{"docs":{},"。":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}}}},"做":{"docs":{},"选":{"docs":{},"择":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}},"允":{"docs":{},"许":{"docs":{},"我":{"docs":{},"们":{"docs":{},"使":{"docs":{},"用":{"docs":{},"引":{"docs":{},"用":{"docs":{},"来":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}},"先":{"docs":{},"介":{"docs":{},"绍":{"docs":{},"两":{"docs":{},"个":{"docs":{},"算":{"docs":{},"法":{"docs":{},"题":{"docs":{},"，":{"docs":{},"试":{"docs":{},"试":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"~":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}},"去":{"docs":{},"朝":{"docs":{},"一":{"docs":{},"个":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"方":{"docs":{},"向":{"docs":{},"！":{"docs":{},"先":{"docs":{},"抛":{"docs":{},"出":{"docs":{},"可":{"docs":{},"行":{"docs":{},"解":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"最":{"docs":{},"优":{"docs":{},"解":{"docs":{},"！":{"docs":{},"先":{"docs":{},"解":{"docs":{},"决":{"docs":{},"，":{"docs":{},"再":{"docs":{},"优":{"docs":{},"化":{"docs":{},"！":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"分":{"docs":{},"别":{"docs":{},"处":{"docs":{},"理":{"docs":{},"局":{"docs":{},"部":{"docs":{},"，":{"docs":{},"再":{"docs":{},"合":{"docs":{},"并":{"docs":{},"结":{"docs":{},"果":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}},"从":{"docs":{},"一":{"docs":{},"道":{"docs":{},"题":{"docs":{},"目":{"docs":{},"开":{"docs":{},"始":{"docs":{},"~":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}},"关":{"docs":{},"键":{"docs":{},"字":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"函":{"docs":{},"数":{"docs":{},"应":{"docs":{},"返":{"docs":{},"回":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},"开":{"docs":{},"始":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"从":{"docs":{},"索":{"docs":{},"引":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}},"，":{"docs":{},"i":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"后":{"docs":{},"面":{"docs":{},"会":{"docs":{},"分":{"docs":{},"专":{"docs":{},"题":{"docs":{},"讲":{"docs":{},"解":{"docs":{},"各":{"docs":{},"种":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"、":{"docs":{},"基":{"docs":{},"本":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"模":{"docs":{},"板":{"docs":{},"、":{"docs":{},"和":{"docs":{},"一":{"docs":{},"些":{"docs":{},"高":{"docs":{},"级":{"docs":{},"算":{"docs":{},"法":{"docs":{},"模":{"docs":{},"板":{"docs":{},"，":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"专":{"docs":{},"题":{"docs":{},"都":{"docs":{},"有":{"docs":{},"一":{"docs":{},"些":{"docs":{},"经":{"docs":{},"典":{"docs":{},"练":{"docs":{},"习":{"docs":{},"题":{"docs":{},"，":{"docs":{},"完":{"docs":{},"成":{"docs":{},"所":{"docs":{},"有":{"docs":{},"练":{"docs":{},"习":{"docs":{},"的":{"docs":{},"题":{"docs":{},"后":{"docs":{},"，":{"docs":{},"你":{"docs":{},"对":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"和":{"docs":{},"算":{"docs":{},"法":{"docs":{},"会":{"docs":{},"有":{"docs":{},"新":{"docs":{},"的":{"docs":{},"收":{"docs":{},"获":{"docs":{},"和":{"docs":{},"体":{"docs":{},"会":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"：":{"docs":{},"先":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"再":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"再":{"docs":{},"访":{"docs":{},"问":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"非":{"docs":{},"递":{"docs":{},"归":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}},"入":{"docs":{},"先":{"docs":{},"出":{"docs":{},"，":{"docs":{},"保":{"docs":{},"存":{"docs":{},"临":{"docs":{},"时":{"docs":{},"值":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}},"取":{"docs":{},"第":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}},"检":{"docs":{},"查":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"命":{"docs":{},"名":{"docs":{},"尽":{"docs":{},"量":{"docs":{},"简":{"docs":{},"洁":{"docs":{},"明":{"docs":{},"了":{"docs":{},"，":{"docs":{},"尽":{"docs":{},"量":{"docs":{},"不":{"docs":{},"用":{"docs":{},"数":{"docs":{},"字":{"docs":{},"命":{"docs":{},"名":{"docs":{},"如":{"docs":{},"：":{"docs":{},"i":{"1":{"docs":{},"、":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"1":{"docs":{},"、":{"docs":{},"a":{"1":{"docs":{},"、":{"docs":{},"b":{"2":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"docs":{}}}},"docs":{}}}},"docs":{}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"找":{"docs":{},"到":{"docs":{},"了":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},"是":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028}},"最":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"找":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"、":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"是":{"docs":{},"没":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"使":{"docs":{},"用":{"docs":{},"模":{"docs":{},"板":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"找":{"docs":{},"到":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"为":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},"链":{"docs":{},"表":{"docs":{},"无":{"docs":{},"环":{"docs":{},"，":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}},"题":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"：":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}},"它":{"docs":{},"接":{"docs":{},"受":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"一":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"切":{"docs":{},"片":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}},"定":{"docs":{},"义":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}},"一":{"docs":{},"个":{"docs":{},"公":{"docs":{},"共":{"docs":{},"的":{"docs":{},"静":{"docs":{},"态":{"docs":{},"方":{"docs":{},"法":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}},"内":{"docs":{},"部":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"函":{"docs":{},"数":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}},"动":{"docs":{},"态":{"docs":{},"数":{"docs":{},"组":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028}}}}}}}}}},"思":{"docs":{},"路":{"1":{"docs":{},"：":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}}},"2":{"docs":{},"：":{"docs":{},"复":{"docs":{},"制":{"docs":{},"结":{"docs":{},"点":{"docs":{},"跟":{"docs":{},"在":{"docs":{},"原":{"docs":{},"结":{"docs":{},"点":{"docs":{},"后":{"docs":{},"面":{"docs":{},"，":{"docs":{},"间":{"docs":{},"接":{"docs":{},"维":{"docs":{},"护":{"docs":{},"连":{"docs":{},"接":{"docs":{},"关":{"docs":{},"系":{"docs":{},"，":{"docs":{},"优":{"docs":{},"化":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"建":{"docs":{},"立":{"docs":{},"好":{"docs":{},"新":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"相":{"docs":{},"同":{"docs":{},"则":{"docs":{},"有":{"docs":{},"环":{"docs":{},"，":{"docs":{},"证":{"docs":{},"明":{"docs":{},"：":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"环":{"docs":{},"每":{"docs":{},"走":{"docs":{},"一":{"docs":{},"步":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"距":{"docs":{},"离":{"docs":{},"会":{"docs":{},"减":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.00813953488372093},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.004262574595055414},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.010033444816053512},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},"：":{"docs":{},"核":{"docs":{},"心":{"docs":{},"点":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"给":{"docs":{},"定":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"以":{"docs":{},"当":{"docs":{},"前":{"docs":{},"字":{"docs":{},"符":{"docs":{},"开":{"docs":{},"头":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"否":{"docs":{},"等":{"docs":{},"于":{"docs":{},"目":{"docs":{},"标":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"找":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}},"这":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"应":{"docs":{},"用":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"法":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"，":{"docs":{},"简":{"docs":{},"单":{"docs":{},"来":{"docs":{},"说":{"docs":{},"就":{"docs":{},"是":{"docs":{},"穷":{"docs":{},"尽":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"性":{"docs":{},"，":{"docs":{},"算":{"docs":{},"法":{"docs":{},"模":{"docs":{},"板":{"docs":{},"如":{"docs":{},"下":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{},"。":{"docs":{},"最":{"docs":{},"大":{"docs":{},"路":{"docs":{},"径":{"docs":{},"的":{"docs":{},"可":{"docs":{},"能":{"docs":{},"情":{"docs":{},"况":{"docs":{},"：":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"路":{"docs":{},"径":{"docs":{},"，":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"路":{"docs":{},"径":{"docs":{},"，":{"docs":{},"或":{"docs":{},"通":{"docs":{},"过":{"docs":{},"根":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"路":{"docs":{},"径":{"docs":{},"。":{"docs":{},"其":{"docs":{},"中":{"docs":{},"通":{"docs":{},"过":{"docs":{},"根":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"路":{"docs":{},"径":{"docs":{},"值":{"docs":{},"等":{"docs":{},"于":{"docs":{},"以":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"根":{"docs":{},"结":{"docs":{},"点":{"docs":{},"为":{"docs":{},"端":{"docs":{},"点":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"路":{"docs":{},"径":{"docs":{},"值":{"docs":{},"加":{"docs":{},"以":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"根":{"docs":{},"结":{"docs":{},"点":{"docs":{},"为":{"docs":{},"端":{"docs":{},"点":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"路":{"docs":{},"径":{"docs":{},"值":{"docs":{},"再":{"docs":{},"加":{"docs":{},"上":{"docs":{},"根":{"docs":{},"结":{"docs":{},"点":{"docs":{},"值":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"还":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"有":{"docs":{},"负":{"docs":{},"值":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"即":{"docs":{},"负":{"docs":{},"值":{"docs":{},"路":{"docs":{},"径":{"docs":{},"需":{"docs":{},"要":{"docs":{},"丢":{"docs":{},"弃":{"docs":{},"不":{"docs":{},"取":{"docs":{},"。":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"有":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"或":{"docs":{},"者":{"docs":{},"有":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"，":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"返":{"docs":{},"回":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"在":{"docs":{},"b":{"docs":{},"f":{"docs":{},"s":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"模":{"docs":{},"板":{"docs":{},"上":{"docs":{},"改":{"docs":{},"用":{"docs":{},"双":{"docs":{},"端":{"docs":{},"队":{"docs":{},"列":{"docs":{},"控":{"docs":{},"制":{"docs":{},"输":{"docs":{},"出":{"docs":{},"顺":{"docs":{},"序":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"只":{"docs":{},"是":{"docs":{},"为":{"docs":{},"了":{"docs":{},"完":{"docs":{},"成":{"docs":{},"任":{"docs":{},"务":{"docs":{},"则":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"满":{"docs":{},"足":{"docs":{},"插":{"docs":{},"入":{"docs":{},"条":{"docs":{},"件":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"但":{"docs":{},"此":{"docs":{},"题":{"docs":{},"深":{"docs":{},"挖":{"docs":{},"可":{"docs":{},"以":{"docs":{},"涉":{"docs":{},"及":{"docs":{},"到":{"docs":{},"如":{"docs":{},"何":{"docs":{},"插":{"docs":{},"入":{"docs":{},"并":{"docs":{},"维":{"docs":{},"持":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"并":{"docs":{},"不":{"docs":{},"适":{"docs":{},"合":{"docs":{},"初":{"docs":{},"学":{"docs":{},"者":{"docs":{},"。":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"docs":{}}},"先":{"docs":{},"找":{"docs":{},"到":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"将":{"docs":{},"大":{"docs":{},"于":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"当":{"docs":{},"前":{"docs":{},"结":{"docs":{},"点":{"docs":{},"放":{"docs":{},"置":{"docs":{},"到":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"相":{"docs":{},"遇":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"回":{"docs":{},"到":{"docs":{},"头":{"docs":{},"，":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"步":{"docs":{},"调":{"docs":{},"一":{"docs":{},"致":{"docs":{},"一":{"docs":{},"起":{"docs":{},"移":{"docs":{},"动":{"docs":{},"，":{"docs":{},"相":{"docs":{},"遇":{"docs":{},"点":{"docs":{},"即":{"docs":{},"为":{"docs":{},"入":{"docs":{},"环":{"docs":{},"点":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"找":{"docs":{},"到":{"docs":{},"中":{"docs":{},"点":{"docs":{},"断":{"docs":{},"开":{"docs":{},"，":{"docs":{},"翻":{"docs":{},"转":{"docs":{},"后":{"docs":{},"面":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"合":{"docs":{},"并":{"docs":{},"前":{"docs":{},"后":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}},"通":{"docs":{},"过":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}},"两":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"进":{"docs":{},"行":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"用":{"docs":{},"于":{"docs":{},"存":{"docs":{},"数":{"docs":{},"，":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"用":{"docs":{},"来":{"docs":{},"存":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}},"栈":{"docs":{},"保":{"docs":{},"存":{"docs":{},"原":{"docs":{},"来":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"遇":{"docs":{},"到":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"运":{"docs":{},"算":{"docs":{},"，":{"docs":{},"再":{"docs":{},"推":{"docs":{},"入":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"重":{"docs":{},"复":{"docs":{},"这":{"docs":{},"个":{"docs":{},"过":{"docs":{},"程":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"深":{"docs":{},"度":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"可":{"docs":{},"能":{"docs":{},"性":{"docs":{},"（":{"docs":{},"注":{"docs":{},"意":{"docs":{},"标":{"docs":{},"记":{"docs":{},"已":{"docs":{},"访":{"docs":{},"问":{"docs":{},"元":{"docs":{},"素":{"docs":{},"）":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"头":{"docs":{},"结":{"docs":{},"点":{"docs":{},"可":{"docs":{},"能":{"docs":{},"被":{"docs":{},"删":{"docs":{},"除":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"用":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}},"用":{"docs":{},"两":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"实":{"docs":{},"现":{"docs":{},"或":{"docs":{},"插":{"docs":{},"入":{"docs":{},"元":{"docs":{},"组":{"docs":{},"实":{"docs":{},"现":{"docs":{},"，":{"docs":{},"保":{"docs":{},"证":{"docs":{},"当":{"docs":{},"前":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"在":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"即":{"docs":{},"可":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}}},"利":{"docs":{},"用":{"docs":{},"上":{"docs":{},"一":{"docs":{},"题":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"容":{"docs":{},"易":{"docs":{},"想":{"docs":{},"到":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}},"直":{"docs":{},"接":{"docs":{},"从":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}},"简":{"docs":{},"单":{"docs":{},"想":{"docs":{},"法":{"docs":{},"依":{"docs":{},"次":{"docs":{},"颠":{"docs":{},"倒":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{},"更":{"docs":{},"高":{"docs":{},"级":{"docs":{},"的":{"docs":{},"想":{"docs":{},"法":{"docs":{},"是":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"到":{"docs":{},"处":{"docs":{},"理":{"docs":{},"超":{"docs":{},"长":{"docs":{},"比":{"docs":{},"特":{"docs":{},"串":{"docs":{},"时":{"docs":{},"可":{"docs":{},"能":{"docs":{},"出":{"docs":{},"现":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"，":{"docs":{},"此":{"docs":{},"时":{"docs":{},"如":{"docs":{},"果":{"docs":{},"使":{"docs":{},"用":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"p":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"和":{"docs":{},"上":{"docs":{},"题":{"docs":{},"很":{"docs":{},"类":{"docs":{},"似":{"docs":{},"，":{"docs":{},"相":{"docs":{},"等":{"docs":{},"则":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"取":{"docs":{},"删":{"docs":{},"除":{"docs":{},"、":{"docs":{},"插":{"docs":{},"入":{"docs":{},"、":{"docs":{},"替":{"docs":{},"换":{"docs":{},"最":{"docs":{},"小":{"docs":{},"操":{"docs":{},"作":{"docs":{},"次":{"docs":{},"数":{"docs":{},"的":{"docs":{},"值":{"docs":{},"+":{"1":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"其":{"docs":{},"他":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"此":{"docs":{},"题":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"或":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}},"者":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"撤":{"docs":{},"销":{"docs":{},"选":{"docs":{},"择":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}},"方":{"docs":{},"法":{"docs":{},"搜":{"docs":{},"索":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}},"来":{"docs":{},"处":{"docs":{},"理":{"docs":{},"这":{"docs":{},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"：":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"一":{"docs":{},"个":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}},"程":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"枚":{"docs":{},"举":{"docs":{},"强":{"docs":{},"制":{"docs":{},"进":{"docs":{},"行":{"docs":{},"错":{"docs":{},"误":{"docs":{},"处":{"docs":{},"理":{"docs":{},"，":{"docs":{},"这":{"docs":{},"与":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}},"根":{"docs":{},"据":{"docs":{},"问":{"docs":{},"题":{"docs":{},"定":{"docs":{},"义":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}},"这":{"docs":{},"个":{"docs":{},"特":{"docs":{},"点":{"docs":{},"可":{"docs":{},"以":{"docs":{},"临":{"docs":{},"时":{"docs":{},"保":{"docs":{},"存":{"docs":{},"一":{"docs":{},"些":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"之":{"docs":{},"后":{"docs":{},"用":{"docs":{},"到":{"docs":{},"依":{"docs":{},"次":{"docs":{},"再":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"来":{"docs":{},"，":{"docs":{},"常":{"docs":{},"用":{"docs":{},"于":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"满":{"docs":{},"足":{"docs":{},"结":{"docs":{},"束":{"docs":{},"条":{"docs":{},"件":{"docs":{},":":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}},"不":{"docs":{},"能":{"docs":{},"排":{"docs":{},"序":{"docs":{},"或":{"docs":{},"者":{"docs":{},"交":{"docs":{},"换":{"docs":{},"（":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"以":{"docs":{},"下":{"docs":{},"条":{"docs":{},"件":{"docs":{},"之":{"docs":{},"一":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}},"然":{"docs":{},"后":{"docs":{},"使":{"docs":{},"用":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}},"示":{"docs":{},"例":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.006269592476489028},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}},"空":{"docs":{},"值":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"需":{"docs":{},"要":{"docs":{},"破":{"docs":{},"坏":{"docs":{},"原":{"docs":{},"链":{"docs":{},"表":{"docs":{},"（":{"docs":{},"找":{"docs":{},"中":{"docs":{},"点":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}},"索":{"docs":{},"引":{"docs":{},"开":{"docs":{},"始":{"docs":{},"遍":{"docs":{},"历":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}},"给":{"docs":{},"定":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},"一":{"docs":{},"个":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"其":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"效":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"。":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}},"它":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"高":{"docs":{},"度":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"。":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}}},"找":{"docs":{},"出":{"docs":{},"其":{"docs":{},"最":{"docs":{},"大":{"docs":{},"深":{"docs":{},"度":{"docs":{},"。":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"节":{"docs":{},"点":{"docs":{},"值":{"docs":{},"的":{"docs":{},"锯":{"docs":{},"齿":{"docs":{},"形":{"docs":{},"层":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{},"z":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}},"它":{"docs":{},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"的":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}},"非":{"docs":{},"空":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"最":{"docs":{},"大":{"docs":{},"路":{"docs":{},"径":{"docs":{},"和":{"docs":{},"。":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"除":{"docs":{},"了":{"docs":{},"某":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"以":{"docs":{},"外":{"docs":{},"，":{"docs":{},"其":{"docs":{},"余":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"均":{"docs":{},"出":{"docs":{},"现":{"docs":{},"两":{"docs":{},"次":{"docs":{},"。":{"docs":{},"找":{"docs":{},"出":{"docs":{},"那":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}}},"了":{"docs":{},"三":{"docs":{},"次":{"docs":{},"。":{"docs":{},"找":{"docs":{},"出":{"docs":{},"那":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"你":{"docs":{},"最":{"docs":{},"初":{"docs":{},"位":{"docs":{},"于":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}}}}}}}}}}}}}},"单":{"docs":{},"链":{"docs":{},"表":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"排":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"删":{"docs":{},"除":{"docs":{},"所":{"docs":{},"有":{"docs":{},"含":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"只":{"docs":{},"保":{"docs":{},"留":{"docs":{},"原":{"docs":{},"始":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"，":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"找":{"docs":{},"到":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"，":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"索":{"docs":{},"引":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"它":{"docs":{},"将":{"docs":{},"会":{"docs":{},"被":{"docs":{},"按":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"插":{"docs":{},"入":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{},"特":{"docs":{},"定":{"docs":{},"值":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"环":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"包":{"docs":{},"含":{"docs":{},"一":{"docs":{},"个":{"docs":{},"额":{"docs":{},"外":{"docs":{},"增":{"docs":{},"加":{"docs":{},"的":{"docs":{},"随":{"docs":{},"机":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"该":{"docs":{},"指":{"docs":{},"针":{"docs":{},"可":{"docs":{},"以":{"docs":{},"指":{"docs":{},"向":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"的":{"docs":{},"任":{"docs":{},"何":{"docs":{},"节":{"docs":{},"点":{"docs":{},"或":{"docs":{},"空":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"链":{"docs":{},"表":{"docs":{},"开":{"docs":{},"始":{"docs":{},"入":{"docs":{},"环":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}},"两":{"docs":{},"两":{"docs":{},"交":{"docs":{},"换":{"docs":{},"其":{"docs":{},"中":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"交":{"docs":{},"换":{"docs":{},"后":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}},"由":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}},"经":{"docs":{},"过":{"docs":{},"编":{"docs":{},"码":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"它":{"docs":{},"解":{"docs":{},"码":{"docs":{},"后":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}},"整":{"docs":{},"数":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},"数":{"docs":{},"组":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}},"，":{"docs":{},"求":{"docs":{},"问":{"docs":{},"此":{"docs":{},"数":{"docs":{},"组":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}}},"包":{"docs":{},"含":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{},"的":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"三":{"docs":{},"角":{"docs":{},"形":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"自":{"docs":{},"顶":{"docs":{},"向":{"docs":{},"下":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"路":{"docs":{},"径":{"docs":{},"和":{"docs":{},"。":{"docs":{},"每":{"docs":{},"一":{"docs":{},"步":{"docs":{},"只":{"docs":{},"能":{"docs":{},"移":{"docs":{},"动":{"docs":{},"到":{"docs":{},"下":{"docs":{},"一":{"docs":{},"行":{"docs":{},"中":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{},"上":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}},"，":{"docs":{},"请":{"docs":{},"你":{"docs":{},"找":{"docs":{},"出":{"docs":{},"其":{"docs":{},"中":{"docs":{},"不":{"docs":{},"含":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}}}}}}},"无":{"docs":{},"序":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"其":{"docs":{},"中":{"docs":{},"最":{"docs":{},"长":{"docs":{},"上":{"docs":{},"升":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"所":{"docs":{},"有":{"docs":{},"不":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"全":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}},"能":{"docs":{},"包":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"全":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}}},"组":{"docs":{},"不":{"docs":{},"含":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"数":{"docs":{},"组":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"（":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"）":{"docs":{},"的":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"和":{"docs":{},"要":{"docs":{},"插":{"docs":{},"入":{"docs":{},"树":{"docs":{},"中":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"将":{"docs":{},"值":{"docs":{},"插":{"docs":{},"入":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"。":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"范":{"docs":{},"围":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}},"不":{"docs":{},"同":{"docs":{},"面":{"docs":{},"额":{"docs":{},"的":{"docs":{},"硬":{"docs":{},"币":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"和":{"docs":{},"可":{"docs":{},"选":{"docs":{},"的":{"docs":{},"单":{"docs":{},"词":{"docs":{},"列":{"docs":{},"表":{"docs":{},"，":{"docs":{},"求":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"分":{"docs":{},"割":{"docs":{},"方":{"docs":{},"式":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"股":{"docs":{},"票":{"docs":{},"每":{"docs":{},"天":{"docs":{},"的":{"docs":{},"价":{"docs":{},"格":{"docs":{},"，":{"docs":{},"每":{"docs":{},"天":{"docs":{},"可":{"docs":{},"以":{"docs":{},"买":{"docs":{},"入":{"docs":{},"卖":{"docs":{},"出":{"docs":{},"，":{"docs":{},"买":{"docs":{},"入":{"docs":{},"后":{"docs":{},"必":{"docs":{},"须":{"docs":{},"卖":{"docs":{},"出":{"docs":{},"才":{"docs":{},"可":{"docs":{},"以":{"docs":{},"进":{"docs":{},"行":{"docs":{},"下":{"docs":{},"一":{"docs":{},"次":{"docs":{},"购":{"docs":{},"买":{"docs":{},"，":{"docs":{},"卖":{"docs":{},"出":{"docs":{},"后":{"docs":{},"一":{"docs":{},"天":{"docs":{},"不":{"docs":{},"可":{"docs":{},"以":{"docs":{},"购":{"docs":{},"买":{"docs":{},"，":{"docs":{},"问":{"docs":{},"可":{"docs":{},"以":{"docs":{},"获":{"docs":{},"得":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"利":{"docs":{},"润":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"你":{"docs":{},"无":{"docs":{},"向":{"docs":{},"连":{"docs":{},"通":{"docs":{},"图":{"docs":{},"中":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"引":{"docs":{},"用":{"docs":{},"，":{"docs":{},"请":{"docs":{},"你":{"docs":{},"返":{"docs":{},"回":{"docs":{},"该":{"docs":{},"图":{"docs":{},"的":{"docs":{},"深":{"docs":{},"拷":{"docs":{},"贝":{"docs":{},"（":{"docs":{},"克":{"docs":{},"隆":{"docs":{},"）":{"docs":{},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}},"出":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"。":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"和":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"，":{"docs":{},"找":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"/":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"次":{"docs":{},"/":{"docs":{},"任":{"docs":{},"何":{"docs":{},"一":{"docs":{},"次":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"索":{"docs":{},"引":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"表":{"docs":{},"示":{"docs":{},"一":{"docs":{},"组":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"一":{"docs":{},"个":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"物":{"docs":{},"品":{"docs":{},"的":{"docs":{},"价":{"docs":{},"值":{"docs":{},".":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"大":{"docs":{},"小":{"docs":{},"和":{"docs":{},"数":{"docs":{},"组":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}},"钱":{"docs":{},"或":{"docs":{},"者":{"docs":{},"容":{"docs":{},"量":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"，":{"docs":{},"形":{"docs":{},"成":{"docs":{},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{},"称":{"docs":{},"为":{"docs":{},"斐":{"docs":{},"波":{"docs":{},"那":{"docs":{},"契":{"docs":{},"数":{"docs":{},"列":{"docs":{},"。":{"docs":{},"该":{"docs":{},"数":{"docs":{},"列":{"docs":{},"由":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}},"达":{"docs":{},"式":{"docs":{},"来":{"docs":{},"处":{"docs":{},"理":{"docs":{},"这":{"docs":{},"些":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}},"访":{"docs":{},"问":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}},"下":{"docs":{},"标":{"docs":{},"时":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"访":{"docs":{},"问":{"docs":{},"越":{"docs":{},"界":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}},"说":{"docs":{},"明":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"：":{"docs":{},"后":{"docs":{},"面":{"docs":{},"会":{"docs":{},"深":{"docs":{},"入":{"docs":{},"讲":{"docs":{},"解":{"docs":{},"几":{"docs":{},"个":{"docs":{},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"算":{"docs":{},"法":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"不":{"docs":{},"太":{"docs":{},"了":{"docs":{},"解":{"docs":{},"可":{"docs":{},"以":{"docs":{},"暂":{"docs":{},"时":{"docs":{},"先":{"docs":{},"跳":{"docs":{},"过":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"调":{"docs":{},"用":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}},"转":{"docs":{},"换":{"docs":{},"为":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"成":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"返":{"docs":{},"回":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}},"最":{"docs":{},"终":{"docs":{},"收":{"docs":{},"集":{"docs":{},"到":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"子":{"docs":{},"集":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}}}}}}}}}},"类":{"docs":{},"型":{"docs":{},"为":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}},"插":{"docs":{},"入":{"docs":{},"后":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"的":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}},"值":{"docs":{},"：":{"docs":{},"f":{"docs":{},"[":{"docs":{},"n":{"docs":{},"]":{"docs":{},"或":{"docs":{},"者":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}},"符":{"docs":{},"合":{"docs":{},"要":{"docs":{},"求":{"docs":{},"的":{"docs":{},"最":{"docs":{},"少":{"docs":{},"分":{"docs":{},"割":{"docs":{},"次":{"docs":{},"数":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}},"选":{"docs":{},"择":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}},"列":{"docs":{},"表":{"docs":{},":":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}},"错":{"docs":{},"误":{"docs":{},"处":{"docs":{},"理":{"docs":{},"：":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}}}}}},"问":{"docs":{},"题":{"docs":{"introduction/quickstart.html":{"ref":"introduction/quickstart.html","tf":0.003134796238244514}}},"总":{"docs":{},"共":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"条":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"？":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}}}}},"最":{"docs":{},"多":{"docs":{},"能":{"docs":{},"装":{"docs":{},"入":{"docs":{},"背":{"docs":{},"包":{"docs":{},"的":{"docs":{},"总":{"docs":{},"价":{"docs":{},"值":{"docs":{},"是":{"docs":{},"多":{"docs":{},"大":{"docs":{},"?":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}},"!":{"docs":{},"=":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}}}},"_":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.004651162790697674},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"_":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"_":{"docs":{},"_":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}},"z":{"docs":{},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"给":{"docs":{},"定":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"字":{"docs":{},"串":{"docs":{},"，":{"docs":{},"问":{"docs":{},"总":{"docs":{},"共":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"种":{"docs":{},"译":{"docs":{},"码":{"docs":{},"方":{"docs":{},"法":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"与":{"docs":{},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}},"：":{"docs":{},"先":{"docs":{},"访":{"docs":{},"问":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"再":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"再":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"非":{"docs":{},"递":{"docs":{},"归":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"右":{"docs":{},"边":{"docs":{},"平":{"docs":{},"衡":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}},"移":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.006329113924050633}},"后":{"docs":{},"我":{"docs":{},"们":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"判":{"docs":{},"断":{"docs":{},"第":{"docs":{},"三":{"docs":{},"位":{"docs":{},"、":{"docs":{},"第":{"docs":{},"四":{"docs":{},"位":{"docs":{},"等":{"docs":{},"等":{"docs":{},"，":{"docs":{},"免":{"docs":{},"去":{"docs":{},"了":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"。":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"合":{"docs":{},"并":{"docs":{},"结":{"docs":{},"果":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}}},"层":{"docs":{},"次":{"docs":{},"应":{"docs":{},"用":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}},"遍":{"docs":{},"历":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}}}},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"高":{"docs":{},"度":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}},"子":{"docs":{},"树":{"docs":{},"都":{"docs":{},"是":{"docs":{},"优":{"docs":{},"先":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}},"归":{"docs":{},"并":{"docs":{},"排":{"docs":{},"序":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}},"总":{"docs":{},"结":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}},"找":{"docs":{},"到":{"docs":{},"该":{"docs":{},"树":{"docs":{},"中":{"docs":{},"两":{"docs":{},"个":{"docs":{},"指":{"docs":{},"定":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"最":{"docs":{},"近":{"docs":{},"公":{"docs":{},"共":{"docs":{},"祖":{"docs":{},"先":{"docs":{},"。":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}}}}}},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}}}}},"出":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"那":{"docs":{},"两":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}},"掌":{"docs":{},"握":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"递":{"docs":{},"归":{"docs":{},"与":{"docs":{},"非":{"docs":{},"递":{"docs":{},"归":{"docs":{},"遍":{"docs":{},"历":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}}}}}}}}},"深":{"docs":{},"度":{"docs":{},"搜":{"docs":{},"索":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0017050298380221654}},"（":{"docs":{},"从":{"docs":{},"上":{"docs":{},"到":{"docs":{},"下":{"docs":{},"）":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}}}},"一":{"docs":{},"种":{"docs":{},"，":{"docs":{},"一":{"docs":{},"般":{"docs":{},"用":{"docs":{},"于":{"docs":{},"全":{"docs":{},"排":{"docs":{},"列":{"docs":{},"，":{"docs":{},"穷":{"docs":{},"尽":{"docs":{},"所":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"实":{"docs":{},"际":{"docs":{},"上":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"决":{"docs":{},"策":{"docs":{},"树":{"docs":{},"的":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"过":{"docs":{},"程":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"一":{"docs":{},"般":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"拷":{"docs":{},"贝":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},"理":{"docs":{},"解":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.002325581395348837}}}},"知":{"docs":{},"识":{"docs":{},"点":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}},"适":{"docs":{},"用":{"docs":{},"场":{"docs":{},"景":{"docs":{"data_structure/binary_tree.html":{"ref":"data_structure/binary_tree.html","tf":0.0011627906976744186}}}}}},"#":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0050150451354062184},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.020618556701030927},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.016722408026755852},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164},"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.006825938566552901}}},"x":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.004012036108324975},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.01804123711340206},"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.002325581395348837}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}},":":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0025575447570332483}}},"，":{"docs":{},"对":{"docs":{},"链":{"docs":{},"表":{"docs":{},"进":{"docs":{},"行":{"docs":{},"分":{"docs":{},"隔":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"所":{"docs":{},"有":{"docs":{},"小":{"docs":{},"于":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}},")":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"[":{"0":{"docs":{},"]":{"docs":{},")":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"docs":{}}},"•":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.003009027081243731}}},"、":{"docs":{},"x":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}},"但":{"docs":{},"循":{"docs":{},"环":{"docs":{},"次":{"docs":{},"数":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}},"必":{"docs":{},"然":{"docs":{},"需":{"docs":{},"要":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}},"再":{"docs":{},"反":{"docs":{},"转":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"则":{"docs":{},"中":{"docs":{},"点":{"docs":{},"在":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}},"为":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},"判":{"docs":{},"断":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}},"回":{"docs":{},"文":{"docs":{},"）":{"docs":{},"，":{"docs":{},"在":{"docs":{},"实":{"docs":{},"际":{"docs":{},"应":{"docs":{},"用":{"docs":{},"中":{"docs":{},"往":{"docs":{},"往":{"docs":{},"还":{"docs":{},"需":{"docs":{},"要":{"docs":{},"复":{"docs":{},"原":{"docs":{},"（":{"docs":{},"后":{"docs":{},"半":{"docs":{},"个":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"再":{"docs":{},"反":{"docs":{},"转":{"docs":{},"一":{"docs":{},"次":{"docs":{},"后":{"docs":{},"拼":{"docs":{},"接":{"docs":{},"）":{"docs":{},"，":{"docs":{},"操":{"docs":{},"作":{"docs":{},"比":{"docs":{},"较":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"给":{"docs":{},"出":{"docs":{},"更":{"docs":{},"工":{"docs":{},"程":{"docs":{},"化":{"docs":{},"的":{"docs":{},"做":{"docs":{},"法":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"高":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}},"你":{"docs":{},"是":{"docs":{},"否":{"docs":{},"能":{"docs":{},"够":{"docs":{},"到":{"docs":{},"达":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}},"到":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}},"及":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}},"反":{"docs":{},"转":{"docs":{},"一":{"docs":{},"个":{"docs":{},"单":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}},"从":{"docs":{},"位":{"docs":{},"置":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"后":{"docs":{},"半":{"docs":{},"个":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}},"哑":{"docs":{},"巴":{"docs":{},"节":{"docs":{},"点":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}},"使":{"docs":{},"用":{"docs":{},"场":{"docs":{},"景":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}},"坑":{"docs":{},"点":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"处":{"docs":{},",":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}},"理":{"docs":{},"负":{"docs":{},"数":{"docs":{},"情":{"docs":{},"况":{"docs":{},"稍":{"docs":{},"微":{"docs":{},"有":{"docs":{},"点":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"需":{"docs":{},"要":{"docs":{},"同":{"docs":{},"时":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}},"存":{"docs":{},"储":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"异":{"docs":{},"常":{"docs":{},"处":{"docs":{},"理":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}},"当":{"docs":{},"头":{"docs":{},"节":{"docs":{},"点":{"docs":{},"不":{"docs":{},"确":{"docs":{},"定":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"哑":{"docs":{},"巴":{"docs":{},"节":{"docs":{},"点":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}},"指":{"docs":{},"针":{"docs":{},"比":{"docs":{},"较":{"docs":{},"时":{"docs":{},"直":{"docs":{},"接":{"docs":{},"比":{"docs":{},"较":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"不":{"docs":{},"要":{"docs":{},"用":{"docs":{},"值":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"存":{"docs":{},"在":{"docs":{},"重":{"docs":{},"复":{"docs":{},"值":{"docs":{},"情":{"docs":{},"况":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"连":{"docs":{},"接":{"docs":{},"关":{"docs":{},"系":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}},"插":{"docs":{},"入":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"到":{"docs":{},"排":{"docs":{},"序":{"docs":{},"链":{"docs":{},"表":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}}}}},"字":{"docs":{},"符":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"和":{"docs":{},"常":{"docs":{},"数":{"docs":{},"级":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"下":{"docs":{},"，":{"docs":{},"对":{"docs":{},"链":{"docs":{},"表":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}},"次":{"docs":{},"即":{"docs":{},"可":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}},"循":{"docs":{},"环":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}},"没":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"相":{"docs":{},"交":{"docs":{},"后":{"docs":{},"，":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"需":{"docs":{},"要":{"docs":{},"从":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"开":{"docs":{},"始":{"docs":{},"和":{"docs":{},"头":{"docs":{},"指":{"docs":{},"针":{"docs":{},"一":{"docs":{},"起":{"docs":{},"匀":{"docs":{},"速":{"docs":{},"移":{"docs":{},"动":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"翻":{"docs":{},"转":{"docs":{},"链":{"docs":{},"表":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0020060180541624875}}}}}},"节":{"docs":{},"点":{"docs":{},"辅":{"docs":{},"助":{"docs":{},"（":{"docs":{},"允":{"docs":{},"许":{"docs":{},"头":{"docs":{},"节":{"docs":{},"点":{"docs":{},"可":{"docs":{},"变":{"docs":{},"）":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}},"要":{"docs":{},"求":{"docs":{},"返":{"docs":{},"回":{"docs":{},"这":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}},"记":{"docs":{},"录":{"docs":{},"所":{"docs":{},"有":{"docs":{},"结":{"docs":{},"点":{"docs":{},"判":{"docs":{},"断":{"docs":{},"重":{"docs":{},"复":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}},"出":{"docs":{},"现":{"docs":{},"过":{"docs":{},"的":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}},"请":{"docs":{},"判":{"docs":{},"断":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"回":{"docs":{},"文":{"docs":{},"链":{"docs":{},"表":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}},"较":{"docs":{},"多":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"样":{"docs":{},"可":{"docs":{},"以":{"docs":{},"知":{"docs":{},"道":{"docs":{},"中":{"docs":{},"点":{"docs":{},"的":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"来":{"docs":{},"删":{"docs":{},"除":{"docs":{},"等":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"辅":{"docs":{},"助":{"docs":{},"删":{"docs":{},"除":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}},"非":{"docs":{},"最":{"docs":{},"优":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"data_structure/linked_list.html":{"ref":"data_structure/linked_list.html","tf":0.0010030090270812437}}}}}}}}}}},"*":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.011935208866155157},"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.010309278350515464},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.01317829457364341},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.004219409282700422}},"/":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}},"\\":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"个":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"非":{"docs":{},"负":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"用":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"柱":{"docs":{},"状":{"docs":{},"图":{"docs":{},"中":{"docs":{},"各":{"docs":{},"个":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"。":{"docs":{},"每":{"docs":{},"个":{"docs":{},"柱":{"docs":{},"子":{"docs":{},"彼":{"docs":{},"此":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"，":{"docs":{},"且":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"为":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"等":{"docs":{},"于":{"docs":{},"比":{"docs":{},"它":{"docs":{},"少":{"docs":{},"一":{"docs":{},"个":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}},"元":{"docs":{},"素":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"（":{"docs":{},"升":{"docs":{},"序":{"docs":{},"）":{"docs":{},"整":{"docs":{},"型":{"docs":{},"数":{"docs":{},"组":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"则":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"比":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}}}}}}},"整":{"docs":{},"数":{"docs":{},"的":{"docs":{},"排":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"给":{"docs":{},"定":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}},"，":{"docs":{},"最":{"docs":{},"简":{"docs":{},"单":{"docs":{},"直":{"docs":{},"接":{"docs":{},"，":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}},"人":{"docs":{},"推":{"docs":{},"荐":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"气":{"docs":{},"球":{"docs":{},"排":{"docs":{},"成":{"docs":{},"一":{"docs":{},"行":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"气":{"docs":{},"球":{"docs":{},"上":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"分":{"docs":{},"数":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"戳":{"docs":{},"爆":{"docs":{},"一":{"docs":{},"个":{"docs":{},"气":{"docs":{},"球":{"docs":{},"得":{"docs":{},"分":{"docs":{},"为":{"docs":{},"该":{"docs":{},"气":{"docs":{},"球":{"docs":{},"分":{"docs":{},"数":{"docs":{},"和":{"docs":{},"相":{"docs":{},"邻":{"docs":{},"两":{"docs":{},"气":{"docs":{},"球":{"docs":{},"分":{"docs":{},"数":{"docs":{},"的":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"，":{"docs":{},"求":{"docs":{},"最":{"docs":{},"大":{"docs":{},"得":{"docs":{},"分":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"物":{"docs":{},"品":{"docs":{},"中":{"docs":{},"挑":{"docs":{},"选":{"docs":{},"若":{"docs":{},"干":{"docs":{},"物":{"docs":{},"品":{"docs":{},"装":{"docs":{},"入":{"docs":{},"背":{"docs":{},"包":{"docs":{},"，":{"docs":{},"最":{"docs":{},"多":{"docs":{},"能":{"docs":{},"装":{"docs":{},"多":{"docs":{},"满":{"docs":{},"？":{"docs":{},"假":{"docs":{},"设":{"docs":{},"背":{"docs":{},"包":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"为":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"和":{"docs":{},"一":{"docs":{},"个":{"docs":{},"大":{"docs":{},"小":{"docs":{},"为":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"，":{"docs":{},"装":{"docs":{},"入":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"内":{"docs":{},"最":{"docs":{},"大":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"面":{"docs":{},"积":{"docs":{},"，":{"docs":{},"k":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}},"矮":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}},"出":{"docs":{},"旧":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"典":{"docs":{},"型":{"docs":{},"应":{"docs":{},"用":{"docs":{},"是":{"docs":{},"以":{"docs":{},"线":{"docs":{},"性":{"docs":{},"时":{"docs":{},"间":{"docs":{},"获":{"docs":{},"得":{"docs":{},"区":{"docs":{},"间":{"docs":{},"最":{"docs":{},"大":{"docs":{},"/":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}}},"利":{"docs":{},"用":{"docs":{},"栈":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"队":{"docs":{},"列":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"拓":{"docs":{},"展":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"从":{"docs":{},"数":{"docs":{},"组":{"docs":{},"头":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}},"宽":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"广":{"docs":{},"度":{"docs":{},"搜":{"docs":{},"索":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}},"，":{"docs":{},"类":{"docs":{},"似":{"docs":{},"一":{"docs":{},"层":{"docs":{},"一":{"docs":{},"层":{"docs":{},"的":{"docs":{},"搜":{"docs":{},"索":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"并":{"docs":{},"能":{"docs":{},"在":{"docs":{},"常":{"docs":{},"数":{"docs":{},"时":{"docs":{},"间":{"docs":{},"内":{"docs":{},"检":{"docs":{},"索":{"docs":{},"到":{"docs":{},"最":{"docs":{},"小":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}},"无":{"docs":{},"法":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"求":{"docs":{},"在":{"docs":{},"该":{"docs":{},"柱":{"docs":{},"状":{"docs":{},"图":{"docs":{},"中":{"docs":{},"，":{"docs":{},"能":{"docs":{},"够":{"docs":{},"勾":{"docs":{},"勒":{"docs":{},"出":{"docs":{},"来":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"面":{"docs":{},"积":{"docs":{},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}},"滑":{"docs":{},"动":{"docs":{},"窗":{"docs":{},"口":{"docs":{},"中":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"元":{"docs":{},"素":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}},"可":{"docs":{},"行":{"docs":{},"个":{"docs":{},"数":{"docs":{},"（":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"*":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}},"是":{"docs":{},"否":{"docs":{},"可":{"docs":{},"行":{"docs":{},"（":{"docs":{},"y":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{},"n":{"docs":{},"o":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}},"最":{"docs":{},"大":{"docs":{},"/":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"（":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}},"结":{"docs":{},"果":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}},"波":{"docs":{},"兰":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"计":{"docs":{},"算":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"熟":{"docs":{},"悉":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"使":{"docs":{},"用":{"docs":{},"场":{"docs":{},"景":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}},"队":{"docs":{},"列":{"docs":{},"的":{"docs":{},"使":{"docs":{},"用":{"docs":{},"场":{"docs":{},"景":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}},"简":{"docs":{},"介":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}},"组":{"docs":{},"成":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"，":{"docs":{},"找":{"docs":{},"出":{"docs":{},"每":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"到":{"docs":{},"最":{"docs":{},"近":{"docs":{},"的":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}},"结":{"docs":{},"束":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"，":{"docs":{},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}},"补":{"docs":{},"充":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"：":{"docs":{},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}},"队":{"docs":{},"列":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}},"解":{"docs":{},"释":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}},"法":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}},"容":{"docs":{},"易":{"docs":{},"想":{"docs":{},"但":{"docs":{},"并":{"docs":{},"不":{"docs":{},"是":{"docs":{},"好":{"docs":{},"做":{"docs":{},"法":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"和":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}},"：":{"docs":{},"直":{"docs":{},"接":{"docs":{},"d":{"docs":{},"p":{"docs":{},"无":{"docs":{},"法":{"docs":{},"得":{"docs":{},"到":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"解":{"docs":{},"，":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"间":{"docs":{},"接":{"docs":{},"d":{"docs":{},"p":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}},"输":{"docs":{},"入":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}},"出":{"docs":{},":":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}},"遇":{"docs":{},"到":{"docs":{},"距":{"docs":{},"离":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"需":{"docs":{},"要":{"docs":{},"更":{"docs":{},"新":{"docs":{},"的":{"docs":{},"则":{"docs":{},"更":{"docs":{},"新":{"docs":{},"后":{"docs":{},"重":{"docs":{},"新":{"docs":{},"入":{"docs":{},"队":{"docs":{},"更":{"docs":{},"新":{"docs":{},"后":{"docs":{},"续":{"docs":{},"结":{"docs":{},"点":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}}},"顾":{"docs":{},"名":{"docs":{},"思":{"docs":{},"义":{"docs":{},"，":{"docs":{},"单":{"docs":{},"调":{"docs":{},"栈":{"docs":{},"即":{"docs":{},"是":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"元":{"docs":{},"素":{"docs":{},"有":{"docs":{},"单":{"docs":{},"调":{"docs":{},"性":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"典":{"docs":{},"型":{"docs":{},"应":{"docs":{},"用":{"docs":{},"为":{"docs":{},"用":{"docs":{},"线":{"docs":{},"性":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"找":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"侧":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"大":{"docs":{},"于":{"docs":{},"/":{"docs":{},"小":{"docs":{},"于":{"docs":{},"当":{"docs":{},"前":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"data_structure/stack_queue.html":{"ref":"data_structure/stack_queue.html","tf":0.0008525149190110827}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"%":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}},"@":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"r":{"docs":{},"u":{"docs":{},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"=":{"2":{"5":{"6":{"docs":{},")":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"^":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732}},"=":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.007731958762886598}}}},"y":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},")":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866},"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"~":{"docs":{},"s":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}},"t":{"docs":{},"w":{"docs":{},"i":{"docs":{},"c":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}},"‘":{"1":{"docs":{},"’":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}},"docs":{}},"≤":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.005154639175257732}}},"交":{"docs":{},"换":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}},"位":{"docs":{},"无":{"docs":{},"符":{"docs":{},"号":{"docs":{},"整":{"docs":{},"数":{"docs":{},"的":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"位":{"docs":{},"。":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}},"置":{"docs":{},"占":{"docs":{},"位":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"处":{"docs":{},"理":{"docs":{},"问":{"docs":{},"题":{"docs":{},"时":{"docs":{},"一":{"docs":{},"视":{"docs":{},"同":{"docs":{},"仁":{"docs":{},"，":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"则":{"docs":{},"在":{"docs":{},"原":{"docs":{},"来":{"docs":{},"基":{"docs":{},"础":{"docs":{},"上":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"交":{"docs":{},"换":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"不":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}},"并":{"docs":{},"在":{"docs":{},"重":{"docs":{},"复":{"docs":{},"出":{"docs":{},"现":{"docs":{},"时":{"docs":{},"直":{"docs":{},"接":{"docs":{},"调":{"docs":{},"用":{"docs":{},"结":{"docs":{},"果":{"docs":{},"可":{"docs":{},"以":{"docs":{},"节":{"docs":{},"约":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"，":{"docs":{},"具":{"docs":{},"体":{"docs":{},"可":{"docs":{},"以":{"docs":{},"参":{"docs":{},"考":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"由":{"docs":{},"上":{"docs":{},"面":{"docs":{},"两":{"docs":{},"个":{"docs":{},"推":{"docs":{},"导":{"docs":{},"出":{"docs":{},"：":{"docs":{},"a":{"docs":{},"=":{"docs":{},"a":{"docs":{},"^":{"docs":{},"b":{"docs":{},"^":{"docs":{},"b":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}},"移":{"docs":{},"除":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}},"编":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"输":{"docs":{},"入":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"无":{"docs":{},"符":{"docs":{},"号":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"其":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"表":{"docs":{},"达":{"docs":{},"式":{"docs":{},"中":{"docs":{},"数":{"docs":{},"字":{"docs":{},"位":{"docs":{},"数":{"docs":{},"为":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}}}}}}}}}}}}}}}}}}},"其":{"docs":{},"作":{"docs":{},"用":{"docs":{},"是":{"docs":{},"将":{"docs":{},"输":{"docs":{},"入":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"反":{"docs":{},"转":{"docs":{},"过":{"docs":{},"来":{"docs":{},"。":{"docs":{},"输":{"docs":{},"入":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"以":{"docs":{},"字":{"docs":{},"符":{"docs":{},"数":{"docs":{},"组":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"高":{"docs":{},"效":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"来":{"docs":{},"判":{"docs":{},"断":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}},"范":{"docs":{},"围":{"docs":{},"中":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}},"获":{"docs":{},"取":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}},"颠":{"docs":{},"倒":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"其":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"数":{"docs":{},"中":{"docs":{},"的":{"docs":{"data_structure/binary_op.html":{"ref":"data_structure/binary_op.html","tf":0.002577319587628866}}}}}}}}}}},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"搜":{"docs":{},"索":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}},",":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.007029876977152899}}},"?":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}},"假":{"docs":{},"设":{"docs":{},"按":{"docs":{},"照":{"docs":{},"升":{"docs":{},"序":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"在":{"docs":{},"预":{"docs":{},"先":{"docs":{},"未":{"docs":{},"知":{"docs":{},"的":{"docs":{},"某":{"docs":{},"个":{"docs":{},"点":{"docs":{},"上":{"docs":{},"进":{"docs":{},"行":{"docs":{},"了":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.007029876977152899}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"你":{"docs":{},"正":{"docs":{},"在":{"docs":{},"爬":{"docs":{},"楼":{"docs":{},"梯":{"docs":{},"。":{"docs":{},"需":{"docs":{},"要":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}},"其":{"docs":{},"中":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}},"，":{"docs":{},"模":{"docs":{},"板":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}},"他":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}},"有":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"时":{"docs":{},"用":{"docs":{},"到":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"的":{"docs":{},"题":{"docs":{},"目":{"docs":{},"并":{"docs":{},"不":{"docs":{},"会":{"docs":{},"直":{"docs":{},"接":{"docs":{},"给":{"docs":{},"你":{"docs":{},"一":{"docs":{},"个":{"docs":{},"有":{"docs":{},"序":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"它":{"docs":{},"隐":{"docs":{},"含":{"docs":{},"在":{"docs":{},"题":{"docs":{},"目":{"docs":{},"中":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"你":{"docs":{},"去":{"docs":{},"发":{"docs":{},"现":{"docs":{},"或":{"docs":{},"者":{"docs":{},"构":{"docs":{},"造":{"docs":{},"。":{"docs":{},"一":{"docs":{},"类":{"docs":{},"常":{"docs":{},"见":{"docs":{},"的":{"docs":{},"隐":{"docs":{},"含":{"docs":{},"的":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"是":{"docs":{},"求":{"docs":{},"某":{"docs":{},"个":{"docs":{},"有":{"docs":{},"界":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"最":{"docs":{},"值":{"docs":{},"，":{"docs":{},"以":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"为":{"docs":{},"例":{"docs":{},"，":{"docs":{},"当":{"docs":{},"数":{"docs":{},"据":{"docs":{},"比":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"大":{"docs":{},"时":{"docs":{},"都":{"docs":{},"符":{"docs":{},"合":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"比":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"小":{"docs":{},"时":{"docs":{},"都":{"docs":{},"不":{"docs":{},"符":{"docs":{},"合":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"符":{"docs":{},"合":{"docs":{},"/":{"docs":{},"不":{"docs":{},"符":{"docs":{},"合":{"docs":{},"条":{"docs":{},"件":{"docs":{},"就":{"docs":{},"构":{"docs":{},"成":{"docs":{},"了":{"docs":{},"一":{"docs":{},"种":{"docs":{},"有":{"docs":{},"序":{"docs":{},"关":{"docs":{},"系":{"docs":{},"，":{"docs":{},"再":{"docs":{},"加":{"docs":{},"上":{"docs":{},"数":{"docs":{},"据":{"docs":{},"有":{"docs":{},"界":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"使":{"docs":{},"用":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"来":{"docs":{},"找":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"。":{"docs":{},"注":{"docs":{},"意":{"docs":{},"，":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"界":{"docs":{},"一":{"docs":{},"般":{"docs":{},"也":{"docs":{},"不":{"docs":{},"会":{"docs":{},"在":{"docs":{},"题":{"docs":{},"目":{"docs":{},"中":{"docs":{},"明":{"docs":{},"确":{"docs":{},"提":{"docs":{},"示":{"docs":{},"你":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"你":{"docs":{},"自":{"docs":{},"己":{"docs":{},"去":{"docs":{},"发":{"docs":{},"现":{"docs":{},"。":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"模":{"docs":{},"板":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.005272407732864675},"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}},"每":{"docs":{},"行":{"docs":{},"中":{"docs":{},"的":{"docs":{},"整":{"docs":{},"数":{"docs":{},"从":{"docs":{},"左":{"docs":{},"到":{"docs":{},"右":{"docs":{},"按":{"docs":{},"升":{"docs":{},"序":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"大":{"docs":{},"于":{"docs":{},"前":{"docs":{},"一":{"docs":{},"行":{"docs":{},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"整":{"docs":{},"数":{"docs":{},"。":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}},"次":{"docs":{},"只":{"docs":{},"需":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"中":{"docs":{},"的":{"docs":{},"值":{"docs":{},"必":{"docs":{},"须":{"docs":{},"大":{"docs":{},"于":{"docs":{},"（":{"docs":{},"或":{"docs":{},"等":{"docs":{},"于":{"docs":{},"）":{"docs":{},"存":{"docs":{},"储":{"docs":{},"在":{"docs":{},"其":{"docs":{},"左":{"docs":{},"侧":{"docs":{},"子":{"docs":{},"树":{"docs":{},"中":{"docs":{},"的":{"docs":{},"任":{"docs":{},"何":{"docs":{},"值":{"docs":{},"。":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}}}}}}}}},"小":{"docs":{},"于":{"docs":{},"（":{"docs":{},"或":{"docs":{},"等":{"docs":{},"于":{"docs":{},"）":{"docs":{},"存":{"docs":{},"储":{"docs":{},"在":{"docs":{},"其":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"中":{"docs":{},"的":{"docs":{},"任":{"docs":{},"何":{"docs":{},"值":{"docs":{},"。":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"矩":{"docs":{},"阵":{"docs":{},"中":{"docs":{},"，":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"目":{"docs":{},"标":{"docs":{},"值":{"docs":{},"。":{"docs":{},"该":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"具":{"docs":{},"有":{"docs":{},"如":{"docs":{},"下":{"docs":{},"特":{"docs":{},"性":{"docs":{},"：":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}}}}}}}}}}}}}}}}}}},"隐":{"docs":{},"含":{"docs":{},"的":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{"basic_algorithm/binary_search.html":{"ref":"basic_algorithm/binary_search.html","tf":0.0017574692442882249}}}}}}}}},"十":{"docs":{},"大":{"docs":{},"经":{"docs":{},"典":{"docs":{},"排":{"docs":{},"序":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}},"堆":{"docs":{},"排":{"docs":{},"序":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"大":{"docs":{},"于":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},"，":{"docs":{},"则":{"docs":{},"继":{"docs":{},"续":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}},"小":{"docs":{},"于":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}},"则":{"docs":{},"继":{"docs":{},"续":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}},"结":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"手":{"docs":{},"写":{"docs":{},"快":{"docs":{},"排":{"docs":{},"、":{"docs":{},"归":{"docs":{},"并":{"docs":{},"、":{"docs":{},"堆":{"docs":{},"排":{"docs":{},"序":{"docs":{"basic_algorithm/sort.html":{"ref":"basic_algorithm/sort.html","tf":0.0033444816053511705}}}}}}}}}}}}},".":{"docs":{},".":{"docs":{},".":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248},"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}},"仅":{"docs":{},"目":{"docs":{},"标":{"docs":{},"d":{"docs":{},"p":{"docs":{},",":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"优":{"docs":{},"化":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"你":{"docs":{},"的":{"docs":{},"目":{"docs":{},"标":{"docs":{},"是":{"docs":{},"使":{"docs":{},"用":{"docs":{},"最":{"docs":{},"少":{"docs":{},"的":{"docs":{},"跳":{"docs":{},"跃":{"docs":{},"次":{"docs":{},"数":{"docs":{},"到":{"docs":{},"达":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"能":{"docs":{},"只":{"docs":{},"是":{"docs":{},"单":{"docs":{},"纯":{"docs":{},"的":{"docs":{},"改":{"docs":{},"变":{"docs":{},"节":{"docs":{},"点":{"docs":{},"内":{"docs":{},"部":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"实":{"docs":{},"际":{"docs":{},"的":{"docs":{},"进":{"docs":{},"行":{"docs":{},"节":{"docs":{},"点":{"docs":{},"交":{"docs":{},"换":{"docs":{},"。":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"例":{"docs":{},"如":{"docs":{},"，":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"\"":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}},"给":{"docs":{},"定":{"docs":{},"三":{"docs":{},"角":{"docs":{},"形":{"docs":{},"：":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}},"像":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}},"区":{"docs":{},"别":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"取":{"docs":{},"值":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"另":{"docs":{},"外":{"docs":{},"一":{"docs":{},"种":{"docs":{},"做":{"docs":{},"法":{"docs":{},"：":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{},"b":{"docs":{},")":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}},"四":{"docs":{},"点":{"docs":{},"要":{"docs":{},"素":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"问":{"docs":{},"题":{"docs":{},"是":{"docs":{},"没":{"docs":{},"有":{"docs":{},"交":{"docs":{},"集":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"大":{"docs":{},"部":{"docs":{},"分":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"都":{"docs":{},"用":{"docs":{},"递":{"docs":{},"归":{"docs":{},"或":{"docs":{},"者":{"docs":{},"分":{"docs":{},"治":{"docs":{},"法":{"docs":{},"，":{"docs":{},"即":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"所":{"docs":{},"使":{"docs":{},"用":{"docs":{},"的":{"docs":{},"最":{"docs":{},"少":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"你":{"docs":{},"可":{"docs":{},"以":{"docs":{},"对":{"docs":{},"一":{"docs":{},"个":{"docs":{},"单":{"docs":{},"词":{"docs":{},"进":{"docs":{},"行":{"docs":{},"如":{"docs":{},"下":{"docs":{},"三":{"docs":{},"种":{"docs":{},"操":{"docs":{},"作":{"docs":{},"：":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"字":{"docs":{},"母":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"子":{"docs":{},"串":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}},"替":{"docs":{},"换":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"每":{"docs":{},"次":{"docs":{},"只":{"docs":{},"能":{"docs":{},"向":{"docs":{},"下":{"docs":{},"或":{"docs":{},"者":{"docs":{},"向":{"docs":{},"右":{"docs":{},"移":{"docs":{},"动":{"docs":{},"一":{"docs":{},"步":{"docs":{},"。":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"试":{"docs":{},"图":{"docs":{},"达":{"docs":{},"到":{"docs":{},"网":{"docs":{},"格":{"docs":{},"的":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"（":{"docs":{},"在":{"docs":{},"下":{"docs":{},"图":{"docs":{},"中":{"docs":{},"标":{"docs":{},"记":{"docs":{},"为":{"docs":{},"“":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"”":{"docs":{},"）":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"正":{"docs":{},"数":{"docs":{},"乘":{"docs":{},"积":{"docs":{},"和":{"docs":{},"负":{"docs":{},"数":{"docs":{},"乘":{"docs":{},"积":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}},"灵":{"docs":{},"感":{"docs":{},"，":{"docs":{},"创":{"docs":{},"造":{"docs":{},"力":{"docs":{},"，":{"docs":{},"存":{"docs":{},"储":{"docs":{},"小":{"docs":{},"规":{"docs":{},"模":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}},"状":{"docs":{},"态":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}},"之":{"docs":{},"间":{"docs":{},"的":{"docs":{},"联":{"docs":{},"系":{"docs":{},"，":{"docs":{},"怎":{"docs":{},"么":{"docs":{},"通":{"docs":{},"过":{"docs":{},"小":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"来":{"docs":{},"算":{"docs":{},"大":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"为":{"docs":{},"前":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"现":{"docs":{},"在":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"网":{"docs":{},"格":{"docs":{},"中":{"docs":{},"有":{"docs":{},"障":{"docs":{},"碍":{"docs":{},"物":{"docs":{},"。":{"docs":{},"那":{"docs":{},"么":{"docs":{},"从":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{},"到":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"将":{"docs":{},"会":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"条":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"？":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"等":{"docs":{},"于":{"docs":{},"以":{"docs":{},"第":{"docs":{},"i":{"docs":{},"个":{"docs":{},"数":{"docs":{},"结":{"docs":{},"尾":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"上":{"docs":{},"升":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"容":{"docs":{},"易":{"docs":{},"想":{"docs":{},"但":{"docs":{},"不":{"docs":{},"是":{"docs":{},"最":{"docs":{},"优":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"答":{"docs":{},"案":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"经":{"docs":{},"典":{"docs":{},"的":{"docs":{},"维":{"docs":{},"特":{"docs":{},"比":{"docs":{},"译":{"docs":{},"码":{"docs":{},"类":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"找":{"docs":{},"到":{"docs":{},"状":{"docs":{},"态":{"docs":{},"空":{"docs":{},"间":{"docs":{},"和":{"docs":{},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"移":{"docs":{},"关":{"docs":{},"系":{"docs":{},"即":{"docs":{},"可":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"网":{"docs":{},"格":{"docs":{},"的":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}}}},"，":{"docs":{},"请":{"docs":{},"找":{"docs":{},"出":{"docs":{},"一":{"docs":{},"条":{"docs":{},"从":{"docs":{},"左":{"docs":{},"上":{"docs":{},"角":{"docs":{},"到":{"docs":{},"右":{"docs":{},"下":{"docs":{},"角":{"docs":{},"的":{"docs":{},"路":{"docs":{},"径":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"路":{"docs":{},"径":{"docs":{},"上":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"总":{"docs":{},"和":{"docs":{},"为":{"docs":{},"最":{"docs":{},"小":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"背":{"docs":{},"包":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"价":{"docs":{},"值":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}},"景":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124},"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}},"贪":{"docs":{},"心":{"docs":{},"算":{"docs":{},"法":{"docs":{},"大":{"docs":{},"多":{"docs":{},"题":{"docs":{},"目":{"docs":{},"靠":{"docs":{},"背":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"如":{"docs":{},"果":{"docs":{},"能":{"docs":{},"用":{"docs":{},"动":{"docs":{},"态":{"docs":{},"规":{"docs":{},"划":{"docs":{},"就":{"docs":{},"尽":{"docs":{},"量":{"docs":{},"用":{"docs":{},"动":{"docs":{},"规":{"docs":{},"，":{"docs":{},"不":{"docs":{},"用":{"docs":{},"贪":{"docs":{},"心":{"docs":{},"算":{"docs":{},"法":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"起":{"docs":{},"点":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}},"阶":{"docs":{},"你":{"docs":{},"才":{"docs":{},"能":{"docs":{},"到":{"docs":{},"达":{"docs":{},"楼":{"docs":{},"顶":{"docs":{},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}}}}}}}},"零":{"docs":{},"钱":{"docs":{},"和":{"docs":{},"背":{"docs":{},"包":{"docs":{},"（":{"1":{"0":{"docs":{},"%":{"docs":{},"）":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0007751937984496124}}}}},"docs":{}},"docs":{}}}}}}},"）":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0031007751937984496}},"。":{"docs":{"basic_algorithm/dp.html":{"ref":"basic_algorithm/dp.html","tf":0.0015503875968992248}}}},"介":{"docs":{},"绍":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}},"备":{"docs":{},"忘":{"docs":{},"录":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}},"斐":{"docs":{},"波":{"docs":{},"那":{"docs":{},"契":{"docs":{},"数":{"docs":{},"，":{"docs":{},"通":{"docs":{},"常":{"docs":{},"用":{"docs":{"advanced_algorithm/recursion.html":{"ref":"advanced_algorithm/recursion.html","tf":0.004149377593360996}}}}}}}}}}},":":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}},"因":{"docs":{},"为":{"docs":{},"无":{"docs":{},"重":{"docs":{},"复":{"docs":{},"字":{"docs":{},"符":{"docs":{},"的":{"docs":{},"最":{"docs":{},"长":{"docs":{},"子":{"docs":{},"串":{"docs":{},"是":{"docs":{"advanced_algorithm/slide_window.html":{"ref":"advanced_algorithm/slide_window.html","tf":0.0031645569620253164}}}}}}}}}}}}}}},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"并":{"docs":{},"保":{"docs":{},"证":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{},"不":{"docs":{},"变":{"docs":{},"。":{"docs":{},"返":{"docs":{},"回":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"（":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"被":{"docs":{},"更":{"docs":{},"新":{"docs":{},"）":{"docs":{},"的":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"引":{"docs":{},"用":{"docs":{},"。":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"顺":{"docs":{},"序":{"docs":{},"。":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}},"验":{"docs":{},"证":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{"advanced_algorithm/binary_search_tree.html":{"ref":"advanced_algorithm/binary_search_tree.html","tf":0.0034129692832764505}}}}}}}}},"针":{"docs":{},"对":{"docs":{},"此":{"docs":{},"题":{"docs":{},"的":{"docs":{},"更":{"docs":{},"高":{"docs":{},"级":{"docs":{},"的":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"，":{"docs":{},"利":{"docs":{},"用":{"docs":{},"原":{"docs":{},"有":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"将":{"docs":{},"新":{"docs":{},"选":{"docs":{},"择":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"与":{"docs":{},"当":{"docs":{},"前":{"docs":{},"位":{"docs":{},"置":{"docs":{},"元":{"docs":{},"素":{"docs":{},"交":{"docs":{},"换":{"docs":{},"，":{"docs":{},"回":{"docs":{},"溯":{"docs":{},"完":{"docs":{},"成":{"docs":{},"再":{"docs":{},"换":{"docs":{},"回":{"docs":{},"来":{"docs":{"advanced_algorithm/backtrack.html":{"ref":"advanced_algorithm/backtrack.html","tf":0.002109704641350211}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"length":3184},"corpusTokens":["!=","\"\"\"","\"\"]","\"+\",","\"1\"","\"1\",","\"2[abc]3[cd]ef\",","\"3\",","\"3[a2[c]]\",","\"3[a]2[bc]\",","\"aaabcbc\".","\"abc\"，所以其长度为","\"abcabcbb\"","\"abcabccdcdcdef\".","\"abcde\"","\"accaccacc\".","\"aec\"","#","%","&","&&","&=","&[i32],","&mut","&needle)","&str)","&str,","&str，代码高效处理字符串数据，无需不必要的克隆或所有权转移。。","'","''","'':","'*',","'*':","'+':","',","'.join(route))","'/':","'/']:","'0'","'0')","'0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。","'1'","'1':","'1'（陆地）和","'2':","'3':","'4':","'5':","'6':","'7':","'8':","'9':","':","'__main__':","'b',","'c'],","'e',","'f'],","'h',","'i'],","'k',","'l'],","'n',","'node')","'node':","'o'],","'q',","'r',","'s'],","'treenode')","'treenode',","'treenode':","'u',","'v'],","'x',","'y',","'z']","(","(&str)","(&str)，这对于只读操作如字符串搜索来说更为高效。","((2","(0,","(1,","(10%)","(40%)","(a[0],","(amount","(byte","(char","(heights[i],","(i","(j","(len(s)","(m","(min(height[stack[","(n","(num","(recurs","(right","(s[i]","(seen_onc","(seen_twic","(swap","(x","(x,","(从","(最坏情况退化到","*","*/","+","+=",",","...","/","/*","//","0","0)","0),","0)、f(i,","0,","0,i)","01","0:","0;","0=a^a","0x010884422010)","0x0202020202","0xff)","0，表示在","1","1)","1))","1))^n","1),","1):","1);","1)]","1)}","1,","1.","100","1023","10]","111","11（即，2","11）。","12:","1:","1:r]","1]","1])","1],","1].append(node.val)","1].copy()","1][0]","1][1]","1][1])))","1][2]","1][j]","1][n]","1]]","1]],","1]]:","1d","1、","1、初始化：start=0、end=len","1、右指针右移之后窗口数据更新","1、矩阵类型（10%）","1。","1。下面给出三种","1。假设数组中不存在重复的元素。","1，代码更简洁。同时，如果搜索失败，left","1，空间复杂度","1，若不存在，左边界为第一个大于目标值的索引（插入位置），右边界为最后一个小于目标值的索引","1：strstr","1：中序遍历后检查输出是否有序，缺点是如果不平衡无法提前返回结果，","1：分治法","1：分治法，左边平衡","1：蛮力法，比较每个以","1：需要记录已经选择过的元素，满足条件的结果才进行返回，需要额外","2","2)","2),","2):","2,","200","24","240","26","2:","2]。搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回","2]。编写一个函数来判断给定的目标值是否存在于数组中，若存在返回","2]。请找出其中最小的元素。假设数组中无重复元素。","2]。请找出其中最小的元素。数组中可能包含重复元素。","2d","2、","2、判断窗口是否要收缩","2、序列类型（40%）","2、循环退出条件：start","2，因为交换操作会打乱排序。","2：subset","2：使用后序遍历实现分治法的迭代版本","2：分治法，一个二叉树为合法的二叉搜索树当且仅当左右子树为合法二叉搜索树且根结点值大于右子树最小值小于左子树最大值。缺点是若不用迭代形式实现则无法提前返回，而迭代实现右比较复杂。","2：层序遍历","3","3)","3,","300","32","3:","3、","3、左指针右移之后窗口数据更新","3、比较中点和目标值：a[mid]","3。","3：利用二叉搜索树的性质，根结点为左子树的右边界，右子树的左边界，使用先序遍历自顶向下更新左右子树的边界并检查是否合法，迭代版本实现简单且可以提前返回结果。","3：包含当前","4","4,","4、判断最后两个元素是否符合：a[start]、a[end]","4、根据题意计算结果","5","5,","6,","6]","7,","7]","8","8,","9","9,",":","=","==","==、",">",">=",">>",">>=",">b",">c","?","@functools.lru_cache(maxsize=256)","[","[\"2\",","['']","['+',","['a',","['d',","['g',","['j',","['m',","['p',","['t',","['w',","[(","[(root,","[0,","[0]","[1]","[2,","[2],","[3,4],","[4,","[4,1,8,3]","[6,5,7],","[7,","[[0]","[[float('inf')]","[[treenode(),","[]","[])","[])}","[],","[false]","[i,","[m,","[none]","[nums[0]]","[root.val]","[root]","[row[0]","[start]","[true]","[x,","\\","]","^","^=","_","__init__(self):","__name__","_findmid(self,","_merge(self,","_min(i,","`backtrack`","`nums`","`nums`、一个起始索引","`nums`，","`result`","`result`。","`route`","`route`，","`start`","`start`、一个当前路径的可变引用","`subsets`，该方法接收一个","a(0,","a(i,","a(k+1,","a(x,","a):","a,","a:","a:=make([]int,0)","a:=make([]int,n)","a=0^a=a^0","a=a[:len(a)","a=a^b","a=append(a,x)","a=n&(n","a[0]","a[0]),","a[0],","a[i]","a[i],","a[l]):","a[n]=x","a[r]","a[start]","a[start],","a[start]:","a[swap]","a[swap],","abs(dl","abs(or1)","abs(or2)","abs_result","ac","ac。","address","algorithm","amount:","amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回","anagram","ancestor","answer","answer:","anything,","array","b)","b):","b:=byte(num+'0')","b=a^b","back","backpack","backpack(self,","backpackii(self,","backtrack","backtrack(&nums,","backtrack()","backtrack(0,","backtrack(first=0,","backtrack(i","backtrack(i,","backtrack(idx","backtrack(idx=0):","backtrack(idx=0,","backtrack(next_first)","backtrack(next_first,","backtrack(nums,","backtrack(nums:","backtrack(route=[]):","backtrack(start,","backtrack(选择列表,路径)","backtrack(选择列表,路径):","bad","balanc","balloon","banana","bar","bar。","base","bat、tmd","best","between","bf","bfs,","bfs.append((i,","bfs.append((n_i,","bfs.append(n)","bfs.append(node.left)","bfs.append(node.right)","bfs.popleft()","binari","binzi56","bisect.bisect_left(seq,","bit","bitmask","bitmask)","bitmask^x]","bitwis","bl","bool:","br","break","bst","bst_bfs(a):","build","burst","buy","buy,","buy_then_nothing)","buy_then_nothing),","buy_then_nothing,","byte):","byte转数字","b，a.next","c","c(c++","cach","candidates:","candidates[i]","canjump(self,","case即可","cdf","cdf.append(cdf[","chang","char[]","charact","checkinclusion(self,","chienmi","class","climb","climbstairs(self,","clone","clonegraph(self,","coin","coin]","coinchange(self,","coins:","collect","collections.defaultdict(int)","collections.defaultdict(list)","collections.defaultdict(set)","collections.deque()","collections.deque([(float('","collections.deque([])","collections.deque([root])","collections.deque([start])","combin","combinationsum(self,","common","comp(or1,","complet","compon","connect","consecut","construct","contain","cooldown","copi","copy(a[i:],a[i+1:])","copyrandomlist(self,","copy，多个树之间会共享子树。","count","count,","csharp(c#","csum","cur","cur_max","curr","curr,","curr.neighbors:","curr.next","curr.next,","curr_copi","curr_copy.neighbors.append(visited[n])","current","current,","current.next","current.next.next","current.next.v","current.val:","cycl","d","dart(dart实现),在线文档","dashidhi","decod","decodestring(self,","decor","deep","def","defin","delet","delete(m,\"hello\")","deleteduplicates(self,","deletenode(self,","depth","depth(root):","depth(root.left)","depth(root.right)","dequeue出队","detectcycle(self,","df","dfs.append((i","dfs.append((i,","dfs.append(n)","dfs.pop()","dfs[","dfs_iter(i,","dfs（遍历","dfs，就可以解决","dfs，缓存已经被计算的值（称为：记忆化搜索","diff","diff:","diff=(n&(n","differ","digits:","dist","dist(i","dist(i,","dist[i][j]","dist[i][j])","dist[n_i][n_j]","distanc","dl,","dn_i,","dn_j","down","dp","dp(i)","dp)","dp.append(new)","dp[","dp[0]","dp[0]]","dp[i","dp[i+1]))","dp[i]","dp[j","dp[j]","dp[j])","dp[j][right])","dp[left][j]","dp[left][right]","dp[len(s)","dp_max","dp_max[i]","dp_max[j]","dp_min","dp_min[","dp_min[i","dp_min[j","dp_min[j]","dp_neg","dp_neg)","dp_new","dp_new.append(row[","dp_new.append(row[i+1]","dp_pal","dp_pal[i+1])","dp_pal[i]","dp_po","dp_pos)","dp_pos),","dp_pos,","dp（40%）","dp，dist(i,","dr","dr)","dr,","dummi","dummy,","dummy.next","duplic","e_l","e_l)","e_l,","e_r","e_r)","e_r),","e_r,","easyui","eat","edit","effici","element","element.","elif","else:","empty(self)","empty.","end","end=i)","end=none):","enqueue入队","enumerate(cdf):","enumerate(s):","error","esdeath","evalrpn(self,","evalu","f(0)","f(0,","f(1)","f(n","f(n)","f(n)。","f(x,","f[m][n]","f[n]","fals","false。数组中可能包含重复元素。","fast","fast.next","fast.next.next","fast:","fast=head.next","fast找中点","fib(self,","fib_rec(n","fib_rec(n)","fib_rec(n):","fibonacci","find","find_dup","find_dup:","findanagrams(self,","findkthlargest(self,","findmin(self,","first","float('","float('inf')","float('inf'))]","float('inf'))])","fmt.printf(\"%d%s%c\\n\",","fn","front","func","funciton(x","function","function(x)","function:","functool","furthest","g:","g[0][0]","g[0][i]","g[i][0]","g[i][j]","game","generatetrees(self,","generatetrees_rec(1,","generatetrees_rec(i,","generatetrees_rec(m","getmin(self)","gitbook","gitbook：算法模板","github","go","golang(golang实现)","googl","graph","greedi","grid","grid:","grid[0]:","grid[0][0]","grid[0][i]","grid[i][0]","grid[i][j]","h","h,","h.next","h.next.next","h:","hammingweight(self,","hard","hascycle(self,","haystack","haystack.find(needle).map_or(","head","head):","head,","head,则中点在","head.next","head.next.next","head:","head_next_pair","heap","heap_adjust(a,","heapq.heappushpop(min_heap,","heapq.nlargest(k,","heapsort(a):","height:","height[cur])","height[i]","height[i])","height[stack[","heights)","heights.append(0)","heights:","heights[h]","heights[i]","heights[i]:","heights[j])","heights[k],","heights[stack[","high","histogram","i)","i,","i,0)、","i32","i32)","i32，按照问题的规范。","i],","idx","ii","iii","impl","implement","import","in","in_rout","in_route[i]","in_route[i]:","increas","index","index=i","inf')","inf'),","inord","inorder.append(node.val)","inorder_rec(root):","inorder_rec(root.left)","inorder_rec(root.right)","inordertraversal(self,","insert","insertintobst(self,","instead.","int","int)","int)bool{return","int,","int32","int:","interv","interval.popleft()","interval:","intial","intialize:","introduct","int排序","ip","isbalanced(self,","island","isleft","ispal(0,","ispal(i,","ispalindrome(self,","isvalid","isvalidbst(self,","iter","j","j)","j))","j)),","j),","j):","j)，时间复杂度","j:","java(java","javascript(js+ts实现)","judg","jump","jump(self,","k","k)","k),","k,","k,v:=rang","k:","key","key:","key=lambda","key，删除二叉搜索树中的","koko","kth","kv","l","l)","l,","l1","l1,","l1.next","l1.val","l1:","l2","l2):","l2.next","l2.val:","l2:","l:","l_isvalid,","l_max","l_merg","l_merge.next","l_min","l_min,","largest","largest_path_ends_at(node):","largest_path_ends_at(node.left)","largest_path_ends_at(node.right)","largest_path_ends_at(root)","largestrectanglearea(self,","last","last,","last:","last_idx","last_idx[c]","last_visit","lcs(a,b)","leetcod","leetcode，中间大概花了一个半月(6","left","left,","left:","left_most","left_most]","left_result","left_right","len(a)","len(bfs)","len(candidates)","len(dfs)","len(digits)","len(dp)):","len(g),","len(g[0])","len(grid),","len(grid[0])","len(heights)","len(matrix)","len(matrix),","len(matrix[0])","len(mem[first])","len(min_heap)","len(nums)","len(nums)):","len(peek_copy.neighbors)","len(queue)==0","len(route)","len(s)","len(s)):","len(self.cache)","len(self.out)","len(self.stack)","len(seq)","len(seq):","len(stack)","len(stack)==0","len(t1)","len(target)","len(triangle)","len(w1)","len(w1),","len(w2)","length+1","length+1，返回结果","lengthoflis(self,","lengthoflongestsubstring(self,","letter","lettercombinations(self,","level","level_s","levelorder(self,","levels.append([])","levels[","ligecarrym","link","list","list[int])","list[int],","list[int]:","list[list[int]])","list[list[int]],","list[list[int]]:","list[list[str]])","list[list[str]]:","list[str])","list[str]:","list[treenode]:","listnode()","listnode(next=head)","listnode)","listnode,","listnode:","log","longest","longestcommonsubsequence(self,","longpi1","loop","low,","lower","lower,","lowest","lowestcommonancestor(self,","lvseouren","l→l__n→l→l__n→l→l__n→…","l：l→l→…→l__n→l","m","m):","m,","m.next","m:","m:=make(map[string]int)","m[\"hello\"]=1","make创建长度，则通过索引赋值","make长度为0，则通过append()赋值","map","map_or","match","math","math.maxint32","matrix","matrix:","matrix[i][j]","max","max((j","max(0,","max(buy,","max(dl,","max(dp_max)","max(dp_max[j],","max(e_l,","max(max_area,","max(max_coin,","max(max_length,","max(max_product,","max(num,","max(piles)","max(self.maxdepth(root.left),","max(self.maxpath,","max(sell,","max_area","max_coin","max_length","max_po","max_product","maxcoins(self,","maxdepth(self,","maximum","maxpathsum(self,","maxproduct(self,","maxprofit(self,","maxq","maxq.popleft()","maxq[0]","maxslidingwindow(self,","max{dist(i","mem","mem:","mem[0],","mem[1]","mem[first].append(next_first)","mem[first]:","mem[n]","memoiz","memoization。","memorization,","merg","merge(a,","mergesort","mergetwolists(self,","method","mid","mid.next","middl","min","min(dist[i","min(dist[i][j","min(dp)","min(dp[i],","min(dp[j","min(dp[j],","min(f(x","min(min_cut,","min(min_height,","min(num,","min(result,","min(seg_tree[2","min(x,","min_","min_cut","min_heap","min_heap[0]","min_heap[0]:","min_height","min_height(i,","min_siz","min_str","mincut(self,","mindistance(self,","mineatingspeed(self,","minimum","minimumtotal(self,","minpathsum(self,","minq","minq.append(i)","minq.popleft())","minstack:","minwindow(self,","modifi","more","mut","myqueue:","m{","m，每个物品的大小为","n","n)","n):","n.next","n.next.next","n:","n]，其中","n_i","n_i,","n_j","n_j))","need,","need[c]++;","needl","needle.is_empty()","needle:","needle。","needle），则返回","needle，其中","neighbor","neighbors:","new","next_first","nil","node","node(0)","node(n.val,","node(o.val)","node(p.val,","node(start.val)","node(start.val,","node,","node.left","node.left.v","node.right","node.right.v","node.v","node.val))","node.val,","node.val:","none","none,","none:","none（没有找到","notat","note","notes(java","null/nil","null。","num","num)","num,","num,_:=strconv.atoi()","num2char","num2char[digits[idx]]:","num:","num:=int(s[0]","num_char","num_on","num_ones[i","num_ones[i]","number","numdecodings(self,","numislands(self,","nums)","nums,","nums.append(1)","nums.pop()","nums:","nums[0]","nums[:]","nums[i]","nums[i])","nums[i],","nums[i]:","nums[idx]","nums[idx],","nums[j]","nums[k]","nums[l]","nums[left]","nums[maxq[","nums[mid]","nums[partition_idx]","nums[partition_idx],","nums[pivot_idx]","nums[pivot_idx],","nums[r]","nums[r]:","nums[r]，无法判断移动方向","nums[right]","nums[right],","nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。","nums，返回该数组所有可能的子集（幂集）。","nums，返回该数组所有可能的子集（幂集）。说明：解集不能包含重复的子集。","num。对于","n，则结果第一位一定是","n，生成所有由","n，计算","o","o(1)","o(logn)。","o(n","o(n!)，它不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，复杂度一般都很高。","o(n)","o(n)。","o(n)，想法其实也很简单，即当前数的","o(n^2)","o(n^2))，使用线段树优化后勉强","o(nk)","o(nlogn)，其中使用简单遍历求最小值无法","o,","o.next","o.random","offer","offer。","offer（最后去了宇宙系）。","offer，你值得拥有","ok","onc","op","op,","option","or1","or2","or2))","or2):","order","out","out.next","p","p,","p.next","p.next)","p.next.next","p.next.random","p.random","p.random.next","p:","pair","pal","palindrom","parent","parent,","parent:","parent[o.random].append(n)","parent[o]:","partit","partition(left,","partition(nums,","partition(self,","partition_idx","pass","path","pattern","peek","peek(self)","peek.neighbors:","peek.next","peek.next.next","peek.next.v","peek.right","peek.right:","peek.val:","peek_copi","peek_copy.neighbors.append(visited[n])","permut","permute(self,","permuteunique(self,","phone","piles:","pivot","pivot:","pivot_idx","place","pointer","polish","pop","pop(self)","pop弹出","posit","post","postord","postorder.append(last_visit.val)","postorder_rec(root):","postorder_rec(root.left)","postorder_rec(root.right)","postordertraversal(self,","power","practic","preorder","preorder.append(node.val)","preorder_rec(root):","preorder_rec(root.left)","preorder_rec(root.right)","preordertraversal(self,","prev","prev,","prices:","print(a)","print(heapsort(a))","println(k,v)","problem:","product","pub","pull","push","push(self,","push压入","push，pop，top","put","python","python(python","p，找到","q","q)","q.next","q.next.val","q:","queue","queue.","queue:=make([]int,0)","queue=append(queue,10)","queue=queue[1:]","quick","r","r))","r,","r_isvalid,","r_max","r_min,","rain","random","random.randint(left,","rang","range(","range(1,","range(2,","range(first","range(first,","range(i,","range(idx,","range(j):","range(j+1):","range(left","range(left,","range(len(dp)","range(len(height)):","range(len(heights)):","range(len(nums)","range(len(nums)):","range(len(s)):","range(len(triangle[i])):","range(level_size):","range(m):","range(m)]","range(n","range(n))))","range(n):","range(start,","range[1]","rangebitwiseand(self,","reach","record(c++","rectangl","recurs","refer","remov","reorder","reorderlist(self,","repeat","repo","requests，在下面添加自己的项目仓库，完成自己的算法模板打卡呀~","restor","restoreipaddresses(self,","result","result);","result.add(路径)","result.append('","result.append(''.join(route))","result.append(nums.copy())","result.append(nums[maxq[0]])","result.append(route.copy())","result.append(treenode(m,","result.push(route.clone());","result:","ret","ret,","return","rev_next","rev_rec(s,","revers","reversebetween(self,","reversebits(self,","reversebyte(self,","reverselist(self,","reversestring(self,","right","right)","right):","right:","right_result","rightmost","root","root,","root.left","root.right","root.val:","root:","rotat","rout","route)","route):","route,","route.append(c)","route.append(candidates[i])","route.append(nums[i])","route.append(s[first:next_first])","route.pop()","route.pop();","route.push(nums[i]);","route:","route=[]):","route=[],","route_sum","route_sum)","route_sum=0):","row","run","rust","s","s,","s.append((node.left,","s.append((node.right,","s.append([node,","s.append(node)","s.append(node.left)","s.append(node.right)","s.append(slow.val)","s.appendleft(node.left)","s.appendleft(node.right)","s.pop()","s.pop():","s.popleft()","s1","s1:","s2","s2:","s2，写一个函数来判断","s:","s=\"12345\"","s=s[0:len(s)]，取下限不取上限，数学表示为：[)","s[","s[0]","s[first:next_first]","s[i:j+1]","s[i]","s[i],","s[j]","s[j],","s[l","search","search(self,","search)","searchinsert(self,","searchmatrix(self,","searchrange(self,","search，比较tricki","seen","seen_onc","seen_twic","seg_tre","seg_tree.extend(list(zip(heights,","seg_tree[2","seg_tree[i]","select","select，方式类似于快排，每次","self._findmid(head)","self._merge(self.sortlist(head),","self.cach","self.cache.append(x)","self.cache[0]","self.insertintobst(root.left,","self.insertintobst(root.right,","self.lowestcommonancestor(root.left,","self.lowestcommonancestor(root.right,","self.maxdepth(root.right))","self.maxpath","self.out","self.out.append(self.cache.pop())","self.out.pop()","self.out[","self.preordertraversal(root.left)","self.preordertraversal(root.right)","self.reversebyte(n","self.reverselist(head.next)","self.reverselist(m)","self.sortlist(tail))","self.stack","self.stack.append((x,","self.stack.pop()[0]","self.stack[","self.swappairs(head.next.next)","sell","sell,","sell_then_noth","sell_then_nothing)","seq","seq.append(nums[i])","seq[ins]","sequenc","set(worddict)","shift","shortest","shortestsubarray(self,","singl","singlenumber(self,","slice、map、funct","slide","slidingwindow(str","slow","slow,","slow.next","slow.val","slow:","solut","solution:","solution::str_str_impl(&haystack,","some(index)","some(index)，则转换为","sort","sort.ints([]int{})","sort.slice(s,func(i,j","sort.strings([]string{})","sorted(nums)","sortlist(self,","stack","stack,","stack.append(comp(or1,","stack.append(i)","stack.append(int(token))","stack.append(node)","stack.pop()","stack:","stack:=make([]int,0)","stack=append(stack,10)","stack=stack[:len(stack)","stack[","stack[0]","stack_num","stack_str","stair","star","start","start..nums.len()","start.neighbors:","start.next","start:","start=0,","start_from_left","start_from_left:","state","state:","step","step_max","stock","str)","str,","str:","str:=strconv.itoa()","str:=string(s[0])","str_str(haystack:","str_str_impl","str_str_impl(haystack:","string","string)","string,","string。","strstr","studi","subarray","subsequ","subset","subsets(nums:","subsets(self,","subsetswithdup(self,","substr","sum","sum(0,0","swap","swappairs(self,","swift(swift","s、一个字符串","s，将","t","t)","t1","t1:","t2","t2:","t:","tabl","tail","tail.next","tail.next.next","target","target):","target:","target[c]","target[c]:","target[s2[l]]","target[s[l]]","target，如果目标值存在返回下标，否则返回","test","text1","text2，返回这两个字符串的最长公共子序列。","time","tmp","tmp.next","token","token,","tokens:","top","top(self)","tpxxn","trap","trap(self,","travers","tree","treenode(left=root)","treenode(val)","treenode)","treenode,","treenode:","tri","triangl","triangle:","triangle[","triangle[0]","triangle[1:]:","triangle[i][j]","tricki","true","true,","true:","true，否则返回","two","t，请在字符串","uniqu","uniquepaths(self,","uniquepathswithobstacles(self,","unordered_map","up","up))","up:","updatematrix(self,","upper","us","use_ai","usize,","v","v):","v:=queue[0]","v:=stack[len(stack)","val","val)","val:","valid","valid_2(i):","valid_min_max(node):","valid_min_max(node.left)","valid_min_max(node.right)","valid_s(i,","vec","vec)","vec,","vec::new();","vec>","vec>)","version","visit","visit(root)","visited:","visited[curr]","visited[n]","visited[peek]","visited[start]","void","vs","w1","w1:","w2","w2:","wardseptemb","water","way","whether","window","window;","window[s2[l]]","window[s[l]]","without","word","word1","word2","word2，请你计算出将","wordbreak(self,","worddict","worddict:","worddict，判定","x","x))","x.next","x:","x[0])","x，对链表进行分隔，使得所有小于","y","y)","y),","zigzag","zigzaglevelorder(self,","z，给定输入数字串，问总共有多少种译码方法","{","{start:","{}","|v|","}","~seen_onc","~seen_twic","‘1’","•","≤","✅","⭐️","⭐️~","、x.valu","。","【","】https://github.com/greyireland/algorithm","一个半月","一个字符串的","一个机器人位于一个","一个私有辅助函数，执行实际的计算。","一侧，因此平均复杂度为","一定要保证","一点trick,","上找到原题。由于做法比较有趣也很有","上的","上的文章：二分搜索模板。","不可变性：","不同，此题需要返回所有可行分割而不是找到一组就可以。这里使用","不太一样，i","不是","不等于","两个值","两个相邻元素间的距离为","两次二分，首先定位行数，接着定位列数","个","个人推荐","个元素有序的（升序）整型数组","个元素，如果是则直接返回，如果比","个数等于比它少一个","个整数的排序数组，找出给定目标值","个气球排成一行，每个气球上有一个分数，每次戳爆一个气球得分为该气球分数和相邻两气球分数的乘积，求最大得分","个物品中挑选若干物品装入背包，最多能装多满？假设背包的大小为","个物品和一个大小为","个物品，装入","个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为","个，最简单直接，复杂度","中","中序遍历：先中序遍历左子树，再访问根节点，再中序遍历右子树","中序非递归","中所有是","中的","中的变量默认是不可变的。如果你需要修改变量的值，需要在声明时使用","中）","中，全局变量不要当做返回值，否则刷题检查器会报错","为","为什么这么要这么刷，因为","为位数。但是实际上可以利用动态规划将复杂度降到","为前","为区间","为空，","为节点所组成的二叉搜索树。","二分搜索","二分搜索核心四点要素（必背&理解）","二叉堆","二叉搜索树","二叉搜索树应用","二叉树","二叉树的层序遍历","二叉树相关问题","二叉树遍历","二维dp若只与当前行和上一行有关，可将空间复杂度降到线性","二进制","交换两个数","仅目标dp,","介绍","从","从一个链表中移除一个节点","从下向上（分治法）","从起点走到","代码略","代码的风格要统一，熟悉各类语言的代码规范。","以及一个最终结果的可变引用","以根访问顺序决定是什么遍历","优化","但循环次数小于等于","但必然需要","位无符号整数的二进制位。","位置占位，这样处理问题时一视同仁，初始化则在原来基础上","位置可以交换，所以不用动态规划","你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。","你的目标是使用最少的跳跃次数到达数组的最后一个位置。","使用","使用二分搜索，当中间元素大于右侧元素时意味着拐点即最小元素在右侧，否则在左侧","使用分治法进行求解。时间复杂度","使用场景","使用最小堆，复杂度","使用栈实现队列","使用模板","例如，\"ace\"","例如，给定三角形：","保证下一次调用时，搜索的范围向前推进了一步。","保证原始二叉搜索树中不存在新值。","值","值由","值都有默认值，可以直接操作默认值，如：m[age]++","假设你正在爬楼梯。需要","假设按照升序排序的数组在预先未知的某个点上进行了旋转，例如，数组","做选择","像","允许我们使用引用来操作。","先介绍两个算法题，试试感觉~","先从一道题目开始~","先分别处理局部，再合并结果","先去朝一个解决问题的方向！先抛出可行解，而不是最优解！先解决，再优化！","入门篇","关键字。","其中","其中，模板","其他二叉树","内最大矩形的面积，k","内最矮","再反转","出旧元素，典型应用是以线性时间获得区间最大/最小值。","函数应返回","函数开始搜索，从索引","函数，i","分享一些计算机的经典书籍，大部分对面试应该都有帮助，强烈推荐","分别对应","分割成一些子串，使每个子串都是回文串。","分段处理","分治法","分治法应用","分治法模板","分治法）","切片","则中点在","创建","创建栈","创建队列","初始化","初始化为","删除","删除a[i]，可以用","删除k","删除一个字符","删除用一个","判断","判断你是否能够到达最后一个位置。","判断回文时间复杂度高","判断回文），在实际应用中往往还需要复原（后半个list再反转一次后拼接），操作比较复杂，这里给出更工程化的做法","利用栈","利用队列","到","刷完这些练习题，基本对数据结构和算法有自己的认识体会，基本大部分面试题都能写得出来，国内的","刷题时间可以合理分配，如果打算准备面试了，建议前面两部分","刷题注意点","前序遍历与分治法","前序遍历：先访问根节点，再前序遍历左子树，再前序遍历右子树","前序非递归","剑指","动态规划","动态规划和","动态规划就是把大问题变成小问题，并解决了小问题重复计算的方法称为动态规划","动态规划，自底向上","动态规划，自顶向下","动态规划：是一种解决问题的思想，大规模问题的结果，是由小规模问题的结果运算得来的。动态规划可用递归来实现(memor","动画展示","区别","十大经典排序","半个月刷完，边刷可以边投简历进行面试，遇到不会的不用着急，往模板上套就对了，如果面试管给你提示，那就好好做，不要错过这大好机会~","单调栈的拓展，可以从数组头","卡片","参数传递，只能修改，不能新增或者删除原始数据","参数转换为字符串切片","参考","及","反转一个单链表。","反转从位置","反转后半个list","取值","变为","另外一种做法：maxlen(a,b)","可能变为","可能效果会更好~","右移","右移后我们也可以判断第三位、第四位等等，免去了遍历的时间复杂度。","右边平衡","合并两个链表","合并结果","后入先出，保存临时值","后取第","后序遍历：先后序遍历左子树，再后序遍历右子树，再访问根节点","后序非递归","后检查","后面会分专题讲解各种数据结构、基本的算法模板、和一些高级算法模板，每一个专题都有一些经典练习题，完成所有练习的题后，你对数据结构和算法会有新的收获和体会。","周)左右时间刷完","周）时间刷完，最后剑指","命名尽量简洁明了，尽量不用数字命名如：i1、node1、a1、b2","和","和一个值","和一个包含非空单词列表的字典","和一个总金额","和一个目标值","和一个非空字符串","和分治法区别：前者一般将最终结果通过指针参数传入，后者一般递归返回结果最后合并","和双指针题目类似，更像双指针的升级版，滑动窗口核心点是维护一个窗口集，根据窗口集来进行处理","和右边第一个高度小于当前高度的","和空路径开始。","哑巴节点","哑巴节点使用场景","四点要素","回到最开始的问题，面试到底要刷多少题，其实这个取决于你想进什么样公司，你定的目标如果是国内一线大厂，个人感觉大概","回文dp空间复杂度降为线性","回文dp空间复杂度高","回文二维dp,","回溯法","回溯法（backtrack）常用于遍历列表所有子集，是","回溯：将路径中最后一个数字移除，探索不包含当前数字的其他路径。","因为无重复字符的最长子串是","在","在公共方法内部，将拥有所有权的","在线文档","坑点","基本技能","基本操作","基本用法","基本语法","基础算法篇","堆排序","处,","处理负数情况稍微有点复杂，注意需要同时","备忘录","大于","大，则继续","如果初始化为","如果找到了","如果是","如果是最简单的二分搜索，不需要找第一个、最后一个位置，或者是没有重复元素，可以使用模板","如果没有找到","如果链表无环，则返回","如题","如题：longest","子序列","子问题是没有交集，所以大部分二叉树都用递归或者分治法，即","字典","字形遍历","字符串中找出","字符串出现的第一个位置","字符串和一个","字符串排序","字符串转数字","字符串，在","存储","它接受","它接受一个整数数组的切片","完成","完成打卡","完成计划之后，可以提交","完美二叉树","定义","定义一个公共的静态方法","定义一个内部的递归函数","定义一个动态数组","实现)","实现),","实现),在线文档","实际值：1","宽度优先搜索","对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。","将i+1到末尾的值覆盖到i,然后末尾","将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。","将其重新排列后变为：","将大问题转化为小问题，通过递归依次解决各个小问题","将当前数字添加到路径中。","将当前路径的一个克隆添加到结果集中。","小于","小则继续","小结","层次应用","层次遍历","左右两边高度","左子树都是优先右子树","希望刷完之后，你也能自己总结一套属于自己的刷题模板，有所收获，有所成长~","常用于","常用库","常用技巧","常用的二分搜索模板有如下三种形式：","常考排序","常见二进制操作","常见四种类型","常见处理方式是给","常见错误总结","常见题型","常见题目","常见题目示例","常规","并在重复出现时直接调用结果可以节约时间复杂度，具体可以参考","广度搜索","广度搜索，类似一层一层的搜索","应用","应该都不是问题","开始","开始)。如果不存在，则返回","开始刷","开始刷题时，确实是无从下手，因为从序号开始刷，刷到几道题就遇到","开始，后面的每一项数字都是前面两项数字的和。也就是：","异常处理","归并排序","当头节点不确定的时候，使用哑巴节点","心得体会","快慢指针","快速入门","快速定位到题目的知识点，找到知识点的通用模板，可能需要根据题目特殊情况做特殊处理。","快速开始","快速排序","思路","思路1：hash","思路2：复制结点跟在原结点后面，间接维护连接关系，优化空间复杂度，建立好新","思路2：快慢指针，快慢指针相同则有环，证明：如果有环每走一步快慢指针距离会减","思路：dp(i,","思路：o(1)","思路：先找到","思路：分治法。最大路径的可能情况：左子树的最大路径，右子树的最大路径，或通过根结点的最大路径。其中通过根结点的最大路径值等于以左子树根结点为端点的最大路径值加以右子树根结点为端点的最大路径值再加上根结点值，这里还要考虑有负值的情况即负值路径需要丢弃不取。","思路：分治法，有左子树的公共祖先或者有右子树的公共祖先，就返回子树的祖先，否则返回根节点","思路：利用上一题的解法容易想到","思路：动态规划","思路：和上题很类似，相等则不需要操作，否则取删除、插入、替换最小操作次数的值+1","思路：和其他","思路：在bfs迭代模板上改用双端队列控制输出顺序","思路：如果只是为了完成任务则找到最后一个叶子节点满足插入条件即可。但此题深挖可以涉及到如何插入并维持平衡二叉搜索树的问题，并不适合初学者。","思路：将大于","思路：将当前结点放置到头结点","思路：归并排序，slow","思路：快慢指针，快慢相遇之后，慢指针回到头，快慢指针步调一致一起移动，相遇点即为入环点。","思路：找到中点断开，翻转后面部分，然后合并前后两个链表","思路：核心点就是找第一个","思路：核心点遍历给定字符串字符，判断以当前字符开头字符串是否等于目标字符串","思路：此题","思路：用两个栈实现或插入元组实现，保证当前最小值在栈顶即可","思路：直接从","思路：简单想法依次颠倒即可。更高级的想法是考虑到处理超长比特串时可能出现重复的pattern，此时如果使用","思路：这是一个典型的应用回溯法的题目，简单来说就是穷尽所有可能性，算法模板如下","思路：通过","思路：通过两个栈进行操作，一个用于存数，另一个用来存字符串","思路：通过栈保存原来的元素，遇到表达式弹出运算，再推入结果，重复这个过程","思路：通过深度搜索遍历可能性（注意标记已访问元素）","思路：链表头结点可能被删除，所以用","总结","我们大多数时候，刷算法题可能都是为了准备面试，所以面试的时候需要注意一些点","我看过的","或","或者","所使用的最少操作数你可以对一个单词进行如下三种操作：","所有字母的最小子串","手写快排、归并、堆排序","找出只出现一次的那两个元素。","找到该树中两个指定节点的最近公共祖先。","找到链表的中间节点","持续更新中，觉得还可以的话点个","指针比较时直接比较对象，不要用值比较，链表中有可能存在重复值情况","指针的连接关系","按此","掌握二叉树递归与非递归遍历","排序","排序算法","探索基础卡片，最后快要面试时刷题一遍剑指","推荐的刷题路径","插入一个字符","插入一个节点到排序链表","搜索最好的刷题方式，发现按题型刷题会舒服很多，基本一个类型的题目，一天能做很多，慢慢刷题也不再枯燥，做起来也很有意思，最后也收到不错的","撤销选择","操作，并能在常数时间内检索到最小元素的栈。","收缩","收藏呀","数据结构与算法","数据结构是一种数据的表现形式，如链表、二叉树、栈、队列等都是内存中一段数据表现的形式。","数据结构篇","数组。","数组中的每个元素代表你在该位置可以跳跃的最大长度。","数组有重复时，若","文章大部分是对题目的思路介绍，和一些问题的解析，有了思路还是需要自己手动写写的，所以每篇文章最后都有对应的练习题","斐波那契数，通常用","方法搜索","方法来处理这两种情况：","方法返回一个","方程","无法","时间复杂度和常数级空间复杂度下，对链表进行排序。","是","是为了保证最后找环起始点时移动步数相同，但是作为找中点使用时一般用","是否为","是否为空字符串。","是否为第","是否包含","是否可以被空格拆分为一个或多个在字典中出现的单词。","是否相同，因为有默认值关系，所以需要检查","是基于字符串切片操作的，而不是拥有所有权的","是大部分公司的出题源头，刷完面试中基本会遇到现题或者变形题，基本刷完这三部分，大部分国内公司的面试题应该就没什么问题了~","是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。","是最后一个小于","是最常用的，几乎所有二分查找问题都可以用其中之一轻松实现。模板","是第一个大于","是起始位置。","更新计划","更高级一些，用于解决某些类型的问题。详细的对比可以参考","替换一个字符","最优算法使用","最优，时间复杂度","最大乘积子串","最大最小值","最大的那个状态是什么，终点","最大矩形的边界为左边第一个高度小于当前高度的","最极限的小状态是什么,","最长子串","月份找工作开始，从","有","有时用到二分搜索的题目并不会直接给你一个有序数组，它隐含在题目中，需要你去发现或者构造。一类常见的隐含的二分搜索的问题是求某个有界数据的最值，以最小值为例，当数据比最小值大时都符合条件，比最小值小时都不符合条件，那么符合/不符合条件就构成了一种有序关系，再加上数据有界，我们就可以使用二分搜索来找数据的最小值。注意，数据的界一般也不会在题目中明确提示你，需要你自己去发现。","本书","本质上是图的dfs的一个特例，因此可以用栈来实现","本质上：动态规划）","机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“finish”）。","枚举强制进行错误处理，这与","标准库","栈","栈和队列","栈的特点是后入先出","核心代码","核心内容","核心就是从选择列表里做一个选择，然后一直递归往下搜索答案，如果遇到路径不通，就返回来撤销这次选择。","核心就是：根节点必须在右节点弹出之后，再弹出","核心步骤","根据这个特点可以临时保存一些数据，之后用到依次再弹出来，常用于","根据问题定义，如果","检查","检查栈空","模板","次即可","次循环","正数乘积和负数乘积","此项目是自己找工作时，从","此题主要难点是构造","此题是面试真题，但是没有在","每个节点中的值必须大于（或等于）存储在其左侧子树中的任何值。","每个节点中的值必须小于（或等于）存储在其右子树中的任何值。","每次只需","每行中的整数从左到右按升序排列。","每行的第一个整数大于前一行的最后一个整数。","比较两个","求可行个数（count(*)","求在该柱状图中，能够勾勒出来的矩形的最大面积。","求是否可行（yes/no","求最大/最小值（maximum/minimum","求滑动窗口中的最大元素","求结果","没有重复出现的数字。","波兰表达式计算","注意位运算的优先级","注意此题（貌似）无法使用上题的思路","注意点","注意点：","注意点：如果为了找工作刷题，遇到","注意，此题中使用","注意：此题用来训练递归思维有理论意义，但是实际上算法返回的树并不是","深度搜索","深度搜索一种，一般用于全排列，穷尽所有可能，遍历的过程实际上是一个决策树的遍历过程。时间复杂度一般","深度搜索（从上到下）","深拷贝。","滑动窗口","滑动窗口思想","滑动窗口算法框架","满足不能排序或者交换（can","满足两个条件","满足以下条件之一","满足结束条件:","灵感，创造力，存储小规模问题的结果","然后使用","熟悉栈的使用场景","熟悉队列的使用场景","状态","状态之间的联系，怎么通过小的状态，来算大的状态","状态可以为前","现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？","理解","用于回溯搜索子集。","用于存储最终的所有子集结果。","用于记录当前搜索的路径。","用户","用数组表示的完美二叉树","由上面两个推导出：a=a^b^b","的","的个数（也被称为汉明重量）。","的元素。相较于快排，quick","的元素，如果比","的公共方法，符合问题预期的接口。","的坐标，则","的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。","的子序列，但","的字母异位词的子串，返回这些子串的起始索引。","的实现","的开始位置就匹配到了。","的异常处理机制不同。","的形式给出。","的心得记录，通过各种刷题文章、专栏、视频等总结了一套自己的刷题模板。","的排列。","的数的结果加","的数目并将它们作为数组返回。","的最短路径","的特点，补充在这供参考。","的状态，过程为逆着气球戳爆的顺序","的目的，给你指定了一个刷题的顺序，以及刷题的模板，有了方向和技巧后，就去动手吧~","的空间","的第一次出现。","的索引。","的索引，right","的索引，和最后一个","的索引，所以用两次二分搜索分别找第一次和最后一次的位置，下面是使用模板","的背包.","的节点之前。","的节点都在大于或等于","的节点，放到另外一个链表，最后连接这两个链表","的解法","的解法，k","的起始和结束位置。如果目标值不在数组中，则返回[","的距离。","的链表。请使用一趟扫描完成反转。","的长度。","的题型，会卡住很久，后面去评论区看别人怎么刷题，也去","的题如果有思路就做，没思路先跳过，先把基础打好，再来刷","目录刷一遍，如果中间有题目卡住了先跳过，然后刷题一遍","目标dp","知识点","矩阵中，是否存在一个目标值。该矩阵具有如下特性：","示例","移除最后一个","空值","空间复杂度的解法需要破坏原链表（找中点","第一次相交后，快指针需要从下一个节点开始和头指针一起匀速移动","等于以第i个数结尾的最长上升子序列的长度，容易想但不是最优","答案","简介","算法快速入门","算法思维","算法是一种通用的解决问题的模板或者思路，大部分数据结构都有一套通用的算法模板，所以掌握这些通用的算法模板即可解决各种算法问题。","算法模板","算法模板顾名思义就是刷题的套路模板，掌握了刷题模板之后，刷题也变得好玩起来了~","算法模板，最科学的刷题方式，最快速的刷题路径，一个月从入门到","类型。","类型是byte","类型的参数","类型的拥有所有权的","类型转换","类型，表示所有可能的子集合。","类型：","索引开始遍历","练习","练习题","组成的矩阵，找出每个元素到最近的","经典的维特比译码类问题，找到状态空间和状态转移关系即可","结束的最大矩形，a(i,","给一个有序数组和目标值，找第一次/最后一次/任何一次出现的索引，时间复杂度","给你一个字符串","给你两个单词","给你无向连通图中一个节点的引用，请你返回该图的深拷贝（克隆）。","给出的解法。","给定","给定一个","给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。","给定一个二叉搜索树的根节点","给定一个二叉树,","给定一个二叉树，判断其是否是一个有效的二叉搜索树。","给定一个二叉树，判断它是否是高度平衡的二叉树。","给定一个二叉树，找出其最大深度。","给定一个二叉树，返回其节点值的锯齿形层次遍历。z","给定一个二叉树，返回它的中序遍历。","给定一个包含","给定一个包含非负整数的","给定一个单链表","给定一个可包含重复数字的序列，返回所有不重复的全排列。","给定一个可能包含重复元素的整数数组","给定一个字符串","给定一个字符串，请你找出其中不含有重复字符的","给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。","给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中","给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。","给定一个整数","给定一个整数数组","给定一个整数数组，求问此数组是不是一个","给定一个无序的整数数组，找到其中最长上升子序列的长度。","给定一个没有重复数字的序列，返回其所有可能的全排列。","给定一个由","给定一个经过编码的字符串，返回它解码后的字符串。","给定一个链表和一个特定值","给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。","给定一个链表，判断链表中是否有环。","给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。","给定一个链表，返回链表开始入环的第一个节点。","给定一个非空二叉树，返回其最大路径和。","给定一个非空字符串","给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。","给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。","给定一个非负整数","给定一个非负整数数组，你最初位于数组的第一个位置。","给定一组不含重复元素的整数数组","给定不同面额的硬币","给定两个字符串","给定二叉搜索树（bst）的根节点和要插入树中的值，将值插入二叉搜索树。","给定字符串和可选的单词列表，求字符串所有的分割方式","给定数组","给定股票每天的价格，每天可以买入卖出，买入后必须卖出才可以进行下一次购买，卖出后一天不可以购买，问可以获得的最大利润","给定范围","编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组","编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为","编写一个高效的算法来判断","网格的左上角","网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。","翻转链表","背包的最大价值","背景","自定义排序","自顶向下的最小路径和为","至","节点辅助（允许头节点可变）","范围中的每个数字","获取最后一个","补充","补充：单调栈","补充：单调队列","表示一组整数，返回一个","表示每个物品的价值.","表示每个物品的大小和数组","表示钱或者容量","表示，形成的序列称为斐波那契数列。该数列由","表达式来处理这些枚举的值。","要求返回这个链表的","解法","解法容易想但并不是好做法，因为和","解法：直接dp无法得到o(n)的解，考虑间接dp","解释:","记录出现过的","记录所有结点判断重复，空间复杂度","设","设置kv","设计一个支持","访问","访问下标时，不能访问越界","语言入门","语言圣经","说明","说明：后面会深入讲解几个典型的回溯算法问题，如果当前不太了解可以暂时先跳过","请判断一个链表是否为回文链表。","调用","贪心算法大多题目靠背答案，所以如果能用动态规划就尽量用动规，不用贪心算法","起点","转换为","转换成","较多，因为这样可以知道中点的上一个节点，可以用来删除等操作。","辅助删除","输入:","输出:","返回","返回值：f[n]或者","返回插入后二叉搜索树的根节点。","返回最终收集到的所有子集结果。","返回符合要求的最少分割次数。","返回类型为","这一步确保了在每次递归调用中，当前探索的路径都会被记录下来。","这个函数被设计为使用字符串切片","这个模板主要是介绍了一些通用的刷题模板，以及一些常见问题，如到底要刷多少题，按什么顺序来刷题，如何提高刷题效率等。","这种方法避免了获取函数参数的所有权，","这种是有重复走的情况，子问题是有交集，所以可以用动态规划来解决","适用场景","选择","选择列表:","递归","递归和动规关系","递归实现二叉树遍历非常简单，不同顺序区别仅在于访问父结点顺序","递归思维","递归是一种程序的实现方式：函数的自我调用","递归模板","递归调用","递归返回条件","递归返回条件为","通过","通过不停的选择，撤销选择，来穷尽所有可能性，最后将满足条件的结果返回。答案代码：","通过借用进行转换。这个转换是必要的，因为内部逻辑（在","通过切片模拟栈和队列","通过在接口边界将","遇到距离最小值需要更新的则更新后重新入队更新后续结点","遍历","遍历一遍显然不是最优。一个性质，如果","遍历过程","里面找出：包含","里面的题目是按类型归类，都是一些常见的高频题，很有代表性，大部分都是可以用模板加一点变形做出来，刷完后对大部分题目有基本的认识。然后刷一遍探索卡片，巩固一下一些基础知识点，总结这些知识点。最后剑指","针对此题的更高级的回溯，利用原有的数组，每次回溯将新选择的元素与当前位置元素交换，回溯完成再换回来","链接后分离","链表","链表必须要掌握的一些点，通过下面练习题，基本大部分的链表类的题目都是手到擒来~","链表相关的核心点","链表，连接各个元素","错误处理：","键需要可比较，不能为","长度0为空","问总共有多少条不同的路径？","问最多能装入背包的总价值是多大?","问题","队列","队列一般常用于","阶你才能到达楼顶。","隐含的二分搜索","零钱和背包（10%）","需要习惯使用","需要变化的地方","需要断开中间节点","需要注意点","需要遍历，其中的","非最优，时间复杂度","面试注意点","面试资源","项目地址","顺序。","顾名思义，单调栈即是栈中元素有单调性的栈，典型应用为用线性的时间复杂度找左右两侧第一个大于/小于当前元素的位置。","题。","题基本就满足大部分面试需要了。第二个问题是按什么顺序刷及如何提高效率，这个也是本","题目","题，注意处理edg","颠倒给定的","验证二叉搜索树","默认","🌝","🐮","🐰","🐶","🐶~","🔥","🦁","（6","（中间必定包含一个偶数）。利用这个性质，类似的将","（起始点在下图中标记为“start”","）","）。","，写一个函数搜索","，计算其二进制数中的"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"算法模板\n\n算法模板，最科学的刷题方式，最快速的刷题路径，一个月从入门到 offer，你值得拥有 🐶~\n算法模板顾名思义就是刷题的套路模板，掌握了刷题模板之后，刷题也变得好玩起来了~\n\n此项目是自己找工作时，从 0 开始刷 LeetCode 的心得记录，通过各种刷题文章、专栏、视频等总结了一套自己的刷题模板。\n这个模板主要是介绍了一些通用的刷题模板，以及一些常见问题，如到底要刷多少题，按什么顺序来刷题，如何提高刷题效率等。\n\n在线文档\n在线文档 Gitbook：算法模板 🔥\n核心内容\n入门篇 🐶\n\ngo 语言入门\n算法快速入门\n\n数据结构篇 🐰\n\n二叉树\n链表\n栈和队列\n二进制\n\n基础算法篇 🐮\n\n二分搜索\n排序算法\n动态规划\n\n算法思维 🦁\n\n递归思维\n滑动窗口思想\n二叉搜索树\n回溯法\n\n心得体会\n文章大部分是对题目的思路介绍，和一些问题的解析，有了思路还是需要自己手动写写的，所以每篇文章最后都有对应的练习题\n刷完这些练习题，基本对数据结构和算法有自己的认识体会，基本大部分面试题都能写得出来，国内的 BAT、TMD 应该都不是问题\n从 4 月份找工作开始，从 0 开始刷 LeetCode，中间大概花了一个半月(6 周)左右时间刷完 240 题。\n\n\n开始刷题时，确实是无从下手，因为从序号开始刷，刷到几道题就遇到 hard 的题型，会卡住很久，后面去评论区看别人怎么刷题，也去 Google 搜索最好的刷题方式，发现按题型刷题会舒服很多，基本一个类型的题目，一天能做很多，慢慢刷题也不再枯燥，做起来也很有意思，最后也收到不错的 offer（最后去了宇宙系）。\n回到最开始的问题，面试到底要刷多少题，其实这个取决于你想进什么样公司，你定的目标如果是国内一线大厂，个人感觉大概 200 至 300 题基本就满足大部分面试需要了。第二个问题是按什么顺序刷及如何提高效率，这个也是本 repo 的目的，给你指定了一个刷题的顺序，以及刷题的模板，有了方向和技巧后，就去动手吧~ 希望刷完之后，你也能自己总结一套属于自己的刷题模板，有所收获，有所成长~\n推荐的刷题路径\n按此 repo 目录刷一遍，如果中间有题目卡住了先跳过，然后刷题一遍 LeetCode 探索基础卡片，最后快要面试时刷题一遍剑指 offer。\n为什么这么要这么刷，因为 repo 里面的题目是按类型归类，都是一些常见的高频题，很有代表性，大部分都是可以用模板加一点变形做出来，刷完后对大部分题目有基本的认识。然后刷一遍探索卡片，巩固一下一些基础知识点，总结这些知识点。最后剑指 offer 是大部分公司的出题源头，刷完面试中基本会遇到现题或者变形题，基本刷完这三部分，大部分国内公司的面试题应该就没什么问题了~\n1、 algorithm-pattern 练习题\n\n2、 LeetCode 卡片\n\n3、 剑指 offer\n\n刷题时间可以合理分配，如果打算准备面试了，建议前面两部分 一个半月 （6 周）时间刷完，最后剑指 offer 半个月刷完，边刷可以边投简历进行面试，遇到不会的不用着急，往模板上套就对了，如果面试管给你提示，那就好好做，不要错过这大好机会~\n\n注意点：如果为了找工作刷题，遇到 hard 的题如果有思路就做，没思路先跳过，先把基础打好，再来刷 hard 可能效果会更好~\n\n面试资源\n分享一些计算机的经典书籍，大部分对面试应该都有帮助，强烈推荐 🌝\n我看过的 100 本书\n更新计划\n持续更新中，觉得还可以的话点个 star 收藏呀 ⭐️~\n【 Github 】https://github.com/greyireland/algorithm-pattern ⭐️\n完成打卡\n完成计划之后，可以提交 Pull requests，在下面添加自己的项目仓库，完成自己的算法模板打卡呀~\n\n\n\n完成\n用户\n项目地址\n\n\n\n\n✅\neasyui\nalgorithm-pattern-swift(Swift 实现),在线文档 Gitbook\n\n\n✅\nwardseptember\nnotes(Java 实现)\n\n\n✅\ndashidhy\nalgorithm-pattern-python(Python 实现)\n\n\n✅\nbinzi56\nalgorithm-pattern-c(c++ 实现)\n\n\n✅\nlvseouren\nalgorithm-study-record(c++ 实现)\n\n\n✅\nchienmy\nalgorithm-pattern-java(Java 实现), 在线文档 Gitbook\n\n\n✅\nligecarryme\nalgorithm-pattern-JavaScript(JS+TS实现)\n\n\n✅\nEsdeath\nalgorithm-pattern-dart(dart实现),在线文档 Gitbook\n\n\n✅\nlongpi1\nalgorithm-pattern-golang(golang实现)\n\n\n✅\ntpxxn\nalgorithm-pattern-CSharp(C# 实现)\n\n\n\n"},"introduction/golang.html":{"url":"introduction/golang.html","title":"go 语言入门","keywords":"","body":"GO 快速入门\n基本语法\nGo 语言圣经\n常用库\n切片\ngo 通过切片模拟栈和队列\n栈\n// 创建栈\nstack:=make([]int,0)\n// push压入\nstack=append(stack,10)\n// pop弹出\nv:=stack[len(stack)-1]\nstack=stack[:len(stack)-1]\n// 检查栈空\nlen(stack)==0\n\n队列\n// 创建队列\nqueue:=make([]int,0)\n// enqueue入队\nqueue=append(queue,10)\n// dequeue出队\nv:=queue[0]\nqueue=queue[1:]\n// 长度0为空\nlen(queue)==0\n\n注意点\n\n参数传递，只能修改，不能新增或者删除原始数据\n默认 s=s[0:len(s)]，取下限不取上限，数学表示为：[)\n\n字典\n基本用法\n// 创建\nm:=make(map[string]int)\n// 设置kv\nm[\"hello\"]=1\n// 删除k\ndelete(m,\"hello\")\n// 遍历\nfor k,v:=range m{\n    println(k,v)\n}\n\n注意点\n\nmap 键需要可比较，不能为 slice、map、function\nmap 值都有默认值，可以直接操作默认值，如：m[age]++ 值由 0 变为 1\n比较两个 map 需要遍历，其中的 kv 是否相同，因为有默认值关系，所以需要检查 val 和 ok 两个值\n\n标准库\nsort\n// int排序\nsort.Ints([]int{})\n// 字符串排序\nsort.Strings([]string{})\n// 自定义排序\nsort.Slice(s,func(i,j int)bool{return s[i]\nmath\n// int32 最大最小值\nmath.MaxInt32 // 实际值：1\ncopy\n// 删除a[i]，可以用 copy 将i+1到末尾的值覆盖到i,然后末尾-1\ncopy(a[i:],a[i+1:])\na=a[:len(a)-1]\n\n// make创建长度，则通过索引赋值\na:=make([]int,n)\na[n]=x\n// make长度为0，则通过append()赋值\na:=make([]int,0)\na=append(a,x)\n\n常用技巧\n类型转换\n// byte转数字\ns=\"12345\"  // s[0] 类型是byte\nnum:=int(s[0]-'0') // 1\nstr:=string(s[0]) // \"1\"\nb:=byte(num+'0') // '1'\nfmt.Printf(\"%d%s%c\\n\", num, str, b) // 111\n\n// 字符串转数字\nnum,_:=strconv.Atoi()\nstr:=strconv.Itoa()\n\n刷题注意点\n\nleetcode 中，全局变量不要当做返回值，否则刷题检查器会报错\n\n"},"introduction/quickstart.html":{"url":"introduction/quickstart.html","title":"算法快速入门","keywords":"","body":"快速开始\n数据结构与算法\n数据结构是一种数据的表现形式，如链表、二叉树、栈、队列等都是内存中一段数据表现的形式。\n算法是一种通用的解决问题的模板或者思路，大部分数据结构都有一套通用的算法模板，所以掌握这些通用的算法模板即可解决各种算法问题。\n后面会分专题讲解各种数据结构、基本的算法模板、和一些高级算法模板，每一个专题都有一些经典练习题，完成所有练习的题后，你对数据结构和算法会有新的收获和体会。\n先介绍两个算法题，试试感觉~\n示例 1：strStr\n\n给定一个  haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从 0 开始)。如果不存在，则返回  -1。\n\n\n思路：核心点遍历给定字符串字符，判断以当前字符开头字符串是否等于目标字符串\n\nimpl Solution {\n    // Solution 的公共方法，符合问题预期的接口。\n    // 它接受 String 类型的拥有所有权的 haystack 和 needle。\n    // 返回类型为 i32，按照问题的规范。\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n        // 在公共方法内部，将拥有所有权的 String 参数转换为字符串切片 (&str)\n        // 通过借用进行转换。这个转换是必要的，因为内部逻辑（在 str_str_impl 中）\n        // 是基于字符串切片操作的，而不是拥有所有权的 String。\n        // 这种方法避免了获取函数参数的所有权，\n        // 允许我们使用引用来操作。\n        Solution::str_str_impl(&haystack, &needle)\n    }\n\n    // 一个私有辅助函数，执行实际的计算。\n    // 这个函数被设计为使用字符串切片 (&str)，这对于只读操作如字符串搜索来说更为高效。\n    fn str_str_impl(haystack: &str, needle: &str) -> i32 {\n        // 检查 needle 是否为空字符串。\n        // 根据问题定义，如果 needle 为空，\n        // 函数应返回 0，表示在 haystack 的开始位置就匹配到了。\n        if needle.is_empty() { return 0; }\n\n        // 使用 find 方法搜索 haystack 中 needle 的第一次出现。\n        // find 方法返回一个 Option 类型：\n        // - Some(index) 如果找到了 needle，其中 index 是起始位置。\n        // - None 如果没有找到 needle。\n        // 然后使用 Option 上的 map_or 方法来处理这两种情况：\n        // - 如果是 Some(index)，则转换为 index 的 i32 类型。\n        // - 如果是 None（没有找到 needle），则返回 -1。\n        haystack.find(needle).map_or(-1, |v| v as i32)\n    }\n}\n\n需要注意点\n\n通过在接口边界将 String 转换为 &str，代码高效处理字符串数据，无需不必要的克隆或所有权转移。。\n错误处理：\nRust 通过 Result 和 Option 枚举强制进行错误处理，这与 Python 的异常处理机制不同。\n需要习惯使用 match 或 if let 表达式来处理这些枚举的值。\n\n\n不可变性：\nRust 中的变量默认是不可变的。如果你需要修改变量的值，需要在声明时使用 mut 关键字。\n\n\n\n示例 2：subsets\n\n给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。\n\n\n思路：这是一个典型的应用回溯法的题目，简单来说就是穷尽所有可能性，算法模板如下\n\nresult = []\nfunc backtrack(选择列表,路径):\n    if 满足结束条件:\n        result.add(路径)\n        return\n    for 选择 in 选择列表:\n        做选择\n        backtrack(选择列表,路径)\n        撤销选择\n\n\n通过不停的选择，撤销选择，来穷尽所有可能性，最后将满足条件的结果返回。答案代码：\n\nimpl Solution {\n    // 定义一个公共的静态方法 `subsets`，该方法接收一个 Vec 类型的参数 `nums`，\n    // 表示一组整数，返回一个 Vec> 类型，表示所有可能的子集合。\n    pub fn subsets(nums: Vec) -> Vec> {\n        // 定义一个动态数组 `result` 用于存储最终的所有子集结果。\n        let mut result = Vec::new();\n\n        // 定义一个内部的递归函数 `backtrack` 用于回溯搜索子集。\n        // 它接受一个整数数组的切片 `nums`、一个起始索引 `start`、一个当前路径的可变引用 `route`，\n        // 以及一个最终结果的可变引用 `result`。\n        fn backtrack(nums: &[i32], start: usize, route: &mut Vec, result: &mut Vec>) {\n            // 将当前路径的一个克隆添加到结果集中。\n            // 这一步确保了在每次递归调用中，当前探索的路径都会被记录下来。\n            result.push(route.clone());\n\n            // 从 `start` 索引开始遍历 `nums` 数组。\n            for i in start..nums.len() {\n                // 将当前数字添加到路径中。\n                route.push(nums[i]);\n                // 递归调用 `backtrack` 函数，i + 1 保证下一次调用时，搜索的范围向前推进了一步。\n                backtrack(nums, i + 1, route, result);\n                // 回溯：将路径中最后一个数字移除，探索不包含当前数字的其他路径。\n                route.pop();\n            }\n        }\n\n        // 定义一个动态数组 `route` 用于记录当前搜索的路径。\n        let mut route = Vec::new();\n        // 调用 `backtrack` 函数开始搜索，从索引 0 和空路径开始。\n        backtrack(&nums, 0, &mut route, &mut result);\n\n        // 返回最终收集到的所有子集结果。\n        result\n    }\n}\n\n说明：后面会深入讲解几个典型的回溯算法问题，如果当前不太了解可以暂时先跳过\n面试注意点\n我们大多数时候，刷算法题可能都是为了准备面试，所以面试的时候需要注意一些点\n\n快速定位到题目的知识点，找到知识点的通用模板，可能需要根据题目特殊情况做特殊处理。\n先去朝一个解决问题的方向！先抛出可行解，而不是最优解！先解决，再优化！\n代码的风格要统一，熟悉各类语言的代码规范。\n命名尽量简洁明了，尽量不用数字命名如：i1、node1、a1、b2\n\n\n常见错误总结\n访问下标时，不能访问越界\n空值 nil 问题 run time error\n\n\n\n练习\n\n[ ] strStr\n[ ] subsets\n\n"},"data_structure/binary_tree.html":{"url":"data_structure/binary_tree.html","title":"二叉树","keywords":"","body":"二叉树\n知识点\n二叉树遍历\n前序遍历：先访问根节点，再前序遍历左子树，再前序遍历右子树\n中序遍历：先中序遍历左子树，再访问根节点，再中序遍历右子树\n后序遍历：先后序遍历左子树，再后序遍历右子树，再访问根节点\n注意点\n\n以根访问顺序决定是什么遍历\n左子树都是优先右子树\n\n递归模板\n\n递归实现二叉树遍历非常简单，不同顺序区别仅在于访问父结点顺序\n\ndef preorder_rec(root):\n    if root is None:\n        return\n    visit(root)\n    preorder_rec(root.left)\n    preorder_rec(root.right)\n    return\n\ndef inorder_rec(root):\n    if root is None:\n        return\n    inorder_rec(root.left)\n    visit(root)\n    inorder_rec(root.right)\n    return\n\ndef postorder_rec(root):\n    if root is None:\n        return\n    postorder_rec(root.left)\n    postorder_rec(root.right)\n    visit(root)\n    return\n\n前序非递归\n\n本质上是图的DFS的一个特例，因此可以用栈来实现\n\nclass Solution:\n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n\n        preorder = []\n        if root is None:\n            return preorder\n\n        s = [root]\n        while len(s) > 0:\n            node = s.pop()\n            preorder.append(node.val)\n            if node.right is not None:\n                s.append(node.right)\n            if node.left is not None:\n                s.append(node.left)\n\n        return preorder\n\n中序非递归\nclass Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        s, inorder = [], []\n        node = root\n        while len(s) > 0 or node is not None:\n            if node is not None:\n                s.append(node)\n                node = node.left\n            else:\n                node = s.pop()\n                inorder.append(node.val)\n                node = node.right\n        return inorder\n\n后序非递归\nclass Solution:\n    def postorderTraversal(self, root: TreeNode) -> List[int]:\n\n        s, postorder = [], []\n        node, last_visit = root, None\n\n        while len(s) > 0 or node is not None:\n            if node is not None:\n                s.append(node)\n                node = node.left\n            else:\n                peek = s[-1]\n                if peek.right is not None and last_visit != peek.right:\n                    node = peek.right\n                else:\n                    last_visit = s.pop()\n                    postorder.append(last_visit.val)\n\n\n        return postorder\n\n注意点\n\n核心就是：根节点必须在右节点弹出之后，再弹出\n\nDFS 深度搜索-从下向上（分治法）\nclass Solution:\n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n\n        if root is None:\n            return []\n\n        left_result = self.preorderTraversal(root.left)\n        right_result = self.preorderTraversal(root.right)\n\n        return [root.val] + left_result + right_result\n\n注意点：\n\nDFS 深度搜索（从上到下） 和分治法区别：前者一般将最终结果通过指针参数传入，后者一般递归返回结果最后合并\n\nBFS 层次遍历\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n\n        levels = []\n        if root is None:\n            return levels\n\n        bfs = collections.deque([root])\n\n        while len(bfs) > 0:\n            levels.append([])\n\n            level_size = len(bfs)\n            for _ in range(level_size):\n                node = bfs.popleft()\n                levels[-1].append(node.val)\n\n                if node.left is not None:\n                    bfs.append(node.left)\n                if node.right is not None:\n                    bfs.append(node.right)\n\n        return levels\n\n分治法应用\n先分别处理局部，再合并结果\n适用场景\n\n快速排序\n归并排序\n二叉树相关问题\n\n分治法模板\n\n递归返回条件\n分段处理\n合并结果\n\n常见题目示例\nmaximum-depth-of-binary-tree\n\n给定一个二叉树，找出其最大深度。\n\n\n思路 1：分治法\n\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n\n        if root is None:\n            return 0\n\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))\n\n\n思路 2：层序遍历\n\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> List[List[int]]:\n\n        depth = 0\n        if root is None:\n            return depth\n\n        bfs = collections.deque([root])\n\n        while len(bfs) > 0:\n            depth += 1\n            level_size = len(bfs)\n            for _ in range(level_size):\n                node = bfs.popleft()\n                if node.left is not None:\n                    bfs.append(node.left)\n                if node.right is not None:\n                    bfs.append(node.right)\n\n        return depth\n\nbalanced-binary-tree\n\n给定一个二叉树，判断它是否是高度平衡的二叉树。\n\n\n思路 1：分治法，左边平衡 && 右边平衡 && 左右两边高度 \n\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n\n        def depth(root):\n\n            if root is None:\n                return 0, True\n\n            dl, bl = depth(root.left)\n            dr, br = depth(root.right)\n\n            return max(dl, dr) + 1, bl and br and abs(dl - dr) \n\n思路 2：使用后序遍历实现分治法的迭代版本\n\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n\n        s = [[TreeNode(), -1, -1]]\n        node, last = root, None\n        while len(s) > 1 or node is not None:\n            if node is not None:\n                s.append([node, -1, -1])\n                node = node.left\n                if node is None:\n                    s[-1][1] = 0\n            else:\n                peek = s[-1][0]\n                if peek.right is not None and last != peek.right:\n                    node = peek.right\n                else:\n                    if peek.right is None:\n                        s[-1][2] = 0\n                    last, dl, dr = s.pop()\n                    if abs(dl - dr) > 1:\n                        return False\n                    d = max(dl, dr) + 1\n                    if s[-1][1] == -1:\n                        s[-1][1] = d\n                    else:\n                        s[-1][2] = d\n\n        return True\n\nbinary-tree-maximum-path-sum\n\n给定一个非空二叉树，返回其最大路径和。\n\n\n思路：分治法。最大路径的可能情况：左子树的最大路径，右子树的最大路径，或通过根结点的最大路径。其中通过根结点的最大路径值等于以左子树根结点为端点的最大路径值加以右子树根结点为端点的最大路径值再加上根结点值，这里还要考虑有负值的情况即负值路径需要丢弃不取。\n\nclass Solution:\n    def maxPathSum(self, root: TreeNode) -> int:\n\n        self.maxPath = float('-inf')\n\n        def largest_path_ends_at(node):\n            if node is None:\n                return float('-inf')\n\n            e_l = largest_path_ends_at(node.left)\n            e_r = largest_path_ends_at(node.right)\n\n            self.maxPath = max(self.maxPath, node.val + max(0, e_l) + max(0, e_r), e_l, e_r)\n\n            return node.val + max(e_l, e_r, 0)\n\n        largest_path_ends_at(root)\n        return self.maxPath\n\nlowest-common-ancestor-of-a-binary-tree\n\n给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。\n\n\n思路：分治法，有左子树的公共祖先或者有右子树的公共祖先，就返回子树的祖先，否则返回根节点\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n\n        if root is None:\n            return None\n\n        if root == p or root == q:\n            return root\n\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n\n        if left is not None and right is not None:\n            return root\n        elif left is not None:\n            return left\n        elif right is not None:\n            return right\n        else:\n            return None\n\nBFS 层次应用\nbinary-tree-zigzag-level-order-traversal\n\n给定一个二叉树，返回其节点值的锯齿形层次遍历。Z 字形遍历\n\n\n思路：在BFS迭代模板上改用双端队列控制输出顺序\n\nclass Solution:\n    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:\n\n        levels = []\n        if root is None:\n            return levels\n\n        s = collections.deque([root])\n\n        start_from_left = True\n        while len(s) > 0:\n            levels.append([])\n            level_size = len(s)\n\n            if start_from_left:\n                for _ in range(level_size):\n                    node = s.popleft()\n                    levels[-1].append(node.val)\n                    if node.left is not None:\n                        s.append(node.left)\n                    if node.right is not None:\n                        s.append(node.right)\n            else:\n                for _ in range(level_size):\n                    node = s.pop()\n                    levels[-1].append(node.val)\n                    if node.right is not None:\n                        s.appendleft(node.right)\n                    if node.left is not None:\n                        s.appendleft(node.left)\n\n            start_from_left = not start_from_left\n\n\n        return levels\n\n二叉搜索树应用\nvalidate-binary-search-tree\n\n给定一个二叉树，判断其是否是一个有效的二叉搜索树。\n\n\n思路 1：中序遍历后检查输出是否有序，缺点是如果不平衡无法提前返回结果， 代码略\n\n思路 2：分治法，一个二叉树为合法的二叉搜索树当且仅当左右子树为合法二叉搜索树且根结点值大于右子树最小值小于左子树最大值。缺点是若不用迭代形式实现则无法提前返回，而迭代实现右比较复杂。\n\n\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n\n        if root is None: return True\n\n        def valid_min_max(node):\n\n            isValid = True\n            if node.left is not None:\n                l_isValid, l_min, l_max = valid_min_max(node.left)\n                isValid = isValid and node.val > l_max\n            else:\n                l_isValid, l_min = True, node.val\n\n            if node.right is not None:\n                r_isValid, r_min, r_max = valid_min_max(node.right)\n                isValid = isValid and node.val \n\n思路 3：利用二叉搜索树的性质，根结点为左子树的右边界，右子树的左边界，使用先序遍历自顶向下更新左右子树的边界并检查是否合法，迭代版本实现简单且可以提前返回结果。\n\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n\n        if root is None:\n            return True\n\n        s = [(root, float('-inf'), float('inf'))]\n        while len(s) > 0:\n            node, low, up = s.pop()\n            if node.left is not None:\n                if node.left.val = node.val:\n                    return False\n                s.append((node.left, low, node.val))\n            if node.right is not None:\n                if node.right.val = up:\n                    return False\n                s.append((node.right, node.val, up))\n        return True\n\ninsert-into-a-binary-search-tree\n\n给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。\n\n\n思路：如果只是为了完成任务则找到最后一个叶子节点满足插入条件即可。但此题深挖可以涉及到如何插入并维持平衡二叉搜索树的问题，并不适合初学者。\n\nclass Solution:\n    def insertIntoBST(self, root: TreeNode, val: int) -> TreeNode:\n\n        if root is None:\n            return TreeNode(val)\n\n        node = root\n        while True:\n            if val > node.val:\n                if node.right is None:\n                    node.right = TreeNode(val)\n                    return root\n                else:\n                    node = node.right\n            else:\n                if node.left is None:\n                    node.left = TreeNode(val)\n                    return root\n                else:\n                    node = node.left\n\n总结\n\n掌握二叉树递归与非递归遍历\n理解 DFS 前序遍历与分治法\n理解 BFS 层次遍历\n\n练习\n\n[ ] maximum-depth-of-binary-tree\n[ ] balanced-binary-tree\n[ ] binary-tree-maximum-path-sum\n[ ] lowest-common-ancestor-of-a-binary-tree\n[ ] binary-tree-level-order-traversal\n[ ] binary-tree-level-order-traversal-ii\n[ ] binary-tree-zigzag-level-order-traversal\n[ ] validate-binary-search-tree\n[ ] insert-into-a-binary-search-tree\n\n"},"data_structure/linked_list.html":{"url":"data_structure/linked_list.html","title":"链表","keywords":"","body":"链表\n基本技能\n链表相关的核心点\n\nnull/nil 异常处理\ndummy node 哑巴节点\n快慢指针\n插入一个节点到排序链表\n从一个链表中移除一个节点\n翻转链表\n合并两个链表\n找到链表的中间节点\n\n常见题型\nremove-duplicates-from-sorted-list\n\n给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。\n\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\n\n        if head is None:\n            return head\n\n        current = head\n\n        while current.next is not None:\n            if current.next.val == current.val:\n                current.next = current.next.next\n            else:\n                current = current.next\n\n        return head\n\nremove-duplicates-from-sorted-list-ii\n\n给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中   没有重复出现的数字。\n\n\n思路：链表头结点可能被删除，所以用 dummy node 辅助删除\n\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\n\n        if head is None:\n            return head\n\n        dummy = ListNode(next=head)\n\n        current, peek = dummy, head\n        find_dup = False\n        while peek.next is not None:\n            if peek.next.val == peek.val:\n                find_dup = True\n                peek.next = peek.next.next\n            else:\n                if find_dup:\n                    find_dup = False\n                    current.next = current.next.next\n                else:\n                    current = current.next\n                peek = peek.next\n\n        if find_dup:\n            current.next = current.next.next\n\n        return dummy.next\n\n注意点\n• A->B->C 删除 B，A.next = C\n• 删除用一个 Dummy Node 节点辅助（允许头节点可变）\n• 访问 X.next 、X.value 一定要保证 X != nil\nreverse-linked-list\n\n反转一个单链表。\n\n\n思路：将当前结点放置到头结点\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n\n        if head is None:\n            return head\n\n        tail = head\n        while tail.next is not None:\n            # put tail.next to head  \n            tmp = tail.next\n            tail.next = tail.next.next\n            tmp.next = head\n            head = tmp\n\n        return head\n\n\nRecursive method is tricky\nclass Solution:\n  def reverseList(self, head: ListNode) -> ListNode:\n\n      if head is None or head.next is None:\n          return head\n\n      rev_next = self.reverseList(head.next)\n      head.next.next = head\n      head.next = None\n\n      return rev_next\n\n\n\nreverse-linked-list-ii\n\n反转从位置  m  到  n  的链表。请使用一趟扫描完成反转。\n\n\n思路：先找到 m 处, 再反转 n - m 次即可\n\nclass Solution:\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:\n\n        if head is None:\n            return head\n\n        n -= m # number of times of reverse\n\n        curr = dummy = ListNode(next=head)\n        while m > 1: # find node at m - 1\n            curr = curr.next\n            m -= 1\n\n        start = curr.next\n        while n > 0: # reverse n - m times\n            tmp = start.next\n            start.next = tmp.next\n            tmp.next = curr.next\n            curr.next = tmp\n            n -= 1\n        return dummy.next\n\nmerge-two-sorted-lists\n\n将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。\n\n\n思路：通过 dummy node 链表，连接各个元素\n\nclass Solution:\n    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:\n\n        tail = dummy = ListNode()\n        while l1 is not None and l2 is not None:\n            if l1.val > l2.val:\n                tail.next = l2\n                l2 = l2.next\n            else:\n                tail.next = l1\n                l1 = l1.next\n            tail = tail.next\n\n        if l1 is None:\n            tail.next = l2\n        else:\n            tail.next = l1\n\n        return dummy.next\n\npartition-list\n\n给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于  x  的节点都在大于或等于  x  的节点之前。\n\n\n思路：将大于 x 的节点，放到另外一个链表，最后连接这两个链表\n\nclass Solution:\n    def partition(self, head: ListNode, x: int) -> ListNode:\n\n        p = l = ListNode()\n        q = s = ListNode(next=head)\n\n        while q.next is not None:\n            if q.next.val \n哑巴节点使用场景\n\n当头节点不确定的时候，使用哑巴节点\n\nsort-list\n\n在  O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。\n\n\n思路：归并排序，slow-fast找中点\n\nclass Solution:\n\n    def _merge(self, l1, l2):\n        tail = l_merge = ListNode()\n\n        while l1 is not None and l2 is not None:\n            if l1.val > l2.val:\n                tail.next = l2\n                l2 = l2.next\n            else:\n                tail.next = l1\n                l1 = l1.next\n            tail = tail.next\n\n        if l1 is not None:\n            tail.next = l1\n        else:\n            tail.next = l2\n\n        return l_merge.next\n\n    def _findmid(self, head):\n        slow, fast = head, head.next\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n\n        return slow\n\n    def sortList(self, head: ListNode) -> ListNode:\n        if head is None or head.next is None:\n            return head\n\n        mid = self._findmid(head)\n        tail = mid.next\n        mid.next = None # break from middle\n\n        return self._merge(self.sortList(head), self.sortList(tail))\n\n注意点\n\n快慢指针 判断 fast 及 fast.Next 是否为 nil 值\n递归 mergeSort 需要断开中间节点\n递归返回条件为 head 为 nil 或者 head.Next 为 nil\n\nreorder-list\n\n给定一个单链表  L：L→L→…→L__n→L\n将其重新排列后变为： L→L__n→L→L__n→L→L__n→…\n\n\n思路：找到中点断开，翻转后面部分，然后合并前后两个链表\n\nclass Solution:\n\n    def reverseList(self, head: ListNode) -> ListNode:\n\n        prev, curr = None, head\n\n        while curr is not None:\n            curr.next, prev, curr = prev, curr, curr.next\n\n        return prev\n\n    def reorderList(self, head: ListNode) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        \"\"\"\n        if head is None or head.next is None or head.next.next is None:\n            return\n\n        slow, fast = head, head.next\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n\n        h, m = head, slow.next\n        slow.next = None\n\n        m = self.reverseList(m)\n\n        while h is not None and m is not None:\n            p = m.next\n            m.next = h.next\n            h.next = m\n            h = h.next.next\n            m = p\n\n        return\n\nlinked-list-cycle\n\n给定一个链表，判断链表中是否有环。\n\n\n思路1：Hash Table 记录所有结点判断重复，空间复杂度 O(n) 非最优，时间复杂度 O(n) 但必然需要 n 次循环\n思路2：快慢指针，快慢指针相同则有环，证明：如果有环每走一步快慢指针距离会减 1，空间复杂度 O(1) 最优，时间复杂度 O(n) 但循环次数小于等于 n\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n\n        slow = fast = head\n\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n        fast = fast.next.next\n            if fast == slow:\n                return True\n\n        return False\n\nlinked-list-cycle-ii\n\n给定一个链表，返回链表开始入环的第一个节点。  如果链表无环，则返回  null。\n\n\n思路：快慢指针，快慢相遇之后，慢指针回到头，快慢指针步调一致一起移动，相遇点即为入环点。\n\n\nclass Solution:\n    def detectCycle(self, head: ListNode) -> ListNode:\n\n        slow = fast = head\n\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n\n            if slow == fast:\n                slow = head\n                while fast != slow:\n                    fast = fast.next\n                    slow = slow.next\n                return slow\n\n        return None\n\n坑点\n\n指针比较时直接比较对象，不要用值比较，链表中有可能存在重复值情况\n第一次相交后，快指针需要从下一个节点开始和头指针一起匀速移动\n\n注意，此题中使用 slow = fast = head 是为了保证最后找环起始点时移动步数相同，但是作为找中点使用时一般用 fast=head.Next 较多，因为这样可以知道中点的上一个节点，可以用来删除等操作。\n\nfast 如果初始化为 head.Next 则中点在 slow.Next\nfast 初始化为 head,则中点在 slow\n\npalindrome-linked-list\n\n请判断一个链表是否为回文链表。\n\n\n思路：O(1) 空间复杂度的解法需要破坏原链表（找中点 -> 反转后半个list -> 判断回文），在实际应用中往往还需要复原（后半个list再反转一次后拼接），操作比较复杂，这里给出更工程化的做法\n\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n\n        s = []\n        slow = fast = head\n        while fast is not None and fast.next is not None:\n            s.append(slow.val)\n            slow = slow.next\n            fast = fast.next.next\n\n        if fast is not None:\n            slow = slow.next\n\n        while len(s) > 0:\n            if slow.val != s.pop():\n                return False\n            slow = slow.next\n\n        return True\n\ncopy-list-with-random-pointer\n\n给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。\n要求返回这个链表的 深拷贝。\n\n\n思路1：hash table 存储 random 指针的连接关系\n\nclass Solution:\n    def copyRandomList(self, head: 'Node') -> 'Node':\n\n        if head is None:\n            return None\n\n        parent = collections.defaultdict(list)\n\n        out = Node(0)\n        o, n = head, out\n        while o is not None:\n            n.next = Node(o.val)\n            n = n.next\n            if o.random is not None:\n                parent[o.random].append(n)\n            o = o.next\n\n        o, n = head, out.next\n        while o is not None:\n            if o in parent:\n                for p in parent[o]:\n                    p.random = n\n            o = o.next\n            n = n.next\n\n        return out.next\n\n\n思路2：复制结点跟在原结点后面，间接维护连接关系，优化空间复杂度，建立好新 list 的 random 链接后分离\n\nclass Solution:\n    def copyRandomList(self, head: 'Node') -> 'Node':\n\n        if head is None:\n            return None\n\n        p = head\n        while p is not None:\n            p.next = Node(p.val, p.next)\n            p = p.next.next\n\n        p = head\n        while p is not None:\n            if p.random is not None:\n                p.next.random = p.random.next\n            p = p.next.next\n\n        new = head.next\n        o, n = head, new\n        while n.next is not None:\n            o.next = n.next\n            n.next = n.next.next\n            o = o.next\n            n = n.next\n        o.next = None\n\n        return new\n\n总结\n链表必须要掌握的一些点，通过下面练习题，基本大部分的链表类的题目都是手到擒来~\n\nnull/nil 异常处理\ndummy node 哑巴节点\n快慢指针\n插入一个节点到排序链表\n从一个链表中移除一个节点\n翻转链表\n合并两个链表\n找到链表的中间节点\n\n练习\n\n[ ] remove-duplicates-from-sorted-list\n[ ] remove-duplicates-from-sorted-list-ii\n[ ] reverse-linked-list\n[ ] reverse-linked-list-ii\n[ ] merge-two-sorted-lists\n[ ] partition-list\n[ ] sort-list\n[ ] reorder-list\n[ ] linked-list-cycle\n[ ] linked-list-cycle-ii\n[ ] palindrome-linked-list\n[ ] copy-list-with-random-pointer\n\n"},"data_structure/stack_queue.html":{"url":"data_structure/stack_queue.html","title":"栈和队列","keywords":"","body":"栈和队列\n简介\n栈的特点是后入先出\n\n根据这个特点可以临时保存一些数据，之后用到依次再弹出来，常用于 DFS 深度搜索\n队列一般常用于 BFS 广度搜索，类似一层一层的搜索\nStack 栈\nmin-stack\n\n设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。\n\n\n思路：用两个栈实现或插入元组实现，保证当前最小值在栈顶即可\n\nclass MinStack:\n\n    def __init__(self):\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        if len(self.stack) > 0:\n            self.stack.append((x, min(x, self.stack[-1][1])))\n        else:\n            self.stack.append((x, x))\n\n    def pop(self) -> int:\n        return self.stack.pop()[0]\n\n    def top(self) -> int:\n        return self.stack[-1][0]\n\n    def getMin(self) -> int:\n        return self.stack[-1][1]\n\nevaluate-reverse-polish-notation\n\n波兰表达式计算 > 输入: [\"2\", \"1\", \"+\", \"3\", \"\"] > 输出: 9\n解释: ((2 + 1) \\ 3) = 9\n\n\n思路：通过栈保存原来的元素，遇到表达式弹出运算，再推入结果，重复这个过程\n\nclass Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n\n        def comp(or1, op, or2):\n            if op == '+':\n                return or1 + or2\n\n            if op == '-':\n                return or1 - or2\n\n            if op == '*':\n                return or1 * or2\n\n            if op == '/':\n                abs_result = abs(or1) // abs(or2)\n                return abs_result if or1 * or2 > 0 else -abs_result\n\n        stack = []\n\n        for token in tokens:\n            if token in ['+', '-', '*', '/']:\n                or2 = stack.pop()\n                or1 = stack.pop()\n                stack.append(comp(or1, token, or2))\n            else:\n                stack.append(int(token))\n\n        return stack[0]\n\ndecode-string\n\n给定一个经过编码的字符串，返回它解码后的字符串。\ns = \"3[a]2[bc]\", 返回 \"aaabcbc\".\ns = \"3[a2[c]]\", 返回 \"accaccacc\".\ns = \"2[abc]3[cd]ef\", 返回 \"abcabccdcdcdef\".\n\n\n思路：通过两个栈进行操作，一个用于存数，另一个用来存字符串\n\nclass Solution:\n    def decodeString(self, s: str) -> str:\n\n        stack_str = ['']\n        stack_num = []\n\n        num = 0\n        for c in s:\n            if c >= '0' and c \nbinary-tree-inorder-traversal\n\n给定一个二叉树，返回它的中序遍历。\n\n\nreference\n\nclass Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n\n        stack, inorder = [], []\n        node = root\n\n        while len(stack) > 0 or node is not None:\n            if node is not None: \n                stack.append(node)\n                node = node.left\n            else:\n                node = stack.pop()\n                inorder.append(node.val)\n                node = node.right\n\n        return inorder\n\nclone-graph\n\n给你无向连通图中一个节点的引用，请你返回该图的深拷贝（克隆）。\n\n\nBFS\n\nclass Solution:\n    def cloneGraph(self, start: 'Node') -> 'Node':\n\n        if start is None:\n            return None\n\n        visited = {start: Node(start.val, [])}\n        bfs = collections.deque([start])\n\n        while len(bfs) > 0:\n            curr = bfs.popleft()\n            curr_copy = visited[curr]\n            for n in curr.neighbors:\n                if n not in visited:\n                    visited[n] = Node(n.val, [])\n                    bfs.append(n)\n                curr_copy.neighbors.append(visited[n])\n\n        return visited[start]\n\n\nDFS iterative\n\nclass Solution:\n    def cloneGraph(self, start: 'Node') -> 'Node':\n\n        if start is None:\n            return None\n\n        if not start.neighbors:\n            return Node(start.val)\n\n        visited = {start: Node(start.val, [])}\n        dfs = [start]\n\n        while len(dfs) > 0:\n            peek = dfs[-1]\n            peek_copy = visited[peek]\n            if len(peek_copy.neighbors) == 0:\n                for n in peek.neighbors:\n                    if n not in visited:\n                        visited[n] = Node(n.val, [])\n                        dfs.append(n)\n                    peek_copy.neighbors.append(visited[n])\n            else:\n                dfs.pop()\n\n        return visited[start]\n\nnumber-of-islands\n\n给定一个由  '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。\n\nHigh-level problem: number of connected component of graph\n\n思路：通过深度搜索遍历可能性（注意标记已访问元素）\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n\n        if not grid or not grid[0]:\n            return 0\n\n        m, n = len(grid), len(grid[0])\n\n        def dfs_iter(i, j):\n            dfs = []\n            dfs.append((i, j))\n            while len(dfs) > 0:\n                i, j = dfs.pop()\n                if grid[i][j] == '1':\n                    grid[i][j] = '0'\n                    if i - 1 >= 0:\n                        dfs.append((i - 1, j))\n                    if j - 1 >= 0:\n                        dfs.append((i, j - 1))\n                    if i + 1 \nlargest-rectangle-in-histogram\n\n给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。\n求在该柱状图中，能够勾勒出来的矩形的最大面积。\n\n\n思路 1：蛮力法，比较每个以 i 开始 j 结束的最大矩形，A(i, j) = (j - i + 1) * min_height(i, j)，时间复杂度 O(n^2) 无法 AC。\n\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n\n        max_area = 0\n\n        n = len(heights)\n        for i in range(n):\n            min_height = heights[i]\n            for j in range(i, n):\n                min_height = min(min_height, heights[j])\n                max_area = max(max_area, min_height * (j - i + 1))\n\n        return max_area\n\n\n思路 2: 设 A(i, j) 为区间 [i, j) 内最大矩形的面积，k 为 [i, j) 内最矮 bar 的坐标，则 A(i, j) = max((j - i) * heights[k], A(i, k), A(k+1, j)), 使用分治法进行求解。时间复杂度 O(nlogn)，其中使用简单遍历求最小值无法 AC (最坏情况退化到 O(n^2))，使用线段树优化后勉强 AC。\n\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n\n        n = len(heights)\n\n        seg_tree = [None] * n\n        seg_tree.extend(list(zip(heights, range(n))))\n        for i in range(n - 1, 0, -1):\n            seg_tree[i] = min(seg_tree[2 * i], seg_tree[2 * i + 1], key=lambda x: x[0])\n\n        def _min(i, j):\n            min_ = (heights[i], i)\n            i += n\n            j += n\n            while i \n\n思路 3：包含当前 bar 最大矩形的边界为左边第一个高度小于当前高度的 bar 和右边第一个高度小于当前高度的 bar。\n\nclass Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n\n        n = len(heights)\n\n        stack = [-1]\n        max_area = 0\n\n        for i in range(n):\n            while len(stack) > 1 and heights[stack[-1]] > heights[i]:\n                h = stack.pop()\n                max_area = max(max_area, heights[h] * (i - stack[-1] - 1))\n            stack.append(i)\n\n        while len(stack) > 1:\n            h = stack.pop()\n            max_area = max(max_area, heights[h] * (n - stack[-1] - 1))\n\n        return max_area\n\nQueue 队列\n常用于 BFS 宽度优先搜索\nimplement-queue-using-stacks\n\n使用栈实现队列\n\nclass MyQueue:\n\n    def __init__(self):\n        self.cache = []\n        self.out = []\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.\n        \"\"\"\n        self.cache.append(x)\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        \"\"\"\n        if len(self.out) == 0:\n            while len(self.cache) > 0:\n                self.out.append(self.cache.pop())\n\n        return self.out.pop() \n\n    def peek(self) -> int:\n        \"\"\"\n        Get the front element.\n        \"\"\"\n        if len(self.out) > 0:\n            return self.out[-1]\n        else:\n            return self.cache[0]\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the queue is empty.\n        \"\"\"\n        return len(self.cache) == 0 and len(self.out) == 0\n\nbinary-tree-level-order-traversal\n\n二叉树的层序遍历\n\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n\n        levels = []\n        if root is None:\n            return levels\n\n        bfs = collections.deque([root])\n\n        while len(bfs) > 0:\n            levels.append([])\n\n            level_size = len(bfs)\n            for _ in range(level_size):\n                node = bfs.popleft()\n                levels[-1].append(node.val)\n\n                if node.left is not None:\n                    bfs.append(node.left)\n                if node.right is not None:\n                    bfs.append(node.right)\n\n        return levels\n\n01-matrix\n\n给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。\n两个相邻元素间的距离为 1\n\n\n思路 1: 从 0 开始 BFS, 遇到距离最小值需要更新的则更新后重新入队更新后续结点\n\nclass Solution:\n    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:\n\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return matrix\n\n        m, n = len(matrix), len(matrix[0])\n        dist = [[float('inf')] * n for _ in range(m)]\n\n        bfs = collections.deque([])\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    dist[i][j] = 0\n                    bfs.append((i, j))\n\n        neighbors = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        while len(bfs) > 0:\n            i, j = bfs.popleft()\n            for dn_i, dn_j in neighbors:\n                n_i, n_j = i + dn_i, j + dn_j\n                if n_i >= 0 and n_i = 0 and n_j  dist[i][j] + 1:\n                        dist[n_i][n_j] = dist[i][j] + 1\n                        bfs.append((n_i, n_j))\n\n        return dist\n\n\n思路 2: 2-pass DP，dist(i, j) = max{dist(i - 1, j), dist(i + 1, j), dist(i, j - 1), dist(i, j + 1)} + 1\n\nclass Solution:\n    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:\n\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return matrix\n\n        m, n = len(matrix), len(matrix[0])\n\n        dist = [[float('inf')] * n for _ in range(m)]\n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    if i - 1 >= 0:\n                        dist[i][j] = min(dist[i - 1][j] + 1, dist[i][j])\n                    if j - 1 >= 0:\n                        dist[i][j] = min(dist[i][j - 1] + 1, dist[i][j])\n                else:\n                    dist[i][j] = 0\n\n        for i in range(-1, -m - 1, -1):\n            for j in range(-1, -n - 1, -1):\n                if matrix[i][j] == 1:\n                    if i + 1 \n补充：单调栈\n顾名思义，单调栈即是栈中元素有单调性的栈，典型应用为用线性的时间复杂度找左右两侧第一个大于/小于当前元素的位置。\nlargest-rectangle-in-histogram\nclass Solution:\n    def largestRectangleArea(self, heights) -> int:\n        heights.append(0)\n        stack = [-1]\n        result = 0\n        for i in range(len(heights)):\n            while stack and heights[i] \ntrapping-rain-water\nclass Solution:\n    def trap(self, height: List[int]) -> int:\n\n        stack = []\n        result = 0\n\n        for i in range(len(height)):\n            while stack and height[i] > height[stack[-1]]:\n                cur = stack.pop()\n                if not stack:\n                    break\n                result += (min(height[stack[-1]], height[i]) - height[cur]) * (i - stack[-1] - 1)\n            stack.append(i)\n\n        return result\n\n补充：单调队列\n单调栈的拓展，可以从数组头 pop 出旧元素，典型应用是以线性时间获得区间最大/最小值。\nsliding-window-maximum\n\n求滑动窗口中的最大元素\n\nclass Solution:\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\n\n        N = len(nums)\n        if N * k == 0:\n            return []\n\n        if k == 1:\n            return nums[:]\n\n        # define a max queue\n        maxQ = collections.deque()\n\n        result = []\n        for i in range(N):\n            if maxQ and maxQ[0] == i - k:\n                maxQ.popleft()\n\n            while maxQ and nums[maxQ[-1]] = k - 1:\n                result.append(nums[maxQ[0]])\n\n        return result\n\nshortest-subarray-with-sum-at-least-k\nclass Solution:\n    def shortestSubarray(self, A: List[int], K: int) -> int:\n        N = len(A)\n        cdf = [0]\n        for num in A:\n            cdf.append(cdf[-1] + num)\n\n        result = N + 1\n        minQ = collections.deque()\n\n        for i, csum in enumerate(cdf):\n\n            while minQ and csum = K:\n                result = min(result, i - minQ.popleft())\n\n            minQ.append(i)\n\n        return result if result \n总结\n\n熟悉栈的使用场景\n后入先出，保存临时值\n利用栈 DFS 深度搜索\n\n\n熟悉队列的使用场景\n利用队列 BFS 广度搜索\n\n\n\n练习\n\n[ ] min-stack\n[ ] evaluate-reverse-polish-notation\n[ ] decode-string\n[ ] binary-tree-inorder-traversal\n[ ] clone-graph\n[ ] number-of-islands\n[ ] largest-rectangle-in-histogram\n[ ] implement-queue-using-stacks\n[ ] 01-matrix\n\n"},"data_structure/binary_op.html":{"url":"data_structure/binary_op.html","title":"二进制","keywords":"","body":"二进制\n常见二进制操作\n基本操作\na=0^a=a^0\n0=a^a\n由上面两个推导出：a=a^b^b\n交换两个数\na=a^b\nb=a^b\na=a^b\n移除最后一个 1\na=n&(n-1)\n获取最后一个 1\ndiff=(n&(n-1))^n\n常见题目\nsingle-number\n\n给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n\n        out = 0\n        for num in nums:\n            out ^= num\n\n        return out\n\nsingle-number-ii\n\n给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        seen_once = seen_twice = 0\n\n        for num in nums:\n            seen_once = ~seen_twice & (seen_once ^ num)\n            seen_twice = ~seen_once & (seen_twice ^ num)\n\n        return seen_once\n\nsingle-number-iii\n\n给定一个整数数组  nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。\n\nclass Solution:\n    def singleNumber(self, nums: int) -> List[int]:\n        # difference between two numbers (x and y) which were seen only once\n        bitmask = 0\n        for num in nums:\n            bitmask ^= num\n\n        # rightmost 1-bit diff between x and y\n        diff = bitmask & (-bitmask)\n\n        x = 0\n        for num in nums:\n            # bitmask which will contain only x\n            if num & diff:\n                x ^= num\n\n        return [x, bitmask^x]\n\nnumber-of-1-bits\n\n编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’  的个数（也被称为汉明重量）。\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        num_ones = 0\n        while n > 0:\n            num_ones += 1\n            n &= n - 1\n        return num_ones\n\ncounting-bits\n\n给定一个非负整数  num。对于  0 ≤ i ≤ num  范围中的每个数字  i ，计算其二进制数中的 1 的数目并将它们作为数组返回。\n\n\n思路：利用上一题的解法容易想到 O(nk) 的解法，k 为位数。但是实际上可以利用动态规划将复杂度降到 O(n)，想法其实也很简单，即当前数的 1 个数等于比它少一个 1 的数的结果加 1。下面给出三种 DP 解法\n\n# x  List[int]:\n\n        num_ones = [0] * (num + 1)\n\n        for i in range(1, num + 1):\n            num_ones[i] = num_ones[i >> 1] + (i & 1) # 注意位运算的优先级\n\n        return num_ones\n\n# x  List[int]:\n\n        num_ones = [0] * (num + 1)\n\n        for i in range(1, num + 1):\n            num_ones[i] = num_ones[i & (i - 1)] + 1\n\n        return num_ones\n\n# x  List[int]:\n\n        num_ones = [0] * (num + 1)\n\n        left_most = 1\n\n        while left_most  num:\n                    break\n                num_ones[i + left_most] = num_ones[i] + 1\n            left_most \nreverse-bits\n\n颠倒给定的 32 位无符号整数的二进制位。\n\n思路：简单想法依次颠倒即可。更高级的想法是考虑到处理超长比特串时可能出现重复的pattern，此时如果使用 cache 记录出现过的 pattern 并在重复出现时直接调用结果可以节约时间复杂度，具体可以参考 leetcode 给出的解法。\nimport functools\n\nclass Solution:\n    def reverseBits(self, n):\n        ret, power = 0, 24\n        while n:\n            ret += self.reverseByte(n & 0xff) > 8\n            power -= 8\n        return ret\n\n    # memoization with decorator\n    @functools.lru_cache(maxsize=256)\n    def reverseByte(self, byte):\n        return (byte * 0x0202020202 & 0x010884422010) % 1023\n\nbitwise-and-of-numbers-range\n\n给定范围 [m, n]，其中 0 \n\n思路：直接从 m 到 n 遍历一遍显然不是最优。一个性质，如果 m 不等于 n，则结果第一位一定是 0 （中间必定包含一个偶数）。利用这个性质，类似的将 m 和 n 右移后我们也可以判断第三位、第四位等等，免去了遍历的时间复杂度。\nclass Solution:\n    def rangeBitwiseAnd(self, m: int, n: int) -> int:\n\n        shift = 0\n        while m >= 1\n            n >>= 1\n\n        return m \n练习\n\n[ ] single-number\n[ ] single-number-ii\n[ ] single-number-iii\n[ ] number-of-1-bits\n[ ] counting-bits\n[ ] reverse-bits\n\n"},"basic_algorithm/binary_search.html":{"url":"basic_algorithm/binary_search.html","title":"二分搜索","keywords":"","body":"二分搜索\n给一个有序数组和目标值，找第一次/最后一次/任何一次出现的索引，时间复杂度 O(logN)。\n模板\n常用的二分搜索模板有如下三种形式：\n\n其中，模板 1 和 3 是最常用的，几乎所有二分查找问题都可以用其中之一轻松实现。模板 2 更高级一些，用于解决某些类型的问题。详细的对比可以参考 Leetcode 上的文章：二分搜索模板。\nbinary-search\n\n给定一个  n  个元素有序的（升序）整型数组  nums 和一个目标值  target  ，写一个函数搜索  nums  中的 target，如果目标值存在返回下标，否则返回 -1。\n\n\n模板 3 的实现\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n\n        l, r = 0, len(nums) - 1\n\n        while l + 1 \n\n如果是最简单的二分搜索，不需要找第一个、最后一个位置，或者是没有重复元素，可以使用模板 1，代码更简洁。同时，如果搜索失败，left 是第一个大于 target 的索引，right 是最后一个小于 target 的索引。\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n\n        l, r = 0, len(nums) - 1\n\n        while l  target:\n                r = mid - 1\n            else:\n                l = mid + 1\n\n        return -1\n\n\n模板 2 的实现\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n\n        l, r = 0, len(nums) - 1\n\n        while l \n常见题目\nfind-first-and-last-position-of-element-in-sorted-array\n\n给定一个包含 n 个整数的排序数组，找出给定目标值 target 的起始和结束位置。如果目标值不在数组中，则返回[-1, -1]\n\n\n思路：核心点就是找第一个 target 的索引，和最后一个 target 的索引，所以用两次二分搜索分别找第一次和最后一次的位置，下面是使用模板 3 的解法\n\nclass Solution:\n    def searchRange(self, nums, target):\n        Range = [-1, -1]\n        if len(nums) == 0:\n            return Range\n\n        l, r = 0, len(nums) - 1\n        while l + 1 \n\n使用模板 2 的解法\n\nclass Solution:\n    def searchRange(self, nums, target):\n        Range = [-1, -1]\n        if len(nums) == 0:\n            return Range\n\n        l, r = 0, len(nums) - 1\n        while l  target:\n                r = mid - 1\n            else:\n                l = mid\n\n        Range[1] = l\n        return Range\n\nsearch-insert-position\n\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n\n使用模板 1，若不存在，左边界为第一个大于目标值的索引（插入位置），右边界为最后一个小于目标值的索引\n\nclass Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n\n        l, r = 0, len(nums) - 1\n\n        while l  target:\n                r = mid - 1\n            else:\n                l = mid + 1\n\n        return l\n\nsearch-a-2d-matrix\n\n编写一个高效的算法来判断  m x n  矩阵中，是否存在一个目标值。该矩阵具有如下特性：\n\n每行中的整数从左到右按升序排列。\n\n每行的第一个整数大于前一行的最后一个整数。\n\n\n\n\n两次二分，首先定位行数，接着定位列数\n\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return False\n\n        l, r = 0, len(matrix) - 1\n\n        while l \nfind-minimum-in-rotated-sorted-array\n\n假设按照升序排序的数组在预先未知的某个点上进行了旋转，例如，数组 [0, 1, 2, 4, 5, 6, 7] 可能变为 [4, 5, 6, 7, 0, 1, 2]。请找出其中最小的元素。假设数组中无重复元素。\n\n\n使用二分搜索，当中间元素大于右侧元素时意味着拐点即最小元素在右侧，否则在左侧\n\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n\n        l , r = 0, len(nums) - 1\n\n        while l  nums[r]: # 数组有重复时，若 nums[l] == nums[mid] == nums[r]，无法判断移动方向\n                l = mid + 1\n            else:\n                r = mid\n\n        return nums[l]\n\nfind-minimum-in-rotated-sorted-array-ii\n\n假设按照升序排序的数组在预先未知的某个点上进行了旋转，例如，数组 [0, 1, 2, 4, 5, 6, 7] 可能变为 [4, 5, 6, 7, 0, 1, 2]。请找出其中最小的元素。数组中可能包含重复元素。\n\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n\n        l , r = 0, len(nums) - 1\n\n        while l  nums[r]:\n                l = mid + 1\n            elif nums[mid] \nsearch-in-rotated-sorted-array\n\n假设按照升序排序的数组在预先未知的某个点上进行了旋转，例如，数组 [0, 1, 2, 4, 5, 6, 7] 可能变为 [4, 5, 6, 7, 0, 1, 2]。搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回  -1。假设数组中不存在重复的元素。\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n\n        l , r = 0, len(nums) - 1\n\n        while l  target:\n                if nums[l] > target and nums[mid] > nums[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n            else:\n                if nums[r] \nsearch-in-rotated-sorted-array-ii\n\n假设按照升序排序的数组在预先未知的某个点上进行了旋转，例如，数组 [0, 0, 1, 2, 2, 5, 6] 可能变为 [2, 5, 6, 0, 0, 1, 2]。编写一个函数来判断给定的目标值是否存在于数组中，若存在返回  true，否则返回  false。数组中可能包含重复元素。\n\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n\n        l , r = 0, len(nums) - 1\n\n        while l  target:\n                if nums[l] > target and nums[mid] > nums[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n            else:\n                if nums[r] \n隐含的二分搜索\n有时用到二分搜索的题目并不会直接给你一个有序数组，它隐含在题目中，需要你去发现或者构造。一类常见的隐含的二分搜索的问题是求某个有界数据的最值，以最小值为例，当数据比最小值大时都符合条件，比最小值小时都不符合条件，那么符合/不符合条件就构成了一种有序关系，再加上数据有界，我们就可以使用二分搜索来找数据的最小值。注意，数据的界一般也不会在题目中明确提示你，需要你自己去发现。\nkoko-eating-bananas\nclass Solution:\n    def minEatingSpeed(self, piles: List[int], H: int) -> int:\n\n        l, r = 1, max(piles)\n\n        while l \n总结\n二分搜索核心四点要素（必背&理解）\n\n1、初始化：start=0、end=len-1\n2、循环退出条件：start + 1 \n3、比较中点和目标值：A[mid] ==、  target\n4、判断最后两个元素是否符合：A[start]、A[end] ? target\n\n练习题\n\n[ ] search-for-range\n[ ] search-insert-position\n[ ] search-a-2d-matrix\n[ ] first-bad-version\n[ ] find-minimum-in-rotated-sorted-array\n[ ] find-minimum-in-rotated-sorted-array-ii\n[ ] search-in-rotated-sorted-array\n[ ] search-in-rotated-sorted-array-ii\n\n"},"basic_algorithm/sort.html":{"url":"basic_algorithm/sort.html","title":"排序算法","keywords":"","body":"排序\n常考排序\n快速排序\nimport random\n\ndef partition(nums, left, right):\n    if left >= right:\n        return\n\n    pivot_idx = random.randint(left, right)\n    pivot = nums[pivot_idx]\n\n    nums[right], nums[pivot_idx] = nums[pivot_idx], nums[right]\n\n    partition_idx = left\n    for i in range(left, right):\n        if nums[i] \n归并排序\ndef merge(A, B):\n    C = []\n    i, j = 0, 0\n    while i \n堆排序\n用数组表示的完美二叉树 complete binary tree\n\n完美二叉树 VS 其他二叉树\n\n\n动画展示\n\n核心代码\ndef heap_adjust(A, start=0, end=None):\n    if end is None:\n        end = len(A)\n\n    while start is not None and start  A[start]:\n            swap = l\n        if r  A[start] and (swap is None or A[r] > A[l]):\n            swap = r\n\n        if swap is not None:\n            A[start], A[swap] = A[swap], A[start]\n\n        start = swap\n\n    return\n\ndef heapsort(A):\n\n    # construct max heap\n    n = len(A)\n    for i in range(n // 2 - 1, -1, -1):\n        heap_adjust(A, i)\n\n    # sort\n    for i in range(n - 1, 0, -1):\n        A[0], A[i] = A[i], A[0]\n        heap_adjust(A, end=i)\n\n    return A\n\n# test\nif __name__ == '__main__':\n    a = [7, 6, 8, 5, 2, 1, 3, 4, 0, 9, 10]\n    print(a)\n    print(heapsort(a))\n\n题目\nkth-largest-element-in-an-array\n\n思路 1: sort 后取第 k 个，最简单直接，复杂度 O(N log N) 代码略\n\n思路 2: 使用最小堆，复杂度 O(N log k)\n\n\nclass Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        # note that in practice there is a more efficient python build-in function heapq.nlargest(k, nums)\n        min_heap = []\n\n        for num in nums:\n            if len(min_heap)  min_heap[0]:\n                    heapq.heappushpop(min_heap, num)\n\n        return min_heap[0]\n\n\n思路 3: Quick select，方式类似于快排，每次 partition 后检查 pivot 是否为第 k 个元素，如果是则直接返回，如果比 k 大，则继续 partition 小于 pivot 的元素，如果比 k 小则继续 partition 大于 pivot 的元素。相较于快排，quick select 每次只需 partition 一侧，因此平均复杂度为 O(N)。\n\nclass Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n\n        k -= 1 # 0-based index\n\n        def partition(left, right):\n            pivot_idx = random.randint(left, right)\n            pivot = nums[pivot_idx]\n\n            nums[right], nums[pivot_idx] = nums[pivot_idx], nums[right]\n\n            partition_idx = left\n            for i in range(left, right):\n                if nums[i] > pivot:\n                    nums[partition_idx], nums[i] = nums[i], nums[partition_idx]\n                    partition_idx += 1\n\n            nums[right], nums[partition_idx] = nums[partition_idx], nums[right]\n\n            return partition_idx\n\n        left, right = 0, len(nums) - 1\n        while True:\n            partition_idx = partition(left, right)\n            if partition_idx == k:\n                return nums[k]\n            elif partition_idx \n参考\n十大经典排序\n二叉堆\n练习\n\n[ ] 手写快排、归并、堆排序\n\n"},"basic_algorithm/dp.html":{"url":"basic_algorithm/dp.html","title":"动态规划","keywords":"","body":"动态规划\n背景\n先从一道题目开始~\n如题  triangle\n\n给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。\n\n例如，给定三角形：\n[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n\n自顶向下的最小路径和为  11（即，2 + 3 + 5 + 1 = 11）。\n使用 DFS（遍历 或者 分治法）\n遍历\n\n分治法\n\n优化 DFS，缓存已经被计算的值（称为：记忆化搜索 本质上：动态规划）\n\n动态规划就是把大问题变成小问题，并解决了小问题重复计算的方法称为动态规划\n动态规划和 DFS 区别\n\n二叉树 子问题是没有交集，所以大部分二叉树都用递归或者分治法，即 DFS，就可以解决\n像 triangle 这种是有重复走的情况，子问题是有交集，所以可以用动态规划来解决\n\n动态规划，自底向上\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        if len(triangle) == 0:\n            return 0\n\n        dp = triangle[-1].copy()\n\n        for i in range(-2, -len(triangle) - 1, -1):\n            for j in range(len(triangle[i])):\n                dp[j] = triangle[i][j] + min(dp[j], dp[j + 1])\n\n        return dp[0]\n\n动态规划，自顶向下\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        if len(triangle) == 0:\n            return 0\n\n        dp = triangle[0]\n        for row in triangle[1:]:\n            dp_new = [row[0] + dp[0]]\n            for i in range(len(dp) - 1):\n                dp_new.append(row[i+1] + min(dp[i], dp[i+1]))\n            dp_new.append(row[-1] + dp[-1])\n            dp = dp_new\n\n        return min(dp)\n\n递归和动规关系\n递归是一种程序的实现方式：函数的自我调用\nFunction(x) {\n    ...\n    Funciton(x-1);\n    ...\n}\n\n动态规划：是一种解决问题的思想，大规模问题的结果，是由小规模问题的结果运算得来的。动态规划可用递归来实现(Memorization Search)\n使用场景\n满足两个条件\n\n满足以下条件之一\n求最大/最小值（Maximum/Minimum ）\n求是否可行（Yes/No ）\n求可行个数（Count(*) ）\n\n\n满足不能排序或者交换（Can not sort / swap ）\n\n如题：longest-consecutive-sequence  位置可以交换，所以不用动态规划\n四点要素\n\n状态 State\n灵感，创造力，存储小规模问题的结果\n\n\n方程 Function\n状态之间的联系，怎么通过小的状态，来算大的状态\n\n\n初始化 Intialization\n最极限的小状态是什么, 起点\n\n\n答案 Answer\n最大的那个状态是什么，终点\n\n\n\n常见四种类型\n\nMatrix DP (10%)\nSequence (40%)\nTwo Sequences DP (40%)\nBackpack (10%)\n\n\n注意点\n\n贪心算法大多题目靠背答案，所以如果能用动态规划就尽量用动规，不用贪心算法\n\n\n1、矩阵类型（10%）\nminimum-path-sum\n\n给定一个包含非负整数的  m x n  网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n\n思路：动态规划\n\nstate: f(x, y) 从起点走到 (x, y) 的最短路径 \n\nfunction: f(x, y) = min(f(x - 1, y), f(x, y - 1]) + A(x, y)\n\nintialize: f(0, 0) = A(0, 0)、f(i, 0) = sum(0,0 -> i,0)、 f(0, i) = sum(0,0 -> 0,i)\n\nanswer: f(n - 1, m - 1)\n\n2D DP -> 1D DP\n\n\nclass Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n\n        dp = [0] * n\n        dp[0] = grid[0][0]\n        for i in range(1, n):\n            dp[i] = dp[i-1] + grid[0][i]\n\n        for i in range(1, m):\n            dp[0] += grid[i][0]\n            for j in range(1, n):\n                dp[j] = grid[i][j] + min(dp[j-1], dp[j])\n        return dp[-1]\n\nunique-paths\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n问总共有多少条不同的路径？\n\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n\n        if m \nunique-paths-ii\n\n一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n问总共有多少条不同的路径？\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\nclass Solution:\n    def uniquePathsWithObstacles(self, G: List[List[int]]) -> int:\n\n        m, n = len(G), len(G[0])\n\n        dp = [1] if G[0][0] == 0 else [0]\n        for i in range(1, n):\n            new = dp[i-1] if G[0][i] == 0 else 0\n            dp.append(new)\n\n        for i in range(1, m):\n            dp[0] = 0 if G[i][0] == 1 else dp[0]\n            for j in range(1, n):\n                dp[j] = dp[j-1] + dp[j] if G[i][j] == 0 else 0\n\n        return dp[-1]\n\n2、序列类型（40%）\nclimbing-stairs\n\n假设你正在爬楼梯。需要  n  阶你才能到达楼顶。\n\nclass Solution:\n    def climbStairs(self, n: int) -> int:\n        if n \njump-game\n\n给定一个非负整数数组，你最初位于数组的第一个位置。\n数组中的每个元素代表你在该位置可以跳跃的最大长度。\n判断你是否能够到达最后一个位置。\n\n解法：直接DP无法得到O(n)的解，考虑间接DP\n\ntail to head\nclass Solution:\n  def canJump(self, nums: List[int]) -> bool:\n\n      left = len(nums) - 1 # most left index that can reach the last index\n\n      for i in range(len(nums) - 2, -1, -1):\n\n          left = i if i + nums[i] >= left else left # DP\n\n      return left == 0\n\n\nhead to tail\nclass Solution:\n  def canJump(self, nums: List[int]) -> bool:\n\n      max_pos = nums[0] # furthest index can reach\n\n      for i in range(1, len(nums)):\n          if max_pos \n\n\njump-game-ii\n\n给定一个非负整数数组，你最初位于数组的第一个位置。\n数组中的每个元素代表你在该位置可以跳跃的最大长度。\n你的目标是使用最少的跳跃次数到达数组的最后一个位置。\n\nclass Solution:\n    def jump(self, nums: List[int]) -> int:\n\n        cur_max = 0\n        step_max = 0\n        step = 0\n\n        for i in range(len(nums)):\n\n            if cur_max \npalindrome-partitioning-ii\n\n给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。\n返回符合要求的最少分割次数。\n\n\nWhy is hard\n\n仅目标DP, 判断回文时间复杂度高 -> 目标DP + 回文二维DP, 回文DP空间复杂度高 -> 一点trick, 回文DP空间复杂度降为线性\nclass Solution:\n\n    def minCut(self, s: str) -> int:\n\n        dp_min = [0] * len(s)\n        dp_pal = [True] * len(s)\n\n        def isPal(i, j):\n            dp_pal[i] = (s[i] == s[j] and dp_pal[i+1])\n            return dp_pal[i]\n\n        for j in range(1, len(s)):\n\n            min_cut = dp_min[j - 1] + 1\n\n            if isPal(0, j):\n                min_cut = 0\n\n            for i in range(1, j):\n                if isPal(i, j):\n                    min_cut = min(min_cut, dp_min[i - 1] + 1)\n\n            dp_min[j] = min_cut\n\n        return dp_min[-1]\n\nlongest-increasing-subsequence\n\n给定一个无序的整数数组，找到其中最长上升子序列的长度。\n\n\nDP(i) 等于以第i个数结尾的最长上升子序列的长度，容易想但不是最优\nclass Solution:\n  def lengthOfLIS(self, nums: List[int]) -> int:\n\n      if len(nums) == 0: return 0\n\n      dp_max = [1] * len(nums)\n\n      for j in range(1, len(nums)):\n          for i in range(j):\n              if nums[j] > nums[i]:\n                  dp_max[j] = max(dp_max[j], dp_max[i] + 1)\n\n      return max(dp_max)\n\n\n最优算法使用 greedy + binary search，比较tricky\nclass Solution:\n  def lengthOfLIS(self, nums: List[int]) -> int:\n\n      if len(nums) == 0: return 0\n\n      seq = [nums[0]]\n\n      for i in range(1, len(nums)):\n          ins = bisect.bisect_left(seq, nums[i])\n          if ins == len(seq):\n              seq.append(nums[i])\n          else:\n              seq[ins] = nums[i]\n\n      return len(seq)\n\n\n\nword-break\n\n给定一个非空字符串  s  和一个包含非空单词列表的字典  wordDict，判定  s  是否可以被空格拆分为一个或多个在字典中出现的单词。\n\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n\n        dp = [False] * (len(s) + 1)\n        dp[-1] = True\n\n        for j in range(len(s)):\n            for i in range(j+1):\n                if dp[i - 1] and s[i:j+1] in wordDict:\n                    dp[j] = True\n                    break\n\n        return dp[len(s) - 1]\n\n小结\n常见处理方式是给 0 位置占位，这样处理问题时一视同仁，初始化则在原来基础上 length+1，返回结果 f[n]\n\n状态可以为前 i 个\n初始化 length+1\n取值 index=i-1\n返回值：f[n]或者 f[m][n]\n\nTwo Sequences DP（40%）\nlongest-common-subsequence\n\n给定两个字符串  text1 和  text2，返回这两个字符串的最长公共子序列。\n一个字符串的   子序列   是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。\n例如，\"ace\" 是 \"abcde\" 的子序列，但 \"aec\" 不是 \"abcde\" 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。\n\n\n二维DP若只与当前行和上一行有关，可将空间复杂度降到线性\n\nclass Solution:\n    def longestCommonSubsequence(self, t1: str, t2: str) -> int:\n\n        if t1 == '' or t2 == '':\n            return 0\n\n        if len(t1) \nedit-distance\n\n给你两个单词  word1 和  word2，请你计算出将  word1  转换成  word2 所使用的最少操作数你可以对一个单词进行如下三种操作：\n插入一个字符\n删除一个字符\n替换一个字符\n\n思路：和上题很类似，相等则不需要操作，否则取删除、插入、替换最小操作次数的值+1\nclass Solution:\n    def minDistance(self, w1: str, w2: str) -> int:\n\n        if w1 == '': return len(w2)\n        if w2 == '': return len(w1)\n\n        m, n = len(w1), len(w2)\n        if m \n说明\n\n另外一种做法：MAXLEN(a,b)-LCS(a,b)\n\n零钱和背包（10%）\ncoin-change\n\n给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回  -1。\n\n思路：和其他 DP 不太一样，i 表示钱或者容量\nclass Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n\n        dp = [0] * (amount + 1)\n\n        for i in range(1, len(dp)):\n            dp[i] = float('inf')\n\n            for coin in coins:\n                if i >= coin and dp[i - coin] + 1 \nbackpack\n\n在 n 个物品中挑选若干物品装入背包，最多能装多满？假设背包的大小为 m，每个物品的大小为 A[i]\n\nclass Solution:\n    def backPack(self, m, A):\n\n        n = len(A)\n\n        dp = [0] * (m + 1)\n        dp_new = [0] * (m + 1)\n\n        for i in range(n):\n            for j in range(1, m + 1):\n                use_Ai = 0 if j - A[i] \nbackpack-ii\n\n有 n 个物品和一个大小为 m 的背包. 给定数组 A 表示每个物品的大小和数组 V 表示每个物品的价值.\n问最多能装入背包的总价值是多大?\n\n思路：dp(i, j) 为前 i 个物品，装入 j 背包的最大价值\nclass Solution:\n    def backPackII(self, m, A, V):\n\n        n = len(A)\n\n        dp = [0] * (m + 1)\n        dp_new = [0] * (m + 1)\n\n        for i in range(n):\n            for j in range(1, m + 1):\n                use_Ai = 0 if j - A[i] \n补充\nmaximum-product-subarray\n\n最大乘积子串\n\n处理负数情况稍微有点复杂，注意需要同时 DP 正数乘积和负数乘积\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n\n        max_product = float('-inf')\n\n        dp_pos, dp_neg = 0, 0\n\n        for num in nums:\n            if num > 0:\n                dp_pos, dp_neg = max(num, num * dp_pos), dp_neg * num\n            else:\n                dp_pos, dp_neg = dp_neg * num, min(num, dp_pos * num)\n\n            if dp_pos != 0:\n                max_product = max(max_product, dp_pos)\n            elif dp_neg != 0:\n                max_product = max(max_product, dp_neg)\n            else:\n                max_product = max(max_product, 0)\n\n        return max_product\n\ndecode-ways\n\n1 到 26 分别对应 a 到 z，给定输入数字串，问总共有多少种译码方法\n\n常规 DP 题，注意处理edge case即可\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n\n        def valid_2(i):\n            if i  9 and num \nbest-time-to-buy-and-sell-stock-with-cooldown\n\n给定股票每天的价格，每天可以买入卖出，买入后必须卖出才可以进行下一次购买，卖出后一天不可以购买，问可以获得的最大利润\n\n经典的维特比译码类问题，找到状态空间和状态转移关系即可\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n\n        buy, buy_then_nothing, sell, sell_then_nothing = float('-inf'), float('-inf'), float('-inf'), 0\n\n        for p in prices:\n            buy, buy_then_nothing, sell, sell_then_nothing = sell_then_nothing - p, max(buy, buy_then_nothing), max(buy, buy_then_nothing) + p, max(sell, sell_then_nothing)\n\n        return max(buy, buy_then_nothing, sell, sell_then_nothing)\n\nword-break-ii\n\n给定字符串和可选的单词列表，求字符串所有的分割方式\n\n思路：此题 DP 解法容易想但并不是好做法，因为和 word-break 不同，此题需要返回所有可行分割而不是找到一组就可以。这里使用 个人推荐 backtrack with memoization。\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n\n        n = len(s)\n        result = []\n        mem = collections.defaultdict(list)\n        wordDict = set(wordDict)\n\n        def backtrack(first=0, route=[]):\n            if first == n:\n                result.append(' '.join(route))\n                return True\n\n            if first not in mem:\n                for next_first in range(first + 1, n + 1):\n                    if s[first:next_first] in wordDict:\n                        route.append(s[first:next_first])\n                        if backtrack(next_first, route):\n                            mem[first].append(next_first)\n                        route.pop()\n                if len(mem[first]) > 0:\n                    return True\n            elif len(mem[first]) > 0:\n                for next_first in mem[first]:\n                    route.append(s[first:next_first])\n                    backtrack(next_first)\n                    route.pop()\n                return True\n\n            return False\n\n        backtrack()\n        return result\n\nburst-balloons\n\nn 个气球排成一行，每个气球上有一个分数，每次戳爆一个气球得分为该气球分数和相邻两气球分数的乘积，求最大得分\n\n此题主要难点是构造 DP 的状态，过程为逆着气球戳爆的顺序\nclass Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n\n        n = len(nums)\n        nums.append(1)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n        for dist in range(2, n + 2):\n            for left in range(-1, n - dist + 1):\n                right = left + dist\n                max_coin = float('-inf')\n                left_right = nums[left] * nums[right]\n                for j in range(left + 1, right):\n                    max_coin = max(max_coin, left_right * nums[j] + dp[left][j] + dp[j][right])\n                dp[left][right] = max_coin\n        nums.pop()\n        return dp[-1][n]\n\n练习\nMatrix DP (10%)\n\n[ ] triangle\n[ ] minimum-path-sum\n[ ] unique-paths\n[ ] unique-paths-ii\n\nSequence (40%)\n\n[ ] climbing-stairs\n[ ] jump-game\n[ ] jump-game-ii\n[ ] palindrome-partitioning-ii\n[ ] longest-increasing-subsequence\n[ ] word-break\n\nTwo Sequences DP (40%)\n\n[ ] longest-common-subsequence\n[ ] edit-distance\n\nBackpack & Coin Change (10%)\n\n[ ] coin-change\n[ ] backpack\n[ ] backpack-ii\n\n"},"advanced_algorithm/recursion.html":{"url":"advanced_algorithm/recursion.html","title":"递归思维","keywords":"","body":"递归\n介绍\n将大问题转化为小问题，通过递归依次解决各个小问题\n示例\nreverse-string\n\n编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组  char[]  的形式给出。\n\nclass Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        def rev_rec(s, i, j):\n            if i >= j:\n                return\n            s[i], s[j] = s[j], s[i]\n            rev_rec(s, i + 1, j - 1)\n            return\n\n        rev_rec(s, 0, len(s) - 1)\n\n        return\n\nswap-nodes-in-pairs\n\n给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。\n你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。\n\nclass Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n\n        if head is not None and head.next is not None:\n            head_next_pair = self.swapPairs(head.next.next)\n            p = head.next\n            head.next = head_next_pair\n            p.next = head\n            head = p\n\n        return head\n\nunique-binary-search-trees-ii\n\n给定一个整数 n，生成所有由 1 ... n 为节点所组成的二叉搜索树。\n\n注意：此题用来训练递归思维有理论意义，但是实际上算法返回的树并不是 deep copy，多个树之间会共享子树。\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:\n\n        def generateTrees_rec(i, j):\n\n            if i > j:\n                return [None]\n\n            result = []\n            for m in range(i, j + 1):\n                left = generateTrees_rec(i, m - 1)\n                right = generateTrees_rec(m + 1, j)\n\n                for l in left:\n                    for r in right:\n                        result.append(TreeNode(m, l, r))\n\n            return result\n\n        return generateTrees_rec(1, n) if n > 0 else []\n\n递归 + 备忘录 (recursion with memorization, top-down DP)\nfibonacci-number\n\n斐波那契数，通常用  F(n) 表示，形成的序列称为斐波那契数列。该数列由  0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：\nF(0) = 0,   F(1) = 1\nF(N) = F(N - 1) + F(N - 2), 其中 N > 1.\n给定  N，计算  F(N)。\n\nclass Solution:\n    def fib(self, N: int) -> int:\n\n        mem = [-1] * (N + 2)\n\n        mem[0], mem[1] = 0, 1\n\n        def fib_rec(n):\n            if mem[n] == -1:\n                mem[n] = fib_rec(n - 1) + fib_rec(n - 2)\n            return mem[n]\n\n        return fib_rec(N)\n\n练习\n\n[ ] reverse-string\n[ ] swap-nodes-in-pairs\n[ ] unique-binary-search-trees-ii\n[ ] fibonacci-number\n\n"},"advanced_algorithm/slide_window.html":{"url":"advanced_algorithm/slide_window.html","title":"滑动窗口思想","keywords":"","body":"滑动窗口\n模板\n/* 滑动窗口算法框架 */\nvoid slidingWindow(string s, string t) {\n    unordered_map need, window;\n    for (char c : t) need[c]++;\n\n    int left = 0, right = 0;\n    int valid = 0;\n    while (right \n需要变化的地方\n\n1、右指针右移之后窗口数据更新\n2、判断窗口是否要收缩\n3、左指针右移之后窗口数据更新\n4、根据题意计算结果\n\n示例\nminimum-window-substring\n\n给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字母的最小子串\n\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n\n        target = collections.defaultdict(int)\n        window = collections.defaultdict(int)\n\n        for c in t:\n            target[c] += 1\n\n        min_size = len(s) + 1\n        min_str = ''\n\n        l, r, count, num_char = 0, 0, 0, len(target)\n\n        while r  r - l + 1:\n                            min_size = r - l + 1\n                            min_str = s[l - 1:r]\n\n        return min_str\n\npermutation-in-string\n\n给定两个字符串  s1  和  s2，写一个函数来判断  s2  是否包含  s1 的排列。\n\nclass Solution:\n    def checkInclusion(self, s1: str, s2: str) -> bool:\n\n        target = collections.defaultdict(int)\n\n        for c in s1:\n            target[c] += 1\n\n        r, num_char = 0, len(target)\n\n        while r  target[c]:\n                        window[s2[l]] -= 1\n                        if window[s2[l]] == target[s2[l]] - 1:\n                            count -= 1\n                        l += 1\n                    r += 1\n            else:\n                r += 1\n\n        return False\n\nfind-all-anagrams-in-a-string\n\n给定一个字符串  s 和一个非空字符串  p，找到  s 中所有是  p 的字母异位词的子串，返回这些子串的起始索引。\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n\n        target = collections.defaultdict(int)\n\n        for c in p:\n            target[c] += 1\n\n        r, num_char = 0, len(target)\n\n        results = []\n        while r  target[c]:\n                        window[s[l]] -= 1\n                        if window[s[l]] == target[s[l]] - 1:\n                            count -= 1\n                        l += 1\n                    r += 1\n            else:\n                r += 1\n\n        return results\n\nlongest-substring-without-repeating-characters\n\n给定一个字符串，请你找出其中不含有重复字符的   最长子串   的长度。\n示例  1:\n输入: \"abcabcbb\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n\n        last_idx = {}\n\n        l, max_length = 0, 0\n        for r, c in enumerate(s):\n            if c in last_idx and last_idx[c] >= l:\n                max_length = max(max_length, r - l)\n                l = last_idx[c] + 1\n            last_idx[c] = r\n\n        return max(max_length, len(s) - l) # note that the last substring is not judged in the loop\n\n总结\n\n和双指针题目类似，更像双指针的升级版，滑动窗口核心点是维护一个窗口集，根据窗口集来进行处理\n核心步骤\nright 右移\n收缩\nleft 右移\n求结果\n\n\n\n练习\n\n[ ] minimum-window-substring\n[ ] permutation-in-string\n[ ] find-all-anagrams-in-a-string\n[ ] longest-substring-without-repeating-characters\n\n"},"advanced_algorithm/binary_search_tree.html":{"url":"advanced_algorithm/binary_search_tree.html","title":"二叉搜索树","keywords":"","body":"二叉搜索树\n定义\n\n每个节点中的值必须大于（或等于）存储在其左侧子树中的任何值。\n每个节点中的值必须小于（或等于）存储在其右子树中的任何值。\n\n应用\nvalidate-binary-search-tree\n\n验证二叉搜索树\n\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n\n        if root is None:\n            return True\n\n        s = [(root, float('-inf'), float('inf'))]\n        while len(s) > 0:\n            node, low, up = s.pop()\n            if node.left is not None:\n                if node.left.val = node.val:\n                    return False\n                s.append((node.left, low, node.val))\n            if node.right is not None:\n                if node.right.val = up:\n                    return False\n                s.append((node.right, node.val, up))\n        return True\n\ninsert-into-a-binary-search-tree\n\n给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 保证原始二叉搜索树中不存在新值。\n\nclass Solution:\n    def insertIntoBST(self, root: TreeNode, val: int) -> TreeNode:\n\n        if root is None:\n            return TreeNode(val)\n\n        if val > root.val:\n            root.right = self.insertIntoBST(root.right, val)\n        else:\n            root.left = self.insertIntoBST(root.left, val)\n\n        return root\n\ndelete-node-in-a-bst\n\n给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的  key  对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。\n\nclass Solution:\n    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:\n\n        # try to find the node\n        dummy = TreeNode(left=root)\n        parent, node = dummy, root\n        isleft = True\n        while node is not None and node.val != key:\n            parent = node\n            isleft = key \nbalanced-binary-tree\n\n给定一个二叉树，判断它是否是高度平衡的二叉树。\n\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n\n        # post-order iterative\n\n        s = [[TreeNode(), -1, -1]]\n        node, last = root, None\n        while len(s) > 1 or node is not None:\n            if node is not None:\n                s.append([node, -1, -1])\n                node = node.left\n                if node is None:\n                    s[-1][1] = 0\n            else:\n                peek = s[-1][0]\n                if peek.right is not None and last != peek.right:\n                    node = peek.right\n                else:\n                    if peek.right is None:\n                        s[-1][2] = 0\n                    last, dl, dr = s.pop()\n                    if abs(dl - dr) > 1:\n                        return False\n                    d = max(dl, dr) + 1\n                    if s[-1][1] == -1:\n                        s[-1][1] = d\n                    else:\n                        s[-1][2] = d\n\n        return True\n\nvalid-bfs-of-bst\n\n给定一个整数数组，求问此数组是不是一个 BST 的 BFS 顺序。\n\n此题是面试真题，但是没有在 leetcode 上找到原题。由于做法比较有趣也很有 BST 的特点，补充在这供参考。\nimport collections\n\ndef bst_bfs(A):\n\n    N = len(A)\n    interval = collections.deque([(float('-inf'), A[0]), (A[0], float('inf'))])\n\n    for i in range(1, N):\n        while interval:\n            lower, upper = interval.popleft()\n            if lower \n练习\n\n[ ] validate-binary-search-tree\n[ ] insert-into-a-binary-search-tree\n[ ] delete-node-in-a-bst\n[ ] balanced-binary-tree\n\n"},"advanced_algorithm/backtrack.html":{"url":"advanced_algorithm/backtrack.html","title":"回溯法","keywords":"","body":"回溯法\n背景\n回溯法（backtrack）常用于遍历列表所有子集，是 DFS 深度搜索一种，一般用于全排列，穷尽所有可能，遍历的过程实际上是一个决策树的遍历过程。时间复杂度一般 O(N!)，它不像动态规划存在重叠子问题可以优化，回溯算法就是纯暴力穷举，复杂度一般都很高。\n模板\nresult = []\nfunc backtrack(选择列表,路径):\n    if 满足结束条件:\n        result.add(路径)\n        return\n    for 选择 in 选择列表:\n        做选择\n        backtrack(选择列表,路径)\n        撤销选择\n\n核心就是从选择列表里做一个选择，然后一直递归往下搜索答案，如果遇到路径不通，就返回来撤销这次选择。\n示例\nsubsets\n\n给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。\n\n遍历过程\n\nclass Solution:\n    def subsets(self, nums: List[int]) -> List[List[int]]:\n\n        n = len(nums)\n        result = []\n\n        def backtrack(start, k, route=[]):\n            if len(route) == k:\n                result.append(route.copy())\n                return\n\n            for i in range(start, n):\n                route.append(nums[i])\n                backtrack(i + 1, k)\n                route.pop()\n\n            return\n\n        for k in range(n + 1):\n            backtrack(0, k)\n\n        return result\n\nsubsets-ii\n\n给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。说明：解集不能包含重复的子集。\n\nclass Solution:\n    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:\n\n        nums = sorted(nums)\n        n = len(nums)\n        result = []\n\n        def backtrack(start, k, route=[]):\n\n            if len(route) == k:\n                result.append(route.copy())\n                return\n\n            last = None\n            for i in range(start, n):\n                if nums[i] != last:\n                    route.append(nums[i])\n                    backtrack(i + 1, k)\n                    last = route.pop()\n\n            return\n\n        for k in range(n + 1):\n            backtrack(0, k)\n\n        return result\n\npermutations\n\n给定一个没有重复数字的序列，返回其所有可能的全排列。\n\n\n思路 1：需要记录已经选择过的元素，满足条件的结果才进行返回，需要额外 O(n) 的空间\n\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n\n        n = len(nums)\n        result = []\n\n        in_route = [False] * n\n\n        def backtrack(route=[]):\n\n            if len(route) == n:\n                result.append(route.copy())\n                return\n\n            for i in range(n):\n                if not in_route[i]:\n                    route.append(nums[i])\n                    in_route[i] = True\n                    backtrack()\n                    route.pop()\n                    in_route[i] = False\n\n            return\n\n        backtrack()\n        return result\n\n\n思路 2: 针对此题的更高级的回溯，利用原有的数组，每次回溯将新选择的元素与当前位置元素交换，回溯完成再换回来\n\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n\n        n = len(nums)\n        result = []\n\n        def backtrack(idx=0):\n            if idx == n:\n                result.append(nums.copy())\n            for i in range(idx, n):\n                nums[idx], nums[i] = nums[i], nums[idx]\n                backtrack(idx + 1)\n                nums[idx], nums[i] = nums[i], nums[idx]\n            return\n\n        backtrack()\n        return result\n\npermutations-ii\n\n给定一个可包含重复数字的序列，返回所有不重复的全排列。\n\n注意此题（貌似）无法使用上题的思路 2，因为交换操作会打乱排序。\nclass Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n\n        nums = sorted(nums)\n        n = len(nums)\n        result = []\n\n        in_route = [False] * n\n\n        def backtrack(route=[]):\n\n            if len(route) == n:\n                result.append(route.copy())\n                return\n\n            last = None\n            for i in range(n):\n                if not in_route[i] and nums[i] != last:\n                    route.append(nums[i])\n                    in_route[i] = True\n                    backtrack()\n                    last = route.pop()\n                    in_route[i] = False\n\n            return\n\n        backtrack()\n        return result\n\ncombination-sum\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n\n        n = len(candidates)\n        result = []\n\n        def backtrack(first=0, route=[], route_sum=0):\n\n            if route_sum == target:\n                result.append(route.copy())\n                return\n\n            if route_sum > target:\n                return\n\n            for i in range(first, n):\n                route.append(candidates[i])\n                route_sum += candidates[i]\n                backtrack(i, route, route_sum)\n                route_sum -= route.pop()\n\n            return\n\n        backtrack()\n        return result\n\nletter-combinations-of-a-phone-number\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n\n        n = len(digits)\n        result = []\n\n        if n == 0:\n            return result\n\n        num2char = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r', 's'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n\n        def backtrack(idx=0, route=[]):\n            if idx == n:\n                result.append(''.join(route))\n                return\n\n            for c in num2char[digits[idx]]:\n                route.append(c)\n                backtrack(idx + 1, route)\n                route.pop()\n\n            return\n\n        backtrack()\n        return result\n\npalindrome-partitioning\nclass Solution:\n    def partition(self, s: str) -> List[List[str]]:\n\n        N = len(s)\n        Pal = collections.defaultdict(set)\n\n        def isPal(i, j):\n            if i \nrestore-ip-addresses\nclass Solution:\n    def restoreIpAddresses(self, s: str) -> List[str]:\n\n        n = len(s)\n        result = []\n\n        if n > 12:\n            return result\n\n        def Valid_s(i, j):\n            return i \n练习\n\n[ ] subsets\n[ ] subsets-ii\n[ ] permutations\n[ ] permutations-ii\n\n[ ] combination-sum\n\n[ ] letter-combinations-of-a-phone-number\n[ ] palindrome-partitioning\n[ ] restore-ip-addresses\n\n"}}}